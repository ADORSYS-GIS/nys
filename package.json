{
  "name": "nys",
  "displayName": "nys",
  "description": "MCP Client extension for VS Code",
  "version": "5.5.6",
  "repository": {
    "type": "git",
    "url": "https://github.com/Christiantyemele/mimie.git"
  },
  "engines": {
    "vscode": "^1.60.0"
  },
  "engineStrict": false,
  "publisher": "Christian237",
  "homepage": "https://github.com/Christiantyemele/mimie.git",
  "bugs": {
    "url": "https://github.com/Christiantyemele/mimie.git"
  },
  "keywords": [
    "mcp",
    "client",
    "ai",
    "websocket"
  ],
  "categories": [
    "Other"
  ],
  "activationEvents": [
    "onCommand:vscode-mcp-client.connect",
    "onCommand:vscode-mcp-client.executePrompt",
    "onCommand:vscode-mcp-client.disconnect",
    "onCommand:vscode-mcp-client.listTools",
    "onView:mcpChat"
  ],
  "icon": "images/ext.jpeg",
  "main": "./out/extension.js",
  "browser": "./out/extension.js",
  "contributes": {
    "viewsContainers": {
      "activitybar": [
        {
          "id": "mcp-client",
          "title": "MCP AI Chat",
          "icon": "images/mcp.svg"
        }
      ]
    },
    "views": {
      "mcp-client": [
        {
          "id": "mcpChat",
          "name": "AI Chat",
          "type": "webview"
        }
      ]
    },
    "commands": [
      {
        "command": "vscode-mcp-client.connect",
        "title": "MCP: Connect to Server"
      },
      {
        "command": "vscode-mcp-client.disconnect",
        "title": "MCP: Disconnect"
      },
      {
        "command": "vscode-mcp-client.executePrompt",
        "title": "MCP: Execute Prompt"
      },
      {
        "command": "vscode-mcp-client.listTools",
        "title": "MCP: List Available Tools"
      },
      {
        "command": "vscode-mcp-client.openChatView",
        "title": "MCP: Open Chat View"
      }
    ],
    "configuration": {
      "title": "MCP Client",
      "properties": {
        "mcpClient.serverUrl": {
          "type": "string",
          "default": "http://localhost:8080",
          "description": "URL of the MCP server or path to MCP server binary for stdio mode"
        },
        "mcpClient.apiKey": {
          "type": "string",
          "default": "",
          "description": "API Key for the LLM service"
        },
        "mcpClient.modelProvider": {
          "type": "string",
          "enum": [
            "openai",
            "anthropic",
            "gemini"
          ],
          "default": "openai",
          "description": "LLM provider to use for parsing and other LLM operations"
        },
        "mcpClient.modelName": {
          "type": "string",
          "default": "",
          "description": "Model name to use with the selected provider (leave empty for default model)"
        },
        "mcpClient.githubToken": {
          "type": "string",
          "default": "",
          "description": "GitHub Personal Access Token required for github-mcp-server"
        },
        "mcpClient.remoteToolsets": {
          "type": "string",
          "default": "",
          "description": "Comma-separated toolset names to send via X-MCP-Toolsets header when using a remote HTTP MCP server."
        },
        "mcpClient.remoteReadonly": {
          "type": "boolean",
          "default": false,
          "description": "If true, sends X-MCP-Readonly: true when using a remote HTTP MCP server."
        },
        "mcpClient.serverType": {
          "type": "string",
          "enum": [
            "standard",
            "filesystem",
            "stdio"
          ],
          "default": "stdio",
          "description": "The type of MCP server: 'standard', 'filesystem', or 'stdio'"
        },
        "mcpClient.llmApiKey": {
          "type": "string",
          "default": "",
          "description": "API Key for the LLM service used for command parsing"
        },
        "mcpClient.useMockLlm": {
          "type": "boolean",
          "default": true,
          "description": "Use mock LLM implementation instead of making API calls (for testing or when no API key is available)"
        },
        "mcpClient.showSystemMessages": {
          "type": "boolean",
          "default": false,
          "description": "Show system notes/messages in the chat (recommended off in production)"
        },
        "mcpClient.showRawAssistantResponse": {
          "type": "boolean",
          "default": false,
          "description": "Show raw JSON output from assistant (dev/testing only; disables pretty print in chat)"
        },
        "mcpClient.embeddingServerUrl": {
          "type": "string",
          "default": "",
          "description": "URL of the Embedding MCP server (JSON-RPC over HTTP). Leave empty to let vector server handle embeddings."
        },
        "mcpClient.vectorServerUrl": {
          "type": "string",
          "default": "",
          "description": "URL of the Vector DB MCP server (JSON-RPC over HTTP) used for semantic tool selection."
        },
        "mcpClient.embeddingProvider": {
          "type": "string",
          "enum": [
            "openai",
            "gemini",
            "anthropic"
          ],
          "default": "openai",
          "description": "Provider to use for generating embeddings when no embedding MCP server is configured."
        },
        "mcpClient.embeddingModelName": {
          "type": "string",
          "default": "",
          "description": "Embedding model name to use with the selected embedding provider (e.g., 'text-embedding-3-small' for OpenAI or 'text-embedding-004' for Gemini)."
        },
        "mcpClient.embeddingApiKey": {
          "type": "string",
          "default": "",
          "description": "API Key specifically for the embedding provider (falls back to llmApiKey or apiKey if empty)."
        },
        "mcpClient.semanticNamespace": {
          "type": "string",
          "default": "github-tools",
          "description": "Semantic index namespace to store GitHub MCP tool catalog vectors."
        },
        "mcpClient.semanticTopK": {
          "type": "number",
          "default": 30,
          "description": "Maximum number of tools to retrieve from semantic search before prompt packing."
        },
        "mcpClient.milvusAddress": {
          "type": "string",
          "default": "127.0.0.1:19530",
          "description": "Milvus server address (host:port) for direct vector storage/query. Leave empty to use the Vector MCP server path instead."
        },
        "mcpClient.milvusUsername": {
          "type": "string",
          "default": "root",
          "description": "Milvus username (if authentication is enabled)."
        },
        "mcpClient.milvusPassword": {
          "type": "string",
          "default": "",
          "description": "Milvus password (if authentication is enabled)."
        },
        "mcpClient.milvusUseSSL": {
          "type": "boolean",
          "default": false,
          "description": "Use SSL/TLS when connecting to Milvus."
        },
        "mcpClient.milvusCollectionPrefix": {
          "type": "string",
          "default": "tools_",
          "description": "Prefix for Milvus collection names. The final collection is '<prefix><namespace>'."
        }
      }
    },
    "menus": {
      "editor/context": [
        {
          "command": "vscode-mcp-client.executePrompt",
          "group": "ai@1",
          "when": "editorTextFocus"
        }
      ],
      "commandPalette": [
        {
          "command": "vscode-mcp-client.connect"
        },
        {
          "command": "vscode-mcp-client.disconnect",
          "when": "false"
        },
        {
          "command": "vscode-mcp-client.executePrompt"
        },
        {
          "command": "vscode-mcp-client.listTools"
        }
      ]
    }
  },
  "capabilities": {
    "virtualWorkspaces": true,
    "untrustedWorkspaces": {
      "supported": true
    }
  },
  "scripts": {
    "vscode:prepublish": "npm run compile",
    "compile": "tsc -p ./",
    "watch": "tsc -watch -p ./",
    "pretest": "npm run compile && npm run lint",
    "lint": "eslint src --ext ts",
    "test": "node ./out/test/runTest.js",
    "package": "npx vsce package --no-git-tag-version --no-update-package-json",
    "package-no-deps": "npx vsce package --no-dependencies --no-git-tag-version --no-update-package-json",
    "simple-build": "bash ./scripts/simple-build.sh",
    "install-typescript": "node ./scripts/install-typescript.js",
    "bundle": "node ./scripts/bundle-extension.js",
    "bundle-new": "node ./scripts/bundle-extension.js.new",
    "fix-deps": "node ./scripts/fix-node-version.js",
    "direct-install": "bash ./scripts/direct-install.sh",
    "create-full-vsix": "node ./scripts/create-full-vsix.js",
    "webpack-bundle": "node ./scripts/webpack-bundle.js",
    "debug-github-token": "node ./scripts/fix-github-token.js",
    "test-mcp-connection": "node ./scripts/direct-connect.js",
    "fix-token-permission": "node ./scripts/fix-token-permission.js",
    "clean-reinstall": "bash ./scripts/clean-reinstall.sh"
  },
  "devDependencies": {
    "@azure/abort-controller": "1.0.0",
    "@azure/core-auth": "1.0.0",
    "@azure/core-client": "1.0.0",
    "@azure/core-rest-pipeline": "1.0.0",
    "@azure/core-tracing": "1.0.0",
    "@azure/core-util": "^1.0.0",
    "@azure/identity": "^1.0.0",
    "@azure/logger": "^1.0.0",
    "@azure/msal-browser": "^2.0.0",
    "@azure/msal-common": "^4.0.0",
    "@azure/msal-node": "^1.0.0",
    "@types/glob": "^7.1.3",
    "@types/minimatch": "^6.0.0",
    "@types/mocha": "^8.2.2",
    "@types/node": "^22.18.1",
    "@types/uuid": "^10.0.0",
    "@types/vscode": "^1.60.0",
    "@types/ws": "^8.5.4",
    "@typescript-eslint/eslint-plugin": "^4.22.0",
    "@typescript-eslint/parser": "^4.22.0",
    "@vscode/vsce": "^2.19.0",
    "eslint": "^7.24.0",
    "glob": "^7.1.6",
    "mocha": "^8.3.2",
    "ts-loader": "^8.1.0",
    "typescript": "^5.4.5",
    "vscode-test": "^1.5.2",
    "webpack": "^5.80.0",
    "webpack-cli": "^4.9.2"
  },
  "overrides": {
    "undici": "^5.28.4"
  },
  "dependencies": {
    "@anthropic-ai/sdk": "^0.17.1",
    "@google/generative-ai": "^0.1.3",
    "@typespec/ts-http-runtime": "^0.1.0",
    "axios": "^1.11.0",
    "es-set-tostringtag": "^2.1.0",
    "follow-redirects": "^1.15.11",
    "form-data": "^4.0.4",
    "langchain": "^0.3.33",
    "math-intrinsics": "^1.1.0",
    "openai": "^4.28.0",
    "uuid": "^8.3.2",
    "ws": "^8.18.3",
    "yaml": "^2.4.2",
    "zod": "3.25.6"
  },
  "optionalDependencies": {
    "@zilliz/milvus2-sdk-node": "^2.4.1",
    "milvus-sdk-node": "^2.4.1"
  }
}
