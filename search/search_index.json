{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Mira Documentation","text":"<p>Welcome to the Mira SPARC Workflow Engine documentation. This documentation is organized into several sections to help you find the information you need quickly.</p>"},{"location":"#documentation-structure","title":"\ud83d\udcda Documentation Structure","text":""},{"location":"#user-guide","title":"\ud83d\ude80 User Guide","text":"<p>For users who want to understand and use the SPARC Workflow Engine</p> <ul> <li>SPARC Workflow Engine Guide - Complete user guide with examples</li> <li>Quick Start Guide - Get up and running quickly</li> <li>Workflow Modes Guide - Understanding Design, Build, and Debug modes</li> <li>Issue Management - Creating and managing issues</li> </ul>"},{"location":"#technical-documentation","title":"\ud83d\udd27 Technical Documentation","text":"<p>For developers and technical implementers</p> <ul> <li>Technical Specification - Deep technical details</li> <li>Graph Architecture - AI-assisted workflow orchestration with LangGraph, agents, tools, and MCP servers</li> <li>Architecture Overview - System architecture and design</li> <li>Performance Guide - Optimization and performance considerations</li> <li>Security Guide - Security considerations and best practices</li> </ul>"},{"location":"#api-reference","title":"\ud83d\udcd6 API Reference","text":"<p>For developers integrating with the SPARC Workflow Engine</p> <ul> <li>Core API - Main SPARCWorkflowEngine class</li> <li>Graph Architecture API - AI agents, LangGraph, tools, and MCP servers API</li> <li>Interfaces - TypeScript interfaces and types</li> <li>Methods Reference - Detailed method documentation</li> <li>Error Handling - Error types and handling</li> </ul>"},{"location":"#examples","title":"\ud83d\udca1 Examples","text":"<p>Practical examples and use cases</p> <ul> <li>Basic Usage - Simple workflow examples</li> <li>Advanced Scenarios - Complex use cases</li> <li>Integration Examples - VS Code extension integration</li> <li>Custom Extensions - Creating custom processors</li> </ul>"},{"location":"#diagrams","title":"\ud83d\udcca Diagrams","text":"<p>Visual representations and flowcharts</p> <ul> <li>Workflow Diagrams - Complete visual workflow</li> <li>Graph Architecture Diagrams - AI agents, LangGraph, and MCP server interactions</li> <li>Architecture Diagrams - System architecture visuals</li> <li>Data Flow Diagrams - Data flow and state management</li> </ul>"},{"location":"#quick-navigation","title":"\ud83c\udfaf Quick Navigation","text":""},{"location":"#i-want-to","title":"I want to...","text":"<ul> <li>Get started quickly \u2192 Quick Start Guide</li> <li>Understand the workflow \u2192 User Guide</li> <li>See visual diagrams \u2192 Workflow Diagrams</li> <li>Understand AI orchestration \u2192 Graph Architecture</li> <li>See graph diagrams \u2192 Graph Architecture Diagrams</li> <li>Integrate the engine \u2192 API Reference</li> <li>Use graph APIs \u2192 Graph Architecture API</li> <li>Understand the architecture \u2192 Technical Specification</li> <li>See examples \u2192 Basic Usage</li> </ul>"},{"location":"#documentation-index","title":"\ud83d\udd0d Documentation Index","text":""},{"location":"#core-concepts","title":"Core Concepts","text":"<ul> <li>SPARC Framework - The 5-phase methodology</li> <li>Workflow Modes - Design, Build, Debug modes</li> <li>Issue Management - Issue-driven development</li> </ul>"},{"location":"#technical-details","title":"Technical Details","text":"<ul> <li>System Architecture - High-level system design</li> <li>State Management - How state is managed</li> <li>File System Integration - Storage and persistence</li> </ul>"},{"location":"#development","title":"Development","text":"<ul> <li>API Reference - Complete API documentation</li> <li>Error Handling - Error types and strategies</li> <li>Performance - Optimization guidelines</li> </ul>"},{"location":"#contributing-to-documentation","title":"\ud83d\udcdd Contributing to Documentation","text":"<p>If you find errors or want to improve the documentation:</p> <ol> <li>Check the Issues for existing documentation tasks</li> <li>Create a new issue for documentation improvements</li> <li>Follow the existing documentation structure and style</li> <li>Include examples where appropriate</li> </ol>"},{"location":"#related-resources","title":"\ud83d\udd17 Related Resources","text":"<ul> <li>Main README - Project overview and setup</li> <li>VS Code Extension Guide - Extension usage guide</li> <li>Technical Architecture - Overall system architecture</li> <li>Workflow Guide - SPARC methodology guide</li> </ul> <p>Last updated: January 2024</p>"},{"location":"README_SPLIT_SUMMARY/","title":"Documentation Pages","text":"<ul> <li>Introduction</li> <li>\ud83c\udfaf Core Philosophy</li> <li>\ud83d\ude80 Key Features</li> <li>\ud83d\udcc2 Issue Folder Structure</li> <li>\ud83d\udd04 Workflow Modes</li> <li>\ud83c\udfd7\ufe0f Architecture Overview</li> <li>Requirements</li> <li>Build &amp; Package</li> <li>\ud83d\ude80 Quick Start</li> <li>\ud83d\udccb Complete Command Reference</li> <li>Configuration (summary)</li> <li>Security &amp; Privacy</li> <li>Troubleshooting</li> <li>\ud83d\udcda Documentation</li> <li>Links</li> <li>License</li> </ul>"},{"location":"SUMMARY/","title":"SPARC Graph Architecture - Documentation Summary","text":""},{"location":"SUMMARY/#overview","title":"\ud83c\udfaf Overview","text":"<p>The SPARC Graph Architecture represents a sophisticated evolution of the SPARC Workflow Engine, introducing AI-assisted orchestration through a graph-like structure that combines:</p> <ul> <li>SPARC Workflow Methodology (Specification \u2192 Pseudocode \u2192 Architecture \u2192 Refinement \u2192 Completion)</li> <li>AI Agent Coordination (Design, Build, Debug, and Orchestration agents)</li> <li>LangGraph State Management (Graph-based workflow execution)</li> <li>Tool Integration (Built-in tools, MCP servers, external APIs, custom tools)</li> <li>MCP Server Support (Model Context Protocol for external service integration)</li> </ul>"},{"location":"SUMMARY/#documentation-structure","title":"\ud83d\udcda Documentation Structure","text":""},{"location":"SUMMARY/#core-architecture","title":"\ud83c\udfd7\ufe0f Core Architecture","text":"<ul> <li>SPARC Graph Architecture - Complete technical specification</li> <li>Graph Architecture API - Comprehensive API reference</li> <li>Graph Architecture Diagrams - Visual representations</li> </ul>"},{"location":"SUMMARY/#workflow-integration","title":"\ud83d\udd04 Workflow Integration","text":"<ul> <li>SPARC Workflow Engine - Original workflow documentation</li> <li>Technical Specification - Core engine details</li> <li>Workflow Diagrams - Visual workflow representations</li> </ul>"},{"location":"SUMMARY/#getting-started","title":"\ud83d\ude80 Getting Started","text":"<ul> <li>Quick Start Guide - Rapid setup and usage</li> <li>Basic Usage Examples - Practical implementation examples</li> </ul>"},{"location":"SUMMARY/#architecture-components","title":"\ud83c\udfd7\ufe0f Architecture Components","text":""},{"location":"SUMMARY/#1-graph-structure","title":"1. Graph Structure","text":"<pre><code>User Interface \u2192 Orchestration Layer \u2192 Workflow Graph Nodes \u2192 AI Agent Layer \u2192 Tool Integration Layer \u2192 Persistence Layer\n</code></pre>"},{"location":"SUMMARY/#2-node-types","title":"2. Node Types","text":"<ul> <li>Mode Nodes: Design, Build, Debug workflow states</li> <li>Phase Nodes: SPARC workflow phases (Specification, Pseudocode, Architecture, Refinement, Completion)</li> <li>Agent Nodes: AI assistant instances with specific capabilities</li> <li>Tool Nodes: Available tools and services</li> </ul>"},{"location":"SUMMARY/#3-edge-types","title":"3. Edge Types","text":"<ul> <li>Transition Edges: Workflow progression between nodes</li> <li>Agent-Tool Edges: Tool invocation by agents</li> <li>Context Edges: Information flow between components</li> </ul>"},{"location":"SUMMARY/#4-ai-agents","title":"4. AI Agents","text":"<ul> <li>Design Agent: Requirements analysis, architecture design, specification generation</li> <li>Build Agent: Code generation, test creation, documentation generation</li> <li>Debug Agent: Issue analysis, fix generation, performance optimization</li> <li>Orchestration Agent: Workflow coordination, state management, decision making</li> </ul>"},{"location":"SUMMARY/#5-tool-categories","title":"5. Tool Categories","text":"<ul> <li>Built-in Tools: File system, terminal, git, code analysis</li> <li>MCP Servers: GitHub, database, vector store, embedding services</li> <li>External APIs: Web search, documentation, code analysis services</li> <li>Custom Tools: Project-specific and domain-specific tools</li> </ul>"},{"location":"SUMMARY/#workflow-execution-flow","title":"\ud83d\udd04 Workflow Execution Flow","text":""},{"location":"SUMMARY/#1-user-input-processing","title":"1. User Input Processing","text":"<pre><code>User Input \u2192 Input Parsing \u2192 Mode Determination \u2192 State Initialization \u2192 LangGraph Execution\n</code></pre>"},{"location":"SUMMARY/#2-ai-agent-coordination","title":"2. AI Agent Coordination","text":"<pre><code>Agent Selection \u2192 Context Preparation \u2192 Agent Execution \u2192 Tool Invocation \u2192 Result Processing\n</code></pre>"},{"location":"SUMMARY/#3-state-management","title":"3. State Management","text":"<pre><code>State Loading \u2192 Context Enrichment \u2192 Execution Monitoring \u2192 State Persistence \u2192 Output Generation\n</code></pre>"},{"location":"SUMMARY/#implementation-guide","title":"\ud83d\udee0\ufe0f Implementation Guide","text":""},{"location":"SUMMARY/#1-core-classes","title":"1. Core Classes","text":"<ul> <li><code>LangGraphWorkflow</code>: Main workflow execution engine</li> <li><code>AgentRegistry</code>: AI agent management</li> <li><code>ToolRegistry</code>: Tool and service management</li> <li><code>ContextManager</code>: Context and memory management</li> <li><code>WorkflowExecutor</code>: High-level workflow orchestration</li> </ul>"},{"location":"SUMMARY/#2-key-interfaces","title":"2. Key Interfaces","text":"<ul> <li><code>WorkflowState</code>: Complete workflow state representation</li> <li><code>GraphNode</code>: Individual workflow nodes</li> <li><code>BaseAgent</code>: AI agent base class</li> <li><code>Tool</code>: Tool interface for all tool types</li> <li><code>MCPServer</code>: MCP server integration</li> </ul>"},{"location":"SUMMARY/#3-integration-points","title":"3. Integration Points","text":"<ul> <li>VS Code Extension integration</li> <li>Webview interface communication</li> <li>File system persistence (<code>.nys/</code> directory)</li> <li>External service integration</li> </ul>"},{"location":"SUMMARY/#configuration-and-setup","title":"\ud83d\udd27 Configuration and Setup","text":""},{"location":"SUMMARY/#1-agent-configuration","title":"1. Agent Configuration","text":"<pre><code>const designAgent = new DesignAgent(toolRegistry, contextManager);\nconst buildAgent = new BuildAgent(toolRegistry, contextManager);\nconst debugAgent = new DebugAgent(toolRegistry, contextManager);\nconst orchestrationAgent = new OrchestrationAgent(toolRegistry, contextManager);\n</code></pre>"},{"location":"SUMMARY/#2-tool-registration","title":"2. Tool Registration","text":"<pre><code>toolRegistry.registerTool(new FileSystemTool());\ntoolRegistry.registerMCPServer(new GitHubMCPServer());\ntoolRegistry.registerExternalAPI(new WebSearchAPI());\n</code></pre>"},{"location":"SUMMARY/#3-workflow-execution","title":"3. Workflow Execution","text":"<pre><code>const workflow = new LangGraphWorkflow(agentRegistry, toolRegistry, contextManager);\nconst result = await workflow.executeWorkflow(input);\n</code></pre>"},{"location":"SUMMARY/#performance-and-optimization","title":"\ud83d\udcca Performance and Optimization","text":""},{"location":"SUMMARY/#1-caching-strategies","title":"1. Caching Strategies","text":"<ul> <li>Node execution caching</li> <li>Tool result caching</li> <li>State compression and caching</li> </ul>"},{"location":"SUMMARY/#2-parallel-execution","title":"2. Parallel Execution","text":"<ul> <li>Multi-node parallel processing</li> <li>Concurrent tool execution</li> <li>Async workflow operations</li> </ul>"},{"location":"SUMMARY/#3-resource-management","title":"3. Resource Management","text":"<ul> <li>Memory optimization</li> <li>CPU usage monitoring</li> <li>Storage efficiency</li> </ul>"},{"location":"SUMMARY/#security-considerations","title":"\ud83d\udd12 Security Considerations","text":""},{"location":"SUMMARY/#1-agent-isolation","title":"1. Agent Isolation","text":"<ul> <li>Sandboxed execution environments</li> <li>Resource limits and monitoring</li> <li>Permission-based tool access</li> </ul>"},{"location":"SUMMARY/#2-data-protection","title":"2. Data Protection","text":"<ul> <li>Encryption at rest and in transit</li> <li>Secure authentication and authorization</li> <li>Audit logging and compliance</li> </ul>"},{"location":"SUMMARY/#3-tool-security","title":"3. Tool Security","text":"<ul> <li>Tool permission management</li> <li>Secure MCP server communication</li> <li>External API security</li> </ul>"},{"location":"SUMMARY/#future-enhancements","title":"\ud83d\ude80 Future Enhancements","text":""},{"location":"SUMMARY/#1-planned-features","title":"1. Planned Features","text":"<ul> <li>Dynamic graph construction</li> <li>Multi-agent collaboration</li> <li>Real-time optimization</li> <li>Federated learning</li> <li>Visual graph editor</li> </ul>"},{"location":"SUMMARY/#2-extension-points","title":"2. Extension Points","text":"<ul> <li>Custom node types</li> <li>Custom edge types</li> <li>Custom agents</li> <li>Custom tools</li> <li>Workflow hooks</li> </ul>"},{"location":"SUMMARY/#monitoring-and-analytics","title":"\ud83d\udcc8 Monitoring and Analytics","text":""},{"location":"SUMMARY/#1-performance-metrics","title":"1. Performance Metrics","text":"<ul> <li>Execution time tracking</li> <li>Resource usage monitoring</li> <li>Success rate analysis</li> <li>User satisfaction metrics</li> </ul>"},{"location":"SUMMARY/#2-workflow-analytics","title":"2. Workflow Analytics","text":"<ul> <li>Node execution patterns</li> <li>Tool usage statistics</li> <li>Error rate analysis</li> <li>Optimization opportunities</li> </ul>"},{"location":"SUMMARY/#related-documentation","title":"\ud83d\udd17 Related Documentation","text":""},{"location":"SUMMARY/#core-sparc-documentation","title":"Core SPARC Documentation","text":"<ul> <li>SPARC Workflow Engine Guide</li> <li>Technical Specification</li> <li>API Reference</li> </ul>"},{"location":"SUMMARY/#graph-architecture-documentation","title":"Graph Architecture Documentation","text":"<ul> <li>Graph Architecture</li> <li>Graph API Reference</li> <li>Graph Diagrams</li> </ul>"},{"location":"SUMMARY/#getting-started_1","title":"Getting Started","text":"<ul> <li>Quick Start Guide</li> <li>Basic Usage Examples</li> <li>Workflow Modes</li> </ul> <p>This summary provides a comprehensive overview of the SPARC Graph Architecture documentation, helping users navigate the extensive documentation and understand how all components work together to create a sophisticated AI-assisted workflow orchestration system.</p>"},{"location":"api-reference/core-api/","title":"Core API Reference","text":"<p>Complete API documentation for the SPARC Workflow Engine.</p>"},{"location":"api-reference/core-api/#sparcworkflowengine-class","title":"SPARCWorkflowEngine Class","text":"<p>The main orchestrator class that manages the entire SPARC workflow lifecycle.</p>"},{"location":"api-reference/core-api/#constructor","title":"Constructor","text":"<pre><code>constructor(workspaceRoot: vscode.Uri)\n</code></pre> <p>Parameters: - <code>workspaceRoot</code> - The root URI of the VS Code workspace</p> <p>Example:</p> <pre><code>const engine = new SPARCWorkflowEngine(workspaceRoot);\n</code></pre>"},{"location":"api-reference/core-api/#main-processing-method","title":"Main Processing Method","text":"<pre><code>async processIssue(\n  issueId: string, \n  mode: 'design' | 'build' | 'debug', \n  userInput: string\n): Promise&lt;SPARCWorkflowState&gt;\n</code></pre> <p>Parameters: - <code>issueId</code> - Unique identifier for the issue - <code>mode</code> - Current workflow mode (design/build/debug) - <code>userInput</code> - User's input/request for processing</p> <p>Returns: - <code>Promise&lt;SPARCWorkflowState&gt;</code> - Updated workflow state with generated artifacts</p> <p>Example:</p> <pre><code>const state = await engine.processIssue(\n  'auth-system-001', \n  'design', \n  'Create a user authentication system with JWT tokens'\n);\n\nconsole.log(`Current phase: ${state.currentPhase}`);\nconsole.log(`Progress: ${state.progress}%`);\nconsole.log(`Generated artifacts: ${Object.keys(state.artifacts).join(', ')}`);\n</code></pre> <p>Throws: - <code>FileSystemError</code> - If there are issues with file operations - <code>ValidationError</code> - If input validation fails - <code>WorkflowError</code> - If workflow logic is violated</p>"},{"location":"api-reference/core-api/#sparcworkflowstate-interface","title":"SPARCWorkflowState Interface","text":"<p>Defines the complete state of a workflow instance.</p> <pre><code>interface SPARCWorkflowState {\n  issueId: string;\n  currentPhase: 'specification' | 'pseudocode' | 'architecture' | 'refinement' | 'completion';\n  mode: 'design' | 'build' | 'debug';\n  progress: number;\n  artifacts: {\n    requirements?: string;\n    guidelines?: string;\n    pseudocode?: string;\n    architecture?: string;\n    implementation?: string;\n    tests?: string;\n    notes?: string;\n  };\n  createdAt: Date;\n  updatedAt: Date;\n}\n</code></pre>"},{"location":"api-reference/core-api/#properties","title":"Properties","text":""},{"location":"api-reference/core-api/#issueid-string","title":"<code>issueId: string</code>","text":"<p>Unique identifier for the issue. Used for file naming and state persistence.</p>"},{"location":"api-reference/core-api/#currentphase-workflowphase","title":"<code>currentPhase: WorkflowPhase</code>","text":"<p>Current phase in the SPARC workflow: - <code>'specification'</code> - Requirements extraction phase - <code>'pseudocode'</code> - Algorithm design phase - <code>'architecture'</code> - System architecture phase - <code>'refinement'</code> - Requirements refinement phase - <code>'completion'</code> - Design completion phase</p>"},{"location":"api-reference/core-api/#mode-workflowmode","title":"<code>mode: WorkflowMode</code>","text":"<p>Current processing mode: - <code>'design'</code> - Design mode for requirements and architecture - <code>'build'</code> - Build mode for implementation - <code>'debug'</code> - Debug mode for analysis and fixes</p>"},{"location":"api-reference/core-api/#progress-number","title":"<code>progress: number</code>","text":"<p>Completion percentage (0-100) for the current workflow.</p>"},{"location":"api-reference/core-api/#artifacts-artifacts","title":"<code>artifacts: Artifacts</code>","text":"<p>Generated artifacts as strings: - <code>requirements?</code> - Requirements specification document - <code>guidelines?</code> - Development guidelines document - <code>pseudocode?</code> - Algorithm pseudocode document - <code>architecture?</code> - System architecture document - <code>implementation?</code> - Generated implementation code - <code>tests?</code> - Test suite document - <code>notes?</code> - Debug notes and analysis</p>"},{"location":"api-reference/core-api/#createdat-date","title":"<code>createdAt: Date</code>","text":"<p>Timestamp when the workflow state was created.</p>"},{"location":"api-reference/core-api/#updatedat-date","title":"<code>updatedAt: Date</code>","text":"<p>Timestamp when the workflow state was last updated.</p>"},{"location":"api-reference/core-api/#workflow-phase-processing","title":"Workflow Phase Processing","text":""},{"location":"api-reference/core-api/#design-mode-processing","title":"Design Mode Processing","text":"<p>The design mode processes user input through 5 distinct phases:</p>"},{"location":"api-reference/core-api/#phase-1-specification-0-25","title":"Phase 1: Specification (0-25%)","text":"<pre><code>// Input: Raw user requirements\n// Output: requirements.md\nstate.artifacts.requirements = await this.generateRequirements(userInput);\nstate.currentPhase = 'pseudocode';\nstate.progress = 25;\n</code></pre>"},{"location":"api-reference/core-api/#phase-2-pseudocode-25-50","title":"Phase 2: Pseudocode (25-50%)","text":"<pre><code>// Input: User input + requirements\n// Output: pseudocode.md\nstate.artifacts.pseudocode = await this.generatePseudocode(userInput, state.artifacts.requirements);\nstate.currentPhase = 'architecture';\nstate.progress = 50;\n</code></pre>"},{"location":"api-reference/core-api/#phase-3-architecture-50-75","title":"Phase 3: Architecture (50-75%)","text":"<pre><code>// Input: User input + all previous artifacts\n// Output: architecture.md + guidelines.md\nstate.artifacts.architecture = await this.generateArchitecture(userInput, state.artifacts);\nstate.artifacts.guidelines = await this.generateGuidelines(userInput, state.artifacts);\nstate.currentPhase = 'refinement';\nstate.progress = 75;\n</code></pre>"},{"location":"api-reference/core-api/#phase-4-refinement-75-100","title":"Phase 4: Refinement (75-100%)","text":"<pre><code>// Input: User input + requirements\n// Output: Updated requirements.md\nstate.artifacts.requirements = await this.refineRequirements(\n  state.artifacts.requirements || '', \n  userInput\n);\nstate.currentPhase = 'completion';\nstate.progress = 100;\n</code></pre>"},{"location":"api-reference/core-api/#phase-5-completion-100","title":"Phase 5: Completion (100%)","text":"<pre><code>// Status: Design phase complete\n// Ready for Build mode\n</code></pre>"},{"location":"api-reference/core-api/#build-mode-processing","title":"Build Mode Processing","text":"<pre><code>// Prerequisites: Design phase must be complete\nif (state.currentPhase !== 'completion') {\n  state.artifacts.notes = (state.artifacts.notes || '') + \n    `\\n[${new Date().toISOString()}] Build requested but design incomplete. Current phase: ${state.currentPhase}`;\n  return;\n}\n\n// Generate implementation artifacts\nstate.artifacts.implementation = await this.generateImplementation(userInput, state.artifacts);\nstate.artifacts.tests = await this.generateTests(userInput, state.artifacts);\nstate.progress = 100;\n</code></pre>"},{"location":"api-reference/core-api/#debug-mode-processing","title":"Debug Mode Processing","text":"<pre><code>// Debug can work with any existing artifacts\nconst debugNotes = await this.analyzeAndDebug(userInput, state.artifacts);\nstate.artifacts.notes = (state.artifacts.notes || '') + \n  `\\n[${new Date().toISOString()}] Debug Analysis:\\n${debugNotes}`;\n</code></pre>"},{"location":"api-reference/core-api/#artifact-generation-methods","title":"Artifact Generation Methods","text":""},{"location":"api-reference/core-api/#requirements-generation","title":"Requirements Generation","text":"<pre><code>private async generateRequirements(userInput: string): Promise&lt;string&gt;\n</code></pre> <p>Parameters: - <code>userInput</code> - Raw user requirements/description</p> <p>Returns: - <code>Promise&lt;string&gt;</code> - Formatted requirements document</p> <p>Example Output:</p> <pre><code># Requirements Specification\n\n## User Input\nCreate a user authentication system\n\n## Extracted Requirements\n- Core functionality: User login/logout\n- Technical constraints: JWT tokens\n- Performance requirements: &lt; 200ms response time\n- Integration points: REST API endpoints\n\n## Acceptance Criteria\n- [ ] User can register with email/password\n- [ ] User can login and receive JWT token\n- [ ] User can logout and invalidate token\n</code></pre>"},{"location":"api-reference/core-api/#pseudocode-generation","title":"Pseudocode Generation","text":"<pre><code>private async generatePseudocode(userInput: string, requirements?: string): Promise&lt;string&gt;\n</code></pre> <p>Parameters: - <code>userInput</code> - User input for pseudocode generation - <code>requirements</code> - Optional requirements document</p> <p>Returns: - <code>Promise&lt;string&gt;</code> - Formatted pseudocode document</p>"},{"location":"api-reference/core-api/#architecture-generation","title":"Architecture Generation","text":"<pre><code>private async generateArchitecture(userInput: string, artifacts: any): Promise&lt;string&gt;\n</code></pre> <p>Parameters: - <code>userInput</code> - User input for architecture design - <code>artifacts</code> - All previously generated artifacts</p> <p>Returns: - <code>Promise&lt;string&gt;</code> - Formatted architecture document</p>"},{"location":"api-reference/core-api/#implementation-generation","title":"Implementation Generation","text":"<pre><code>private async generateImplementation(userInput: string, artifacts: any): Promise&lt;string&gt;\n</code></pre> <p>Parameters: - <code>userInput</code> - User input for implementation - <code>artifacts</code> - Design artifacts to base implementation on</p> <p>Returns: - <code>Promise&lt;string&gt;</code> - Formatted implementation document</p>"},{"location":"api-reference/core-api/#test-generation","title":"Test Generation","text":"<pre><code>private async generateTests(userInput: string, artifacts: any): Promise&lt;string&gt;\n</code></pre> <p>Parameters: - <code>userInput</code> - User input for test generation - <code>artifacts</code> - Implementation artifacts to test</p> <p>Returns: - <code>Promise&lt;string&gt;</code> - Formatted test suite document</p>"},{"location":"api-reference/core-api/#state-management","title":"State Management","text":""},{"location":"api-reference/core-api/#loading-workflow-state","title":"Loading Workflow State","text":"<pre><code>private async loadWorkflowState(issueId: string): Promise&lt;SPARCWorkflowState | null&gt;\n</code></pre> <p>Parameters: - <code>issueId</code> - Unique identifier for the issue</p> <p>Returns: - <code>Promise&lt;SPARCWorkflowState | null&gt;</code> - Loaded state or null if not found</p> <p>Example:</p> <pre><code>const state = await engine.loadWorkflowState('auth-system-001');\nif (state) {\n  console.log(`Loaded state for issue: ${state.issueId}`);\n  console.log(`Current phase: ${state.currentPhase}`);\n} else {\n  console.log('No existing state found');\n}\n</code></pre>"},{"location":"api-reference/core-api/#saving-workflow-state","title":"Saving Workflow State","text":"<pre><code>private async saveWorkflowState(state: SPARCWorkflowState): Promise&lt;void&gt;\n</code></pre> <p>Parameters: - <code>state</code> - Workflow state to save</p> <p>Returns: - <code>Promise&lt;void&gt;</code></p> <p>Example:</p> <pre><code>const state = await engine.processIssue('auth-system-001', 'design', 'Add JWT support');\nawait engine.saveWorkflowState(state);\nconsole.log('State saved successfully');\n</code></pre>"},{"location":"api-reference/core-api/#file-system-integration","title":"File System Integration","text":""},{"location":"api-reference/core-api/#artifact-file-mapping","title":"Artifact File Mapping","text":"Artifact Key File Name Purpose <code>requirements</code> <code>requirements.md</code> Technical specifications <code>guidelines</code> <code>guidelines.md</code> Development guidelines <code>pseudocode</code> <code>pseudocode.md</code> Algorithm design <code>architecture</code> <code>architecture.md</code> System architecture <code>implementation</code> <code>implementation.md</code> Generated code <code>tests</code> <code>tests.md</code> Test suites <code>notes</code> <code>notes.md</code> Debug notes"},{"location":"api-reference/core-api/#directory-structure","title":"Directory Structure","text":"<pre><code>.nys/\n\u251c\u2500\u2500 {issue-id}/\n\u2502   \u251c\u2500\u2500 requirements.md\n\u2502   \u251c\u2500\u2500 guidelines.md\n\u2502   \u251c\u2500\u2500 pseudocode.md\n\u2502   \u251c\u2500\u2500 architecture.md\n\u2502   \u251c\u2500\u2500 implementation.md\n\u2502   \u251c\u2500\u2500 tests.md\n\u2502   \u2514\u2500\u2500 notes.md\n\u2514\u2500\u2500 {issue-id}-workflow.json\n</code></pre>"},{"location":"api-reference/core-api/#error-handling","title":"Error Handling","text":""},{"location":"api-reference/core-api/#error-types","title":"Error Types","text":""},{"location":"api-reference/core-api/#filesystemerror","title":"FileSystemError","text":"<pre><code>class FileSystemError extends Error {\n  constructor(message: string, public readonly path: string) {\n    super(message);\n    this.name = 'FileSystemError';\n  }\n}\n</code></pre>"},{"location":"api-reference/core-api/#validationerror","title":"ValidationError","text":"<pre><code>class ValidationError extends Error {\n  constructor(message: string, public readonly field: string) {\n    super(message);\n    this.name = 'ValidationError';\n  }\n}\n</code></pre>"},{"location":"api-reference/core-api/#workflowerror","title":"WorkflowError","text":"<pre><code>class WorkflowError extends Error {\n  constructor(message: string, public readonly phase: string) {\n    super(message);\n    this.name = 'WorkflowError';\n  }\n}\n</code></pre>"},{"location":"api-reference/core-api/#error-handling-example","title":"Error Handling Example","text":"<pre><code>try {\n  const state = await engine.processIssue(issueId, mode, userInput);\n  return state;\n} catch (error) {\n  if (error instanceof FileSystemError) {\n    console.error(`File system error: ${error.message} at ${error.path}`);\n  } else if (error instanceof ValidationError) {\n    console.error(`Validation error in ${error.field}: ${error.message}`);\n  } else if (error instanceof WorkflowError) {\n    console.error(`Workflow error in phase ${error.phase}: ${error.message}`);\n  } else {\n    console.error('Unknown error:', error);\n  }\n  throw error;\n}\n</code></pre>"},{"location":"api-reference/core-api/#usage-examples","title":"Usage Examples","text":""},{"location":"api-reference/core-api/#basic-usage","title":"Basic Usage","text":"<pre><code>// Initialize the engine\nconst engine = new SPARCWorkflowEngine(workspaceRoot);\n\n// Process an issue through design mode\nlet state = await engine.processIssue(\n  'auth-system', \n  'design', \n  'Create a user authentication system'\n);\n\n// Continue through phases\nstate = await engine.processIssue(\n  'auth-system', \n  'design', \n  'Add JWT token support'\n);\n\n// Switch to build mode\nstate = await engine.processIssue(\n  'auth-system', \n  'build', \n  'Generate Express.js implementation'\n);\n\n// Debug the implementation\nstate = await engine.processIssue(\n  'auth-system', \n  'debug', \n  'Check for security vulnerabilities'\n);\n</code></pre>"},{"location":"api-reference/core-api/#advanced-usage","title":"Advanced Usage","text":"<pre><code>// Custom error handling\nasync function processIssueSafely(issueId: string, mode: string, input: string) {\n  try {\n    const state = await engine.processIssue(issueId, mode, input);\n\n    // Log progress\n    console.log(`Issue ${issueId} progress: ${state.progress}%`);\n    console.log(`Current phase: ${state.currentPhase}`);\n\n    // Check for specific artifacts\n    if (state.artifacts.implementation) {\n      console.log('Implementation generated successfully');\n    }\n\n    return state;\n  } catch (error) {\n    console.error(`Failed to process issue ${issueId}:`, error);\n    throw error;\n  }\n}\n\n// Batch processing\nasync function processMultipleIssues(issues: Array&lt;{id: string, mode: string, input: string}&gt;) {\n  const results = [];\n\n  for (const issue of issues) {\n    try {\n      const state = await engine.processIssue(issue.id, issue.mode, issue.input);\n      results.push({ success: true, state });\n    } catch (error) {\n      results.push({ success: false, error });\n    }\n  }\n\n  return results;\n}\n</code></pre>"},{"location":"api-reference/core-api/#performance-considerations","title":"Performance Considerations","text":""},{"location":"api-reference/core-api/#caching","title":"Caching","text":"<p>The engine implements caching for frequently accessed workflow states:</p> <pre><code>// State is automatically cached after processing\nconst state1 = await engine.processIssue('issue-1', 'design', 'input');\n// Subsequent access to the same issue will use cached state\nconst state2 = await engine.processIssue('issue-1', 'design', 'more input');\n</code></pre>"},{"location":"api-reference/core-api/#batch-operations","title":"Batch Operations","text":"<p>For multiple operations, consider batching:</p> <pre><code>// Process multiple inputs for the same issue\nconst inputs = ['input1', 'input2', 'input3'];\nlet state = await engine.processIssue('issue-1', 'design', inputs[0]);\n\nfor (let i = 1; i &lt; inputs.length; i++) {\n  state = await engine.processIssue('issue-1', 'design', inputs[i]);\n}\n</code></pre> <p>For more detailed information, see the Complete User Guide and Technical Specification.</p>"},{"location":"api-reference/graph-api/","title":"SPARC Graph Architecture - API Reference","text":""},{"location":"api-reference/graph-api/#overview","title":"Overview","text":"<p>This document provides comprehensive API reference for the SPARC Graph Architecture, including interfaces, classes, methods, and data structures used in the AI-assisted workflow orchestration system.</p>"},{"location":"api-reference/graph-api/#core-interfaces","title":"\ud83c\udfd7\ufe0f Core Interfaces","text":""},{"location":"api-reference/graph-api/#workflowstate-interface","title":"WorkflowState Interface","text":"<pre><code>interface WorkflowState {\n  // Core workflow information\n  issueId: string;\n  currentMode: 'design' | 'build' | 'debug';\n  currentPhase: string;\n  progress: number;\n\n  // Issue context\n  issueTitle: string;\n  issueDescription: string;\n\n  // Generated artifacts\n  artifacts: ArtifactMap;\n\n  // AI context\n  aiContext: AIContext;\n\n  // Memory and context\n  memory: MemoryContext;\n\n  // Workflow metadata\n  metadata: WorkflowMetadata;\n\n  // Timestamps\n  createdAt: Date;\n  updatedAt: Date;\n}\n\ninterface ArtifactMap {\n  requirements?: string;\n  guidelines?: string;\n  pseudocode?: string;\n  architecture?: string;\n  implementation?: string;\n  tests?: string;\n  notes?: string;\n}\n\ninterface AIContext {\n  currentAgent: string;\n  agentHistory: AgentAction[];\n  toolCalls: ToolCall[];\n  decisions: Decision[];\n}\n\ninterface MemoryContext {\n  chatHistory: ChatMessage[];\n  context: ContextData;\n  retrievedContext: RetrievedContext[];\n}\n\ninterface WorkflowMetadata {\n  transitions: Transition[];\n  errors: Error[];\n  performance: PerformanceMetrics;\n}\n</code></pre>"},{"location":"api-reference/graph-api/#graphnode-interface","title":"GraphNode Interface","text":"<pre><code>interface GraphNode {\n  id: string;\n  type: 'mode' | 'phase' | 'agent' | 'tool';\n  status: 'active' | 'completed' | 'pending' | 'blocked';\n  data: NodeData;\n  edges: Edge[];\n  metadata: NodeMetadata;\n}\n\ninterface NodeData {\n  // Mode node data\n  mode?: 'design' | 'build' | 'debug';\n  currentPhase?: string;\n  progress?: number;\n\n  // Phase node data\n  phase?: 'specification' | 'pseudocode' | 'architecture' | 'refinement' | 'completion';\n  input?: string;\n  output?: string;\n\n  // Agent node data\n  agentType?: 'design' | 'build' | 'debug' | 'orchestration';\n  role?: string;\n  capabilities?: string[];\n\n  // Tool node data\n  toolName?: string;\n  toolType?: 'built-in' | 'mcp' | 'external' | 'custom';\n  parameters?: ParameterSchema;\n}\n\ninterface Edge {\n  id: string;\n  from: string;\n  to: string;\n  type: 'transition' | 'tool_invocation' | 'context_flow';\n  condition?: TransitionCondition;\n  weight: number;\n  metadata: EdgeMetadata;\n}\n</code></pre>"},{"location":"api-reference/graph-api/#ai-agent-classes","title":"\ud83e\udd16 AI Agent Classes","text":""},{"location":"api-reference/graph-api/#baseagent-class","title":"BaseAgent Class","text":"<pre><code>abstract class BaseAgent {\n  protected id: string;\n  protected type: AgentType;\n  protected capabilities: string[];\n  protected tools: ToolRegistry;\n  protected context: ContextManager;\n\n  constructor(\n    id: string,\n    type: AgentType,\n    capabilities: string[],\n    tools: ToolRegistry,\n    context: ContextManager\n  ) {\n    this.id = id;\n    this.type = type;\n    this.capabilities = capabilities;\n    this.tools = tools;\n    this.context = context;\n  }\n\n  abstract execute(\n    input: string,\n    context: WorkflowContext,\n    tools: ToolRegistry\n  ): Promise&lt;AgentResult&gt;;\n\n  protected validateInput(input: string): boolean {\n    // Input validation logic\n  }\n\n  protected logAction(action: AgentAction): void {\n    // Action logging logic\n  }\n}\n\ntype AgentType = 'design' | 'build' | 'debug' | 'orchestration';\n</code></pre>"},{"location":"api-reference/graph-api/#designagent-class","title":"DesignAgent Class","text":"<pre><code>class DesignAgent extends BaseAgent {\n  constructor(tools: ToolRegistry, context: ContextManager) {\n    super(\n      'design-agent',\n      'design',\n      [\n        'requirements_analysis',\n        'architecture_design',\n        'specification_generation',\n        'pseudocode_creation'\n      ],\n      tools,\n      context\n    );\n  }\n\n  async execute(\n    input: string,\n    context: WorkflowContext,\n    tools: ToolRegistry\n  ): Promise&lt;AgentResult&gt; {\n    const phase = this.determinePhase(context);\n\n    switch (phase) {\n      case 'specification':\n        return await this.processSpecification(input, context, tools);\n      case 'pseudocode':\n        return await this.processPseudocode(input, context, tools);\n      case 'architecture':\n        return await this.processArchitecture(input, context, tools);\n      case 'refinement':\n        return await this.processRefinement(input, context, tools);\n      case 'completion':\n        return await this.processCompletion(input, context, tools);\n      default:\n        throw new Error(`Unknown phase: ${phase}`);\n    }\n  }\n\n  private async processSpecification(\n    input: string,\n    context: WorkflowContext,\n    tools: ToolRegistry\n  ): Promise&lt;AgentResult&gt; {\n    // Implementation for specification phase\n  }\n\n  private async processPseudocode(\n    input: string,\n    context: WorkflowContext,\n    tools: ToolRegistry\n  ): Promise&lt;AgentResult&gt; {\n    // Implementation for pseudocode phase\n  }\n\n  private async processArchitecture(\n    input: string,\n    context: WorkflowContext,\n    tools: ToolRegistry\n  ): Promise&lt;AgentResult&gt; {\n    // Implementation for architecture phase\n  }\n\n  private async processRefinement(\n    input: string,\n    context: WorkflowContext,\n    tools: ToolRegistry\n  ): Promise&lt;AgentResult&gt; {\n    // Implementation for refinement phase\n  }\n\n  private async processCompletion(\n    input: string,\n    context: WorkflowContext,\n    tools: ToolRegistry\n  ): Promise&lt;AgentResult&gt; {\n    // Implementation for completion phase\n  }\n\n  private determinePhase(context: WorkflowContext): string {\n    // Phase determination logic\n  }\n}\n</code></pre>"},{"location":"api-reference/graph-api/#buildagent-class","title":"BuildAgent Class","text":"<pre><code>class BuildAgent extends BaseAgent {\n  constructor(tools: ToolRegistry, context: ContextManager) {\n    super(\n      'build-agent',\n      'build',\n      [\n        'code_generation',\n        'test_creation',\n        'documentation_generation',\n        'configuration_creation'\n      ],\n      tools,\n      context\n    );\n  }\n\n  async execute(\n    input: string,\n    context: WorkflowContext,\n    tools: ToolRegistry\n  ): Promise&lt;AgentResult&gt; {\n    const phase = this.determinePhase(context);\n\n    switch (phase) {\n      case 'implementation':\n        return await this.processImplementation(input, context, tools);\n      case 'testing':\n        return await this.processTesting(input, context, tools);\n      case 'documentation':\n        return await this.processDocumentation(input, context, tools);\n      case 'configuration':\n        return await this.processConfiguration(input, context, tools);\n      default:\n        throw new Error(`Unknown phase: ${phase}`);\n    }\n  }\n\n  private async processImplementation(\n    input: string,\n    context: WorkflowContext,\n    tools: ToolRegistry\n  ): Promise&lt;AgentResult&gt; {\n    // Implementation for code generation\n  }\n\n  private async processTesting(\n    input: string,\n    context: WorkflowContext,\n    tools: ToolRegistry\n  ): Promise&lt;AgentResult&gt; {\n    // Implementation for test creation\n  }\n\n  private async processDocumentation(\n    input: string,\n    context: WorkflowContext,\n    tools: ToolRegistry\n  ): Promise&lt;AgentResult&gt; {\n    // Implementation for documentation generation\n  }\n\n  private async processConfiguration(\n    input: string,\n    context: WorkflowContext,\n    tools: ToolRegistry\n  ): Promise&lt;AgentResult&gt; {\n    // Implementation for configuration creation\n  }\n}\n</code></pre>"},{"location":"api-reference/graph-api/#debugagent-class","title":"DebugAgent Class","text":"<pre><code>class DebugAgent extends BaseAgent {\n  constructor(tools: ToolRegistry, context: ContextManager) {\n    super(\n      'debug-agent',\n      'debug',\n      [\n        'code_analysis',\n        'issue_detection',\n        'fix_generation',\n        'performance_optimization'\n      ],\n      tools,\n      context\n    );\n  }\n\n  async execute(\n    input: string,\n    context: WorkflowContext,\n    tools: ToolRegistry\n  ): Promise&lt;AgentResult&gt; {\n    const phase = this.determinePhase(context);\n\n    switch (phase) {\n      case 'analysis':\n        return await this.processAnalysis(input, context, tools);\n      case 'issue_detection':\n        return await this.processIssueDetection(input, context, tools);\n      case 'fix_generation':\n        return await this.processFixGeneration(input, context, tools);\n      case 'optimization':\n        return await this.processOptimization(input, context, tools);\n      default:\n        throw new Error(`Unknown phase: ${phase}`);\n    }\n  }\n\n  private async processAnalysis(\n    input: string,\n    context: WorkflowContext,\n    tools: ToolRegistry\n  ): Promise&lt;AgentResult&gt; {\n    // Implementation for code analysis\n  }\n\n  private async processIssueDetection(\n    input: string,\n    context: WorkflowContext,\n    tools: ToolRegistry\n  ): Promise&lt;AgentResult&gt; {\n    // Implementation for issue detection\n  }\n\n  private async processFixGeneration(\n    input: string,\n    context: WorkflowContext,\n    tools: ToolRegistry\n  ): Promise&lt;AgentResult&gt; {\n    // Implementation for fix generation\n  }\n\n  private async processOptimization(\n    input: string,\n    context: WorkflowContext,\n    tools: ToolRegistry\n  ): Promise&lt;AgentResult&gt; {\n    // Implementation for performance optimization\n  }\n}\n</code></pre>"},{"location":"api-reference/graph-api/#orchestrationagent-class","title":"OrchestrationAgent Class","text":"<pre><code>class OrchestrationAgent extends BaseAgent {\n  constructor(tools: ToolRegistry, context: ContextManager) {\n    super(\n      'orchestration-agent',\n      'orchestration',\n      [\n        'workflow_coordination',\n        'state_management',\n        'decision_making',\n        'conflict_resolution'\n      ],\n      tools,\n      context\n    );\n  }\n\n  async execute(\n    input: string,\n    context: WorkflowContext,\n    tools: ToolRegistry\n  ): Promise&lt;AgentResult&gt; {\n    const action = this.determineAction(input, context);\n\n    switch (action) {\n      case 'coordinate_workflow':\n        return await this.coordinateWorkflow(input, context, tools);\n      case 'manage_transitions':\n        return await this.manageTransitions(input, context, tools);\n      case 'resolve_conflicts':\n        return await this.resolveConflicts(input, context, tools);\n      case 'optimize_workflow':\n        return await this.optimizeWorkflow(input, context, tools);\n      default:\n        throw new Error(`Unknown action: ${action}`);\n    }\n  }\n\n  private async coordinateWorkflow(\n    input: string,\n    context: WorkflowContext,\n    tools: ToolRegistry\n  ): Promise&lt;AgentResult&gt; {\n    // Implementation for workflow coordination\n  }\n\n  private async manageTransitions(\n    input: string,\n    context: WorkflowContext,\n    tools: ToolRegistry\n  ): Promise&lt;AgentResult&gt; {\n    // Implementation for transition management\n  }\n\n  private async resolveConflicts(\n    input: string,\n    context: WorkflowContext,\n    tools: ToolRegistry\n  ): Promise&lt;AgentResult&gt; {\n    // Implementation for conflict resolution\n  }\n\n  private async optimizeWorkflow(\n    input: string,\n    context: WorkflowContext,\n    tools: ToolRegistry\n  ): Promise&lt;AgentResult&gt; {\n    // Implementation for workflow optimization\n  }\n}\n</code></pre>"},{"location":"api-reference/graph-api/#tool-integration-classes","title":"\ud83d\udd27 Tool Integration Classes","text":""},{"location":"api-reference/graph-api/#toolregistry-class","title":"ToolRegistry Class","text":"<pre><code>class ToolRegistry {\n  private tools: Map&lt;string, Tool&gt;;\n  private mcpServers: Map&lt;string, MCPServer&gt;;\n  private externalAPIs: Map&lt;string, ExternalAPI&gt;;\n\n  constructor() {\n    this.tools = new Map();\n    this.mcpServers = new Map();\n    this.externalAPIs = new Map();\n  }\n\n  registerTool(tool: Tool): void {\n    this.tools.set(tool.name, tool);\n  }\n\n  registerMCPServer(server: MCPServer): void {\n    this.mcpServers.set(server.name, server);\n  }\n\n  registerExternalAPI(api: ExternalAPI): void {\n    this.externalAPIs.set(api.name, api);\n  }\n\n  getTool(name: string): Tool | undefined {\n    return this.tools.get(name);\n  }\n\n  getMCPServer(name: string): MCPServer | undefined {\n    return this.mcpServers.get(name);\n  }\n\n  getExternalAPI(name: string): ExternalAPI | undefined {\n    return this.externalAPIs.get(name);\n  }\n\n  async invokeTool(\n    name: string,\n    parameters: ToolParameters,\n    context: ToolContext\n  ): Promise&lt;ToolResult&gt; {\n    const tool = this.getTool(name);\n    if (!tool) {\n      throw new Error(`Tool ${name} not found`);\n    }\n\n    return await tool.execute(parameters, context);\n  }\n\n  async invokeMCPServer(\n    serverName: string,\n    toolName: string,\n    parameters: ToolParameters,\n    context: ToolContext\n  ): Promise&lt;ToolResult&gt; {\n    const server = this.getMCPServer(serverName);\n    if (!server) {\n      throw new Error(`MCP server ${serverName} not found`);\n    }\n\n    return await server.invokeTool(toolName, parameters, context);\n  }\n\n  async invokeExternalAPI(\n    apiName: string,\n    endpoint: string,\n    parameters: ToolParameters,\n    context: ToolContext\n  ): Promise&lt;ToolResult&gt; {\n    const api = this.getExternalAPI(apiName);\n    if (!api) {\n      throw new Error(`External API ${apiName} not found`);\n    }\n\n    return await api.invokeEndpoint(endpoint, parameters, context);\n  }\n}\n</code></pre>"},{"location":"api-reference/graph-api/#tool-interface","title":"Tool Interface","text":"<pre><code>interface Tool {\n  name: string;\n  description: string;\n  category: ToolCategory;\n  parameters: ParameterSchema;\n  capabilities: string[];\n\n  execute(\n    parameters: ToolParameters,\n    context: ToolContext\n  ): Promise&lt;ToolResult&gt;;\n\n  validateParameters(parameters: ToolParameters): boolean;\n  getCapabilities(): string[];\n}\n\ntype ToolCategory = 'filesystem' | 'terminal' | 'git' | 'analysis' | 'mcp' | 'external' | 'custom';\n\ninterface ParameterSchema {\n  [key: string]: {\n    type: 'string' | 'number' | 'boolean' | 'array' | 'object';\n    required?: boolean;\n    default?: any;\n    enum?: any[];\n    description?: string;\n  };\n}\n\ninterface ToolParameters {\n  [key: string]: any;\n}\n\ninterface ToolContext {\n  agentId: string;\n  sessionId: string;\n  issueId: string;\n  workspaceRoot: string;\n  permissions: string[];\n}\n\ninterface ToolResult {\n  success: boolean;\n  data?: any;\n  error?: string;\n  metadata?: ToolMetadata;\n}\n\ninterface ToolMetadata {\n  executionTime: number;\n  resourceUsage: ResourceUsage;\n  timestamp: Date;\n}\n</code></pre>"},{"location":"api-reference/graph-api/#mcpserver-class","title":"MCPServer Class","text":"<pre><code>class MCPServer {\n  name: string;\n  serverUrl: string;\n  serverType: 'http' | 'websocket' | 'stdio';\n  authentication: AuthConfig;\n  tools: MCPTool[];\n\n  constructor(\n    name: string,\n    serverUrl: string,\n    serverType: 'http' | 'websocket' | 'stdio',\n    authentication: AuthConfig,\n    tools: MCPTool[]\n  ) {\n    this.name = name;\n    this.serverUrl = serverUrl;\n    this.serverType = serverType;\n    this.authentication = authentication;\n    this.tools = tools;\n  }\n\n  async invokeTool(\n    toolName: string,\n    parameters: ToolParameters,\n    context: ToolContext\n  ): Promise&lt;ToolResult&gt; {\n    const tool = this.tools.find(t =&gt; t.name === toolName);\n    if (!tool) {\n      throw new Error(`Tool ${toolName} not found in MCP server ${this.name}`);\n    }\n\n    // Implementation for MCP server communication\n    return await this.communicateWithServer(tool, parameters, context);\n  }\n\n  private async communicateWithServer(\n    tool: MCPTool,\n    parameters: ToolParameters,\n    context: ToolContext\n  ): Promise&lt;ToolResult&gt; {\n    // Implementation for server communication\n  }\n}\n\ninterface MCPTool {\n  name: string;\n  description: string;\n  parameters: ParameterSchema;\n  capabilities: string[];\n}\n\ninterface AuthConfig {\n  type: 'token' | 'api_key' | 'oauth' | 'none';\n  token?: string;\n  key?: string;\n  secret?: string;\n  scopes?: string[];\n}\n</code></pre>"},{"location":"api-reference/graph-api/#langgraph-integration-classes","title":"\ud83d\udcca LangGraph Integration Classes","text":""},{"location":"api-reference/graph-api/#langgraphworkflow-class","title":"LangGraphWorkflow Class","text":"<pre><code>class LangGraphWorkflow {\n  private state: WorkflowState;\n  private nodes: Map&lt;string, GraphNode&gt;;\n  private edges: Map&lt;string, Edge&gt;;\n  private agentRegistry: AgentRegistry;\n  private toolRegistry: ToolRegistry;\n  private contextManager: ContextManager;\n\n  constructor(\n    agentRegistry: AgentRegistry,\n    toolRegistry: ToolRegistry,\n    contextManager: ContextManager\n  ) {\n    this.agentRegistry = agentRegistry;\n    this.toolRegistry = toolRegistry;\n    this.contextManager = contextManager;\n    this.nodes = new Map();\n    this.edges = new Map();\n  }\n\n  async executeWorkflow(input: WorkflowInput): Promise&lt;WorkflowOutput&gt; {\n    // Initialize state\n    this.state = await this.initializeState(input);\n\n    // Execute graph traversal\n    while (!this.isComplete()) {\n      const currentNode = this.getCurrentNode();\n      const nextNode = await this.executeNode(currentNode);\n      await this.transitionTo(nextNode);\n    }\n\n    return this.generateOutput();\n  }\n\n  private async initializeState(input: WorkflowInput): Promise&lt;WorkflowState&gt; {\n    // State initialization logic\n  }\n\n  private async executeNode(node: GraphNode): Promise&lt;GraphNode&gt; {\n    // Get appropriate agent\n    const agent = this.agentRegistry.getAgent(node.data.agentType!);\n\n    // Execute agent with tools\n    const result = await agent.execute(\n      node.data.input || '',\n      this.state,\n      this.toolRegistry\n    );\n\n    // Update state\n    await this.updateState(result);\n\n    // Determine next node\n    return this.determineNextNode(node, result);\n  }\n\n  private async updateState(result: AgentResult): Promise&lt;void&gt; {\n    // State update logic\n  }\n\n  private async transitionTo(nextNode: GraphNode): Promise&lt;void&gt; {\n    // Transition logic\n  }\n\n  private isComplete(): boolean {\n    // Completion check logic\n  }\n\n  private getCurrentNode(): GraphNode {\n    // Current node retrieval logic\n  }\n\n  private determineNextNode(\n    currentNode: GraphNode,\n    result: AgentResult\n  ): GraphNode {\n    // Next node determination logic\n  }\n\n  private generateOutput(): WorkflowOutput {\n    // Output generation logic\n  }\n}\n</code></pre>"},{"location":"api-reference/graph-api/#agentregistry-class","title":"AgentRegistry Class","text":"<pre><code>class AgentRegistry {\n  private agents: Map&lt;AgentType, BaseAgent&gt;;\n\n  constructor() {\n    this.agents = new Map();\n  }\n\n  registerAgent(agent: BaseAgent): void {\n    this.agents.set(agent.type, agent);\n  }\n\n  getAgent(type: AgentType): BaseAgent {\n    const agent = this.agents.get(type);\n    if (!agent) {\n      throw new Error(`Agent of type ${type} not found`);\n    }\n    return agent;\n  }\n\n  getAllAgents(): BaseAgent[] {\n    return Array.from(this.agents.values());\n  }\n\n  hasAgent(type: AgentType): boolean {\n    return this.agents.has(type);\n  }\n}\n</code></pre>"},{"location":"api-reference/graph-api/#contextmanager-class","title":"ContextManager Class","text":"<pre><code>class ContextManager {\n  private context: Map&lt;string, ContextData&gt;;\n  private memory: MemoryManager;\n  private vectorStore: VectorStore;\n\n  constructor(memory: MemoryManager, vectorStore: VectorStore) {\n    this.context = new Map();\n    this.memory = memory;\n    this.vectorStore = vectorStore;\n  }\n\n  async enrichContext(context: WorkflowContext): Promise&lt;EnrichedContext&gt; {\n    // Context enrichment logic\n  }\n\n  async updateContext(result: AgentResult): Promise&lt;void&gt; {\n    // Context update logic\n  }\n\n  async retrieveContext(query: string, limit: number = 10): Promise&lt;RetrievedContext[]&gt; {\n    // Context retrieval logic\n  }\n\n  async storeContext(context: ContextData): Promise&lt;void&gt; {\n    // Context storage logic\n  }\n\n  async getContext(key: string): Promise&lt;ContextData | undefined&gt; {\n    return this.context.get(key);\n  }\n\n  async setContext(key: string, data: ContextData): Promise&lt;void&gt; {\n    this.context.set(key, data);\n  }\n}\n</code></pre>"},{"location":"api-reference/graph-api/#workflow-execution-classes","title":"\ud83d\udd04 Workflow Execution Classes","text":""},{"location":"api-reference/graph-api/#workflowexecutor-class","title":"WorkflowExecutor Class","text":"<pre><code>class WorkflowExecutor {\n  private langGraphWorkflow: LangGraphWorkflow;\n  private agentRegistry: AgentRegistry;\n  private toolRegistry: ToolRegistry;\n  private contextManager: ContextManager;\n  private persistenceLayer: PersistenceLayer;\n\n  constructor(\n    agentRegistry: AgentRegistry,\n    toolRegistry: ToolRegistry,\n    contextManager: ContextManager,\n    persistenceLayer: PersistenceLayer\n  ) {\n    this.agentRegistry = agentRegistry;\n    this.toolRegistry = toolRegistry;\n    this.contextManager = contextManager;\n    this.persistenceLayer = persistenceLayer;\n    this.langGraphWorkflow = new LangGraphWorkflow(\n      agentRegistry,\n      toolRegistry,\n      contextManager\n    );\n  }\n\n  async executeWorkflow(\n    issueId: string,\n    mode: WorkflowMode,\n    userInput: string\n  ): Promise&lt;WorkflowResult&gt; {\n    try {\n      // Load or create workflow state\n      const state = await this.loadOrCreateState(issueId, mode);\n\n      // Prepare workflow input\n      const input: WorkflowInput = {\n        issueId,\n        mode,\n        userInput,\n        state\n      };\n\n      // Execute workflow\n      const output = await this.langGraphWorkflow.executeWorkflow(input);\n\n      // Persist results\n      await this.persistenceLayer.saveWorkflowState(output.state);\n      await this.persistenceLayer.saveArtifacts(output.artifacts);\n\n      return output;\n    } catch (error) {\n      console.error('Workflow execution error:', error);\n      throw error;\n    }\n  }\n\n  private async loadOrCreateState(\n    issueId: string,\n    mode: WorkflowMode\n  ): Promise&lt;WorkflowState&gt; {\n    // State loading/creation logic\n  }\n}\n</code></pre>"},{"location":"api-reference/graph-api/#agentcoordinator-class","title":"AgentCoordinator Class","text":"<pre><code>class AgentCoordinator {\n  private agentRegistry: AgentRegistry;\n  private toolRegistry: ToolRegistry;\n  private contextManager: ContextManager;\n\n  constructor(\n    agentRegistry: AgentRegistry,\n    toolRegistry: ToolRegistry,\n    contextManager: ContextManager\n  ) {\n    this.agentRegistry = agentRegistry;\n    this.toolRegistry = toolRegistry;\n    this.contextManager = contextManager;\n  }\n\n  async coordinateWorkflow(\n    mode: WorkflowMode,\n    phase: WorkflowPhase,\n    input: string,\n    context: WorkflowContext\n  ): Promise&lt;AgentResult&gt; {\n    // Select appropriate agent\n    const agent = this.selectAgent(mode, phase);\n\n    // Prepare context\n    const enrichedContext = await this.contextManager.enrichContext(context);\n\n    // Execute agent with tools\n    const result = await agent.execute(input, enrichedContext, this.toolRegistry);\n\n    // Update workflow state\n    await this.updateWorkflowState(result);\n\n    // Determine next steps\n    const nextSteps = await this.determineNextSteps(result);\n\n    return {\n      result,\n      nextSteps,\n      updatedState: this.getCurrentState()\n    };\n  }\n\n  private selectAgent(mode: WorkflowMode, phase: WorkflowPhase): BaseAgent {\n    // Agent selection logic\n  }\n\n  private async updateWorkflowState(result: AgentResult): Promise&lt;void&gt; {\n    // Workflow state update logic\n  }\n\n  private async determineNextSteps(result: AgentResult): Promise&lt;NextSteps&gt; {\n    // Next steps determination logic\n  }\n\n  private getCurrentState(): WorkflowState {\n    // Current state retrieval logic\n  }\n}\n</code></pre>"},{"location":"api-reference/graph-api/#performance-and-monitoring-classes","title":"\ud83d\udcc8 Performance and Monitoring Classes","text":""},{"location":"api-reference/graph-api/#performancemonitor-class","title":"PerformanceMonitor Class","text":"<pre><code>class PerformanceMonitor {\n  private metrics: Map&lt;string, PerformanceMetrics&gt;;\n  private alerts: AlertManager;\n\n  constructor(alertManager: AlertManager) {\n    this.metrics = new Map();\n    this.alerts = alertManager;\n  }\n\n  async collectMetrics(workflowId: string): Promise&lt;WorkflowMetrics&gt; {\n    // Metrics collection logic\n  }\n\n  async monitorExecution(\n    workflowId: string,\n    execution: WorkflowExecution\n  ): Promise&lt;void&gt; {\n    // Execution monitoring logic\n  }\n\n  async generateReport(workflowId: string): Promise&lt;PerformanceReport&gt; {\n    // Report generation logic\n  }\n\n  async setAlert(\n    workflowId: string,\n    condition: AlertCondition,\n    callback: AlertCallback\n  ): Promise&lt;void&gt; {\n    // Alert setup logic\n  }\n}\n\ninterface PerformanceMetrics {\n  executionTime: number;\n  nodeExecutionTimes: Map&lt;string, number&gt;;\n  toolUsageCounts: Map&lt;string, number&gt;;\n  errorRates: Map&lt;string, number&gt;;\n  successRate: number;\n  resourceUsage: ResourceUsage;\n  userSatisfaction: number;\n}\n\ninterface ResourceUsage {\n  memory: number;\n  cpu: number;\n  storage: number;\n  network: number;\n}\n</code></pre>"},{"location":"api-reference/graph-api/#workflowoptimizer-class","title":"WorkflowOptimizer Class","text":"<pre><code>class WorkflowOptimizer {\n  private performanceMonitor: PerformanceMonitor;\n  private cache: NodeCache;\n  private parallelExecutor: ParallelExecutor;\n\n  constructor(\n    performanceMonitor: PerformanceMonitor,\n    cache: NodeCache,\n    parallelExecutor: ParallelExecutor\n  ) {\n    this.performanceMonitor = performanceMonitor;\n    this.cache = cache;\n    this.parallelExecutor = parallelExecutor;\n  }\n\n  async optimizeWorkflow(\n    workflow: LangGraphWorkflow,\n    metrics: WorkflowMetrics\n  ): Promise&lt;OptimizationResult&gt; {\n    // Workflow optimization logic\n  }\n\n  async optimizeNodeExecution(node: GraphNode): Promise&lt;OptimizationResult&gt; {\n    // Node execution optimization logic\n  }\n\n  async optimizeToolUsage(tool: Tool): Promise&lt;OptimizationResult&gt; {\n    // Tool usage optimization logic\n  }\n\n  async optimizeResourceUsage(\n    workflow: LangGraphWorkflow\n  ): Promise&lt;OptimizationResult&gt; {\n    // Resource usage optimization logic\n  }\n}\n\ninterface OptimizationResult {\n  optimized: boolean;\n  improvements: Improvement[];\n  metrics: PerformanceMetrics;\n  recommendations: Recommendation[];\n}\n\ninterface Improvement {\n  type: 'performance' | 'resource' | 'cost' | 'quality';\n  description: string;\n  impact: number;\n  effort: number;\n}\n\ninterface Recommendation {\n  type: 'configuration' | 'architecture' | 'tool' | 'process';\n  description: string;\n  priority: 'high' | 'medium' | 'low';\n  implementation: string;\n}\n</code></pre>"},{"location":"api-reference/graph-api/#security-classes","title":"\ud83d\udd12 Security Classes","text":""},{"location":"api-reference/graph-api/#securitymanager-class","title":"SecurityManager Class","text":"<pre><code>class SecurityManager {\n  private authentication: AuthenticationManager;\n  private authorization: AuthorizationManager;\n  private encryption: EncryptionManager;\n  private audit: AuditManager;\n\n  constructor(\n    authentication: AuthenticationManager,\n    authorization: AuthorizationManager,\n    encryption: EncryptionManager,\n    audit: AuditManager\n  ) {\n    this.authentication = authentication;\n    this.authorization = authorization;\n    this.encryption = encryption;\n    this.audit = audit;\n  }\n\n  async authenticateUser(credentials: UserCredentials): Promise&lt;AuthResult&gt; {\n    // User authentication logic\n  }\n\n  async authorizeAction(\n    userId: string,\n    action: string,\n    resource: string\n  ): Promise&lt;boolean&gt; {\n    // Action authorization logic\n  }\n\n  async encryptData(data: any): Promise&lt;EncryptedData&gt; {\n    // Data encryption logic\n  }\n\n  async decryptData(encryptedData: EncryptedData): Promise&lt;any&gt; {\n    // Data decryption logic\n  }\n\n  async logAction(action: SecurityAction): Promise&lt;void&gt; {\n    // Action logging logic\n  }\n}\n\ninterface UserCredentials {\n  username: string;\n  password: string;\n  token?: string;\n}\n\ninterface AuthResult {\n  success: boolean;\n  token?: string;\n  permissions: string[];\n  expiresAt?: Date;\n}\n\ninterface SecurityAction {\n  userId: string;\n  action: string;\n  resource: string;\n  timestamp: Date;\n  result: 'success' | 'failure';\n  details?: string;\n}\n</code></pre>"},{"location":"api-reference/graph-api/#agentsandbox-class","title":"AgentSandbox Class","text":"<pre><code>class AgentSandbox {\n  private isolation: IsolationManager;\n  private resourceLimits: ResourceLimits;\n  private monitoring: SandboxMonitor;\n\n  constructor(\n    isolation: IsolationManager,\n    resourceLimits: ResourceLimits,\n    monitoring: SandboxMonitor\n  ) {\n    this.isolation = isolation;\n    this.resourceLimits = resourceLimits;\n    this.monitoring = monitoring;\n  }\n\n  async create(): Promise&lt;SandboxEnvironment&gt; {\n    // Sandbox creation logic\n  }\n\n  async execute(\n    agent: BaseAgent,\n    input: string,\n    tools: ToolRegistry\n  ): Promise&lt;AgentResult&gt; {\n    // Sandbox execution logic\n  }\n\n  async destroy(): Promise&lt;void&gt; {\n    // Sandbox cleanup logic\n  }\n\n  async monitor(): Promise&lt;SandboxMetrics&gt; {\n    // Sandbox monitoring logic\n  }\n}\n\ninterface SandboxEnvironment {\n  id: string;\n  resources: ResourceLimits;\n  isolation: IsolationConfig;\n  monitoring: MonitoringConfig;\n}\n\ninterface ResourceLimits {\n  memory: number;\n  cpu: number;\n  storage: number;\n  network: number;\n  executionTime: number;\n}\n\ninterface IsolationConfig {\n  filesystem: boolean;\n  network: boolean;\n  process: boolean;\n  system: boolean;\n}\n</code></pre> <p>This comprehensive API reference provides detailed interfaces, classes, and methods for implementing the SPARC Graph Architecture with AI-assisted workflow orchestration, LangGraph integration, and MCP server support.</p>"},{"location":"diagrams/SPARC_GRAPH_DIAGRAM/","title":"SPARC Graph Architecture - Visual Diagrams","text":""},{"location":"diagrams/SPARC_GRAPH_DIAGRAM/#overview","title":"Overview","text":"<p>This document contains visual representations of the SPARC Graph Architecture, showing the relationships between AI agents, workflow nodes, tools, and MCP servers.</p>"},{"location":"diagrams/SPARC_GRAPH_DIAGRAM/#high-level-architecture-diagram","title":"\ud83c\udfd7\ufe0f High-Level Architecture Diagram","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                              SPARC GRAPH ARCHITECTURE                                   \u2502\n\u2502                         AI-Assisted Workflow Orchestration                              \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                                    USER INTERFACE                                       \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502\n\u2502  \u2502   VS Code       \u2502  \u2502   Webview       \u2502  \u2502   Chat          \u2502  \u2502   Issue         \u2502   \u2502\n\u2502  \u2502   Extension     \u2502  \u2502   Interface     \u2502  \u2502   Interface     \u2502  \u2502   Management    \u2502   \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                        \u2502\n                                        \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                              ORCHESTRATION LAYER                                        \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502\n\u2502  \u2502   Issue         \u2502  \u2502   SPARC         \u2502  \u2502   LangGraph     \u2502  \u2502   AI            \u2502   \u2502\n\u2502  \u2502   Manager       \u2502  \u2502   Workflow      \u2502  \u2502   State         \u2502  \u2502   Orchestrator  \u2502   \u2502\n\u2502  \u2502                 \u2502  \u2502   Engine        \u2502  \u2502   Manager       \u2502  \u2502                 \u2502   \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                        \u2502\n                                        \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                              WORKFLOW GRAPH NODES                                       \u2502\n\u2502                                                                                         \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                    \u2502\n\u2502  \u2502   DESIGN        \u2502\u2500\u2500\u2500\u25b6\u2502   BUILD         \u2502\u2500\u2500\u2500\u25b6\u2502   DEBUG         \u2502                    \u2502\n\u2502  \u2502   MODE          \u2502    \u2502   MODE          \u2502    \u2502   MODE          \u2502                    \u2502\n\u2502  \u2502                 \u2502    \u2502                 \u2502    \u2502                 \u2502                    \u2502\n\u2502  \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502    \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502    \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502                    \u2502\n\u2502  \u2502 \u2502Specification\u2502 \u2502    \u2502 \u2502Implementation\u2502 \u2502    \u2502 \u2502Analysis     \u2502 \u2502                    \u2502\n\u2502  \u2502 \u2502Phase        \u2502 \u2502    \u2502 \u2502Generation   \u2502 \u2502    \u2502 \u2502Engine       \u2502 \u2502                    \u2502\n\u2502  \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502    \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502    \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502                    \u2502\n\u2502  \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502    \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502    \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502                    \u2502\n\u2502  \u2502 \u2502Pseudocode   \u2502 \u2502    \u2502 \u2502Test         \u2502 \u2502    \u2502 \u2502Issue        \u2502 \u2502                    \u2502\n\u2502  \u2502 \u2502Phase        \u2502 \u2502    \u2502 \u2502Generation   \u2502 \u2502    \u2502 \u2502Detection    \u2502 \u2502                    \u2502\n\u2502  \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502    \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502    \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502                    \u2502\n\u2502  \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502    \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502    \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502                    \u2502\n\u2502  \u2502 \u2502Architecture \u2502 \u2502    \u2502 \u2502Code         \u2502 \u2502    \u2502 \u2502Fix          \u2502 \u2502                    \u2502\n\u2502  \u2502 \u2502Phase        \u2502 \u2502    \u2502 \u2502Generation   \u2502 \u2502    \u2502 \u2502Generation   \u2502 \u2502                    \u2502\n\u2502  \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502    \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502    \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502                    \u2502\n\u2502  \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502    \u2502                 \u2502    \u2502                 \u2502                    \u2502\n\u2502  \u2502 \u2502Refinement   \u2502 \u2502    \u2502                 \u2502    \u2502                 \u2502                    \u2502\n\u2502  \u2502 \u2502Phase        \u2502 \u2502    \u2502                 \u2502    \u2502                 \u2502                    \u2502\n\u2502  \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502    \u2502                 \u2502    \u2502                 \u2502                    \u2502\n\u2502  \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502    \u2502                 \u2502    \u2502                 \u2502                    \u2502\n\u2502  \u2502 \u2502Completion   \u2502 \u2502    \u2502                 \u2502    \u2502                 \u2502                    \u2502\n\u2502  \u2502 \u2502Phase        \u2502 \u2502    \u2502                 \u2502    \u2502                 \u2502                    \u2502\n\u2502  \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502    \u2502                 \u2502    \u2502                 \u2502                    \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                        \u2502\n                                        \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                              AI AGENT LAYER                                             \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502\n\u2502  \u2502   Design        \u2502  \u2502   Build         \u2502  \u2502   Debug         \u2502  \u2502   Orchestration \u2502   \u2502\n\u2502  \u2502   Agent         \u2502  \u2502   Agent         \u2502  \u2502   Agent         \u2502  \u2502   Agent         \u2502   \u2502\n\u2502  \u2502                 \u2502  \u2502                 \u2502  \u2502                 \u2502  \u2502                 \u2502   \u2502\n\u2502  \u2502 \u2022 Requirements  \u2502  \u2502 \u2022 Code          \u2502  \u2502 \u2022 Issue         \u2502  \u2502 \u2022 Workflow      \u2502   \u2502\n\u2502  \u2502   Analysis      \u2502  \u2502   Generation    \u2502  \u2502   Analysis      \u2502  \u2502   Coordination  \u2502   \u2502\n\u2502  \u2502 \u2022 Architecture  \u2502  \u2502 \u2022 Test          \u2502  \u2502 \u2022 Fix           \u2502  \u2502 \u2022 State         \u2502   \u2502\n\u2502  \u2502   Design        \u2502  \u2502   Creation      \u2502  \u2502   Generation    \u2502  \u2502   Management    \u2502   \u2502\n\u2502  \u2502 \u2022 Specification \u2502  \u2502 \u2022 Documentation \u2502  \u2502 \u2022 Optimization  \u2502  \u2502 \u2022 Decision      \u2502   \u2502\n\u2502  \u2502   Generation    \u2502  \u2502   Generation    \u2502  \u2502 \u2022 Performance   \u2502  \u2502   Making        \u2502   \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                        \u2502\n                                        \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                              TOOL INTEGRATION LAYER                                     \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502\n\u2502  \u2502   Built-in      \u2502  \u2502   MCP           \u2502  \u2502   External      \u2502  \u2502   Custom        \u2502   \u2502\n\u2502  \u2502   Tools         \u2502  \u2502   Servers       \u2502  \u2502   APIs          \u2502  \u2502   Tools         \u2502   \u2502\n\u2502  \u2502                 \u2502  \u2502                 \u2502  \u2502                 \u2502  \u2502                 \u2502   \u2502\n\u2502  \u2502 \u2022 File System   \u2502  \u2502 \u2022 GitHub        \u2502  \u2502 \u2022 Web Search    \u2502  \u2502 \u2022 Project       \u2502   \u2502\n\u2502  \u2502 \u2022 Terminal      \u2502  \u2502 \u2022 Database      \u2502  \u2502 \u2022 Documentation \u2502  \u2502   Specific      \u2502   \u2502\n\u2502  \u2502 \u2022 Git           \u2502  \u2502 \u2022 Vector Store  \u2502  \u2502 \u2022 Code Analysis \u2502  \u2502 \u2022 Domain        \u2502   \u2502\n\u2502  \u2502 \u2022 Code Analysis \u2502  \u2502 \u2022 Embedding     \u2502  \u2502 \u2022 Testing       \u2502  \u2502   Specific      \u2502   \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                        \u2502\n                                        \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                              PERSISTENCE LAYER                                          \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502\n\u2502  \u2502   State         \u2502  \u2502   Artifacts     \u2502  \u2502   Memory        \u2502  \u2502   Vector        \u2502   \u2502\n\u2502  \u2502   Storage       \u2502  \u2502   Storage       \u2502  \u2502   Storage       \u2502  \u2502   Storage       \u2502   \u2502\n\u2502  \u2502                 \u2502  \u2502                 \u2502  \u2502                 \u2502  \u2502                 \u2502   \u2502\n\u2502  \u2502 \u2022 Workflow      \u2502  \u2502 \u2022 Requirements  \u2502  \u2502 \u2022 Chat History  \u2502  \u2502 \u2022 Embeddings    \u2502   \u2502\n\u2502  \u2502   State         \u2502  \u2502 \u2022 Architecture  \u2502  \u2502 \u2022 Context       \u2502  \u2502 \u2022 Similarity    \u2502   \u2502\n\u2502  \u2502 \u2022 Progress      \u2502  \u2502 \u2022 Code          \u2502  \u2502 \u2022 Decisions     \u2502  \u2502   Search        \u2502   \u2502\n\u2502  \u2502 \u2022 Transitions   \u2502  \u2502 \u2022 Tests         \u2502  \u2502 \u2022 Iterations    \u2502  \u2502 \u2022 Knowledge     \u2502   \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"diagrams/SPARC_GRAPH_DIAGRAM/#workflow-graph-structure","title":"\ud83d\udd04 Workflow Graph Structure","text":""},{"location":"diagrams/SPARC_GRAPH_DIAGRAM/#node-relationships","title":"Node Relationships","text":"<pre><code>                    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                    \u2502                    WORKFLOW GRAPH                       \u2502\n                    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   USER INPUT    \u2502\u2500\u2500\u2500\u25b6\u2502   ISSUE         \u2502\u2500\u2500\u2500\u25b6\u2502   MODE          \u2502\u2500\u2500\u2500\u25b6\u2502   PHASE         \u2502\n\u2502                 \u2502    \u2502   CREATION      \u2502    \u2502   SELECTION     \u2502    \u2502   EXECUTION     \u2502\n\u2502 \u2022 Requirements  \u2502    \u2502                 \u2502    \u2502                 \u2502    \u2502                 \u2502\n\u2502 \u2022 Description   \u2502    \u2502 \u2022 Title         \u2502    \u2502 \u2022 Design        \u2502    \u2502 \u2022 Specification \u2502\n\u2502 \u2022 Context       \u2502    \u2502 \u2022 Description   \u2502    \u2502 \u2022 Build         \u2502    \u2502 \u2022 Pseudocode    \u2502\n\u2502 \u2022 Constraints   \u2502    \u2502 \u2022 Priority      \u2502    \u2502 \u2022 Debug         \u2502    \u2502 \u2022 Architecture  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                \u2502                       \u2502                       \u2502\n                                \u25bc                       \u25bc                       \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   AI AGENT      \u2502\u25c0\u2500\u2500\u2500\u2502   AGENT         \u2502\u25c0\u2500\u2500\u2500\u2502   AGENT         \u2502\u25c0\u2500\u2500\u2500\u2502   AGENT         \u2502\n\u2502   SELECTION     \u2502    \u2502   COORDINATION  \u2502    \u2502   EXECUTION     \u2502    \u2502   TOOL          \u2502\n\u2502                 \u2502    \u2502                 \u2502    \u2502                 \u2502    \u2502   INVOCATION    \u2502\n\u2502 \u2022 Design Agent  \u2502    \u2502 \u2022 Orchestrator  \u2502    \u2502 \u2022 Design Agent  \u2502    \u2502                 \u2502\n\u2502 \u2022 Build Agent   \u2502    \u2502 \u2022 Context       \u2502    \u2502 \u2022 Build Agent   \u2502    \u2502 \u2022 File System   \u2502\n\u2502 \u2022 Debug Agent   \u2502    \u2502 \u2022 State Mgmt    \u2502    \u2502 \u2022 Debug Agent   \u2502    \u2502 \u2022 Terminal      \u2502\n\u2502 \u2022 Orchestrator  \u2502    \u2502 \u2022 Decision      \u2502    \u2502 \u2022 Tool Access   \u2502    \u2502 \u2022 MCP Servers   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                \u2502                       \u2502                       \u2502\n                                \u25bc                       \u25bc                       \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   TOOL          \u2502    \u2502   TOOL          \u2502    \u2502   TOOL          \u2502    \u2502   ARTIFACT      \u2502\n\u2502   REGISTRY      \u2502    \u2502   EXECUTION     \u2502    \u2502   RESULT        \u2502    \u2502   GENERATION    \u2502\n\u2502                 \u2502    \u2502                 \u2502    \u2502                 \u2502    \u2502                 \u2502\n\u2502 \u2022 Built-in      \u2502    \u2502 \u2022 File Ops      \u2502    \u2502 \u2022 Success       \u2502    \u2502 \u2022 Requirements  \u2502\n\u2502 \u2022 MCP Servers   \u2502    \u2502 \u2022 Terminal      \u2502    \u2502 \u2022 Error         \u2502    \u2502 \u2022 Code          \u2502\n\u2502 \u2022 External APIs \u2502    \u2502 \u2022 Git Ops       \u2502    \u2502 \u2022 Partial       \u2502    \u2502 \u2022 Tests         \u2502\n\u2502 \u2022 Custom Tools  \u2502    \u2502 \u2022 Code Analysis \u2502    \u2502 \u2022 Retry         \u2502    \u2502 \u2022 Documentation \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                \u2502                       \u2502                       \u2502\n                                \u25bc                       \u25bc                       \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   STATE         \u2502    \u2502   CONTEXT       \u2502    \u2502   MEMORY        \u2502    \u2502   PERSISTENCE   \u2502\n\u2502   UPDATE        \u2502    \u2502   UPDATE        \u2502    \u2502   UPDATE        \u2502    \u2502   LAYER         \u2502\n\u2502                 \u2502    \u2502                 \u2502    \u2502                 \u2502    \u2502                 \u2502\n\u2502 \u2022 Progress      \u2502    \u2502 \u2022 Artifacts     \u2502    \u2502 \u2022 Chat History  \u2502    \u2502 \u2022 .nys/         \u2502\n\u2502 \u2022 Phase         \u2502    \u2502 \u2022 Decisions     \u2502    \u2502 \u2022 Context       \u2502    \u2502 \u2022 State Files   \u2502\n\u2502 \u2022 Transitions   \u2502    \u2502 \u2022 Tool Results  \u2502    \u2502 \u2022 Iterations    \u2502    \u2502 \u2022 Artifacts     \u2502\n\u2502 \u2022 Errors        \u2502    \u2502 \u2022 User Feedback \u2502    \u2502 \u2022 Learning      \u2502    \u2502 \u2022 Memory        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"diagrams/SPARC_GRAPH_DIAGRAM/#ai-agent-interaction-flow","title":"\ud83e\udd16 AI Agent Interaction Flow","text":""},{"location":"diagrams/SPARC_GRAPH_DIAGRAM/#agent-communication-pattern","title":"Agent Communication Pattern","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                              AI AGENT INTERACTION FLOW                                  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   ORCHESTRATION \u2502    \u2502   DESIGN        \u2502    \u2502   BUILD         \u2502    \u2502   DEBUG         \u2502\n\u2502   AGENT         \u2502    \u2502   AGENT         \u2502    \u2502   AGENT         \u2502    \u2502   AGENT         \u2502\n\u2502                 \u2502    \u2502                 \u2502    \u2502                 \u2502    \u2502                 \u2502\n\u2502 \u2022 Workflow      \u2502    \u2502 \u2022 Requirements  \u2502    \u2502 \u2022 Code          \u2502    \u2502 \u2022 Issue         \u2502\n\u2502   Coordination  \u2502    \u2502   Analysis      \u2502    \u2502   Generation    \u2502    \u2502   Analysis      \u2502\n\u2502 \u2022 State         \u2502    \u2502 \u2022 Architecture  \u2502    \u2502 \u2022 Test          \u2502    \u2502 \u2022 Fix           \u2502\n\u2502   Management    \u2502    \u2502   Design        \u2502    \u2502   Creation      \u2502    \u2502   Generation    \u2502\n\u2502 \u2022 Decision      \u2502    \u2502 \u2022 Specification \u2502    \u2502 \u2022 Documentation \u2502    \u2502 \u2022 Optimization  \u2502\n\u2502   Making        \u2502    \u2502   Generation    \u2502    \u2502   Generation    \u2502    \u2502 \u2022 Performance   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n         \u2502                       \u2502                       \u2502                       \u2502\n         \u2502                       \u2502                       \u2502                       \u2502\n         \u25bc                       \u25bc                       \u25bc                       \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   CONTEXT       \u2502    \u2502   TOOL          \u2502    \u2502   TOOL          \u2502    \u2502   TOOL          \u2502\n\u2502   MANAGER       \u2502    \u2502   REGISTRY      \u2502    \u2502   REGISTRY      \u2502    \u2502   REGISTRY      \u2502\n\u2502                 \u2502    \u2502                 \u2502    \u2502                 \u2502    \u2502                 \u2502\n\u2502 \u2022 Shared        \u2502    \u2502 \u2022 Requirements  \u2502    \u2502 \u2022 Code          \u2502    \u2502 \u2022 Code          \u2502\n\u2502   Context       \u2502    \u2502   Analyzer      \u2502    \u2502   Generator     \u2502    \u2502   Analyzer      \u2502\n\u2502 \u2022 State         \u2502    \u2502 \u2022 Architecture  \u2502    \u2502 \u2022 Test          \u2502    \u2502 \u2022 Issue         \u2502\n\u2502   Synchronization\u2502   \u2502   Designer      \u2502    \u2502   Creator       \u2502    \u2502   Detector      \u2502\n\u2502 \u2022 Memory        \u2502    \u2502 \u2022 Specification \u2502    \u2502 \u2022 Documentation \u2502    \u2502 \u2022 Fix           \u2502\n\u2502   Management    \u2502    \u2502   Generator     \u2502    \u2502   Generator     \u2502    \u2502   Generator     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n         \u2502                       \u2502                       \u2502                       \u2502\n         \u2502                       \u2502                       \u2502                       \u2502\n         \u25bc                       \u25bc                       \u25bc                       \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   TOOL          \u2502    \u2502   MCP           \u2502    \u2502   MCP           \u2502    \u2502   MCP           \u2502\n\u2502   EXECUTION     \u2502    \u2502   SERVERS       \u2502    \u2502   SERVERS       \u2502    \u2502   SERVERS       \u2502\n\u2502                 \u2502    \u2502                 \u2502    \u2502                 \u2502    \u2502                 \u2502\n\u2502 \u2022 File System   \u2502    \u2502 \u2022 GitHub        \u2502    \u2502 \u2022 Database      \u2502    \u2502 \u2022 Vector Store  \u2502\n\u2502 \u2022 Terminal      \u2502    \u2502 \u2022 Repository    \u2502    \u2502 \u2022 Query Engine  \u2502    \u2502 \u2022 Embedding     \u2502\n\u2502 \u2022 Git           \u2502    \u2502 \u2022 Issue         \u2502    \u2502 \u2022 Schema        \u2502    \u2502 \u2022 Similarity    \u2502\n\u2502 \u2022 Code Analysis \u2502    \u2502   Tracking      \u2502    \u2502   Management    \u2502    \u2502   Search        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"diagrams/SPARC_GRAPH_DIAGRAM/#tool-integration-architecture","title":"\ud83d\udd27 Tool Integration Architecture","text":""},{"location":"diagrams/SPARC_GRAPH_DIAGRAM/#tool-categories-and-relationships","title":"Tool Categories and Relationships","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                              TOOL INTEGRATION ARCHITECTURE                              \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   BUILT-IN      \u2502    \u2502   MCP           \u2502    \u2502   EXTERNAL      \u2502    \u2502   CUSTOM        \u2502\n\u2502   TOOLS         \u2502    \u2502   SERVERS       \u2502    \u2502   APIs          \u2502    \u2502   TOOLS         \u2502\n\u2502                 \u2502    \u2502                 \u2502    \u2502                 \u2502    \u2502                 \u2502\n\u2502 \u2022 File System   \u2502    \u2502 \u2022 GitHub        \u2502    \u2502 \u2022 Web Search    \u2502    \u2502 \u2022 Project       \u2502\n\u2502   Operations    \u2502    \u2502   Integration   \u2502    \u2502   APIs          \u2502    \u2502   Specific      \u2502\n\u2502 \u2022 Terminal      \u2502    \u2502 \u2022 Database      \u2502    \u2502 \u2022 Documentation \u2502    \u2502   Tools         \u2502\n\u2502   Execution     \u2502    \u2502   Operations    \u2502    \u2502   Services      \u2502    \u2502 \u2022 Domain        \u2502\n\u2502 \u2022 Git           \u2502    \u2502 \u2022 Vector Store  \u2502    \u2502 \u2022 Code Analysis \u2502    \u2502   Specific      \u2502\n\u2502   Operations    \u2502    \u2502   Operations    \u2502    \u2502   Services      \u2502    \u2502   Tools         \u2502\n\u2502 \u2022 Code Analysis \u2502    \u2502 \u2022 Embedding     \u2502    \u2502 \u2022 Testing       \u2502    \u2502 \u2022 Integration   \u2502\n\u2502   Tools         \u2502    \u2502   Services      \u2502    \u2502   Services      \u2502    \u2502   Tools         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n         \u2502                       \u2502                       \u2502                       \u2502\n         \u2502                       \u2502                       \u2502                       \u2502\n         \u25bc                       \u25bc                       \u25bc                       \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   TOOL          \u2502    \u2502   TOOL          \u2502    \u2502   TOOL          \u2502    \u2502   TOOL          \u2502\n\u2502   REGISTRY      \u2502    \u2502   REGISTRY      \u2502    \u2502   REGISTRY      \u2502    \u2502   REGISTRY      \u2502\n\u2502                 \u2502    \u2502                 \u2502    \u2502                 \u2502    \u2502                 \u2502\n\u2502 \u2022 Registration  \u2502    \u2502 \u2022 MCP Protocol  \u2502    \u2502 \u2022 API           \u2502    \u2502 \u2022 Custom        \u2502\n\u2502 \u2022 Discovery     \u2502    \u2502   Handling      \u2502    \u2502   Integration   \u2502    \u2502   Protocol      \u2502\n\u2502 \u2022 Permission    \u2502    \u2502 \u2022 Server        \u2502    \u2502 \u2022 Authentication\u2502    \u2502   Handling      \u2502\n\u2502   Management    \u2502    \u2502   Management    \u2502    \u2502 \u2022 Rate Limiting \u2502    \u2502 \u2022 Plugin        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n         \u2502                       \u2502                       \u2502                       \u2502\n         \u2502                       \u2502                       \u2502                       \u2502\n         \u25bc                       \u25bc                       \u25bc                       \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                              UNIFIED TOOL INTERFACE                                     \u2502\n\u2502                                                                                         \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502\n\u2502  \u2502   TOOL          \u2502  \u2502   TOOL          \u2502  \u2502   TOOL          \u2502  \u2502   TOOL          \u2502   \u2502\n\u2502  \u2502   EXECUTION     \u2502  \u2502   RESULT        \u2502  \u2502   ERROR         \u2502  \u2502   LOGGING       \u2502   \u2502\n\u2502  \u2502   ENGINE        \u2502  \u2502   PROCESSING    \u2502  \u2502   HANDLING      \u2502  \u2502   SYSTEM        \u2502   \u2502\n\u2502  \u2502                 \u2502  \u2502                 \u2502  \u2502                 \u2502  \u2502                 \u2502   \u2502\n\u2502  \u2502 \u2022 Execution     \u2502  \u2502 \u2022 Result        \u2502  \u2502 \u2022 Error         \u2502  \u2502 \u2022 Usage         \u2502   \u2502\n\u2502  \u2502   Orchestration \u2502  \u2502   Validation    \u2502  \u2502   Classification\u2502  \u2502   Tracking      \u2502   \u2502\n\u2502  \u2502 \u2022 Parameter     \u2502  \u2502 \u2022 Result        \u2502  \u2502 \u2022 Error         \u2502  \u2502 \u2022 Performance   \u2502   \u2502\n\u2502  \u2502   Validation    \u2502  \u2502   Transformation\u2502  \u2502   Recovery      \u2502  \u2502   Metrics       \u2502   \u2502\n\u2502  \u2502 \u2022 Timeout       \u2502  \u2502 \u2022 Result        \u2502  \u2502 \u2022 Error         \u2502  \u2502 \u2022 Audit         \u2502   \u2502\n\u2502  \u2502   Management    \u2502  \u2502   Caching       \u2502  \u2502   Reporting     \u2502  \u2502   Trail         \u2502   \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"diagrams/SPARC_GRAPH_DIAGRAM/#langgraph-state-flow","title":"\ud83d\udcca LangGraph State Flow","text":""},{"location":"diagrams/SPARC_GRAPH_DIAGRAM/#state-management-diagram","title":"State Management Diagram","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                              LANGGRAPH STATE FLOW                                       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   INITIAL       \u2502    \u2502   WORKFLOW      \u2502    \u2502   NODE          \u2502    \u2502   TRANSITION    \u2502\n\u2502   STATE         \u2502    \u2502   EXECUTION     \u2502    \u2502   EXECUTION     \u2502    \u2502   MANAGEMENT    \u2502\n\u2502                 \u2502    \u2502                 \u2502    \u2502                 \u2502    \u2502                 \u2502\n\u2502 \u2022 Issue ID      \u2502    \u2502 \u2022 State         \u2502    \u2502 \u2022 Agent         \u2502    \u2502 \u2022 Condition     \u2502\n\u2502 \u2022 Mode          \u2502    \u2502   Loading       \u2502    \u2502   Selection     \u2502    \u2502   Evaluation    \u2502\n\u2502 \u2022 Phase         \u2502    \u2502 \u2022 Context       \u2502    \u2502 \u2022 Tool          \u2502    \u2502 \u2022 Next Node     \u2502\n\u2502 \u2022 Progress      \u2502    \u2502   Preparation   \u2502    \u2502   Invocation    \u2502    \u2502   Selection     \u2502\n\u2502 \u2022 Artifacts     \u2502    \u2502 \u2022 Memory        \u2502    \u2502 \u2022 Result        \u2502    \u2502 \u2022 State         \u2502\n\u2502                 \u2502    \u2502   Retrieval     \u2502    \u2502   Processing    \u2502    \u2502   Update        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n         \u2502                       \u2502                       \u2502                       \u2502\n         \u2502                       \u2502                       \u2502                       \u2502\n         \u25bc                       \u25bc                       \u25bc                       \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   STATE         \u2502    \u2502   CONTEXT       \u2502    \u2502   MEMORY        \u2502    \u2502   PERSISTENCE   \u2502\n\u2502   VALIDATION    \u2502    \u2502   ENRICHMENT    \u2502    \u2502   UPDATE        \u2502    \u2502   LAYER         \u2502\n\u2502                 \u2502    \u2502                 \u2502    \u2502                 \u2502    \u2502                 \u2502\n\u2502 \u2022 Schema        \u2502    \u2502 \u2022 Artifact      \u2502    \u2502 \u2022 Chat History  \u2502    \u2502 \u2022 State         \u2502\n\u2502   Validation    \u2502    \u2502   Context       \u2502    \u2502 \u2022 Decision      \u2502    \u2502   Serialization \u2502\n\u2502 \u2022 State         \u2502    \u2502 \u2022 Tool Result   \u2502    \u2502   History       \u2502    \u2502 \u2022 Artifact      \u2502\n\u2502   Consistency   \u2502    \u2502   Context       \u2502    \u2502 \u2022 Learning      \u2502    \u2502   Storage       \u2502\n\u2502 \u2022 Transition    \u2502    \u2502 \u2022 User          \u2502    \u2502   Data          \u2502    \u2502 \u2022 Memory        \u2502\n\u2502   Validation    \u2502    \u2502   Context       \u2502    \u2502 \u2022 Context       \u2502    \u2502   Persistence   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n         \u2502                       \u2502                       \u2502                       \u2502\n         \u2502                       \u2502                       \u2502                       \u2502\n         \u25bc                       \u25bc                       \u25bc                       \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   STATE         \u2502    \u2502   STATE         \u2502    \u2502   STATE         \u2502    \u2502   STATE         \u2502\n\u2502   COMPRESSION   \u2502    \u2502   OPTIMIZATION  \u2502    \u2502   MONITORING    \u2502    \u2502   RECOVERY      \u2502\n\u2502                 \u2502    \u2502                 \u2502    \u2502                 \u2502    \u2502                 \u2502\n\u2502 \u2022 State         \u2502    \u2502 \u2022 Performance   \u2502    \u2502 \u2022 Execution     \u2502    \u2502 \u2022 Error         \u2502\n\u2502   Compression   \u2502    \u2502   Optimization  \u2502    \u2502   Metrics       \u2502    \u2502   Recovery      \u2502\n\u2502 \u2022 Memory        \u2502    \u2502 \u2022 Resource      \u2502    \u2502 \u2022 State         \u2502    \u2502 \u2022 State         \u2502\n\u2502   Optimization  \u2502    \u2502   Optimization  \u2502    \u2502   Validation    \u2502    \u2502   Restoration   \u2502\n\u2502 \u2022 Storage       \u2502    \u2502 \u2022 Caching       \u2502    \u2502 \u2022 Performance   \u2502    \u2502 \u2022 Rollback      \u2502\n\u2502   Optimization  \u2502    \u2502   Strategy      \u2502    \u2502   Monitoring    \u2502    \u2502   Mechanisms    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"diagrams/SPARC_GRAPH_DIAGRAM/#workflow-execution-flow","title":"\ud83d\udd04 Workflow Execution Flow","text":""},{"location":"diagrams/SPARC_GRAPH_DIAGRAM/#complete-execution-pipeline","title":"Complete Execution Pipeline","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                              WORKFLOW EXECUTION PIPELINE                                \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   USER INPUT    \u2502    \u2502   INPUT         \u2502    \u2502   MODE          \u2502    \u2502   PHASE         \u2502\n\u2502   RECEPTION     \u2502    \u2502   PROCESSING    \u2502    \u2502   DETERMINATION \u2502    \u2502   SELECTION     \u2502\n\u2502                 \u2502    \u2502                 \u2502    \u2502                 \u2502    \u2502                 \u2502\n\u2502 \u2022 Message       \u2502    \u2502 \u2022 Parsing       \u2502    \u2502 \u2022 Intent        \u2502    \u2502 \u2022 Current       \u2502\n\u2502   Reception     \u2502    \u2502 \u2022 Validation    \u2502    \u2502   Analysis      \u2502    \u2502   Phase         \u2502\n\u2502 \u2022 Context       \u2502    \u2502 \u2022 Context       \u2502    \u2502 \u2022 Mode          \u2502    \u2502   Identification\u2502\n\u2502   Extraction    \u2502    \u2502   Extraction    \u2502    \u2502   Selection     \u2502    \u2502 \u2022 Next Phase    \u2502\n\u2502 \u2022 Intent        \u2502    \u2502 \u2022 Intent        \u2502    \u2502 \u2022 Workflow      \u2502    \u2502   Determination \u2502\n\u2502   Recognition   \u2502    \u2502   Recognition   \u2502    \u2502   Routing       \u2502    \u2502 \u2022 Phase         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n         \u2502                       \u2502                       \u2502                       \u2502\n         \u2502                       \u2502                       \u2502                       \u2502\n         \u25bc                       \u25bc                       \u25bc                       \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   AGENT         \u2502    \u2502   AGENT         \u2502    \u2502   TOOL          \u2502    \u2502   TOOL          \u2502\n\u2502   SELECTION     \u2502    \u2502   EXECUTION     \u2502    \u2502   INVOCATION    \u2502    \u2502   EXECUTION     \u2502\n\u2502                 \u2502    \u2502                 \u2502    \u2502                 \u2502    \u2502                 \u2502\n\u2502 \u2022 Agent Type    \u2502    \u2502 \u2022 Agent         \u2502    \u2502 \u2022 Tool          \u2502    \u2502 \u2022 Tool          \u2502\n\u2502   Selection     \u2502    \u2502   Initialization\u2502    \u2502   Selection     \u2502    \u2502   Execution     \u2502\n\u2502 \u2022 Agent         \u2502    \u2502 \u2022 Context       \u2502    \u2502 \u2022 Parameter     \u2502    \u2502 \u2022 Result        \u2502\n\u2502   Configuration \u2502    \u2502   Preparation   \u2502    \u2502   Preparation   \u2502    \u2502   Processing    \u2502\n\u2502 \u2022 Agent         \u2502    \u2502 \u2022 Tool          \u2502    \u2502 \u2022 Tool          \u2502    \u2502 \u2022 Error         \u2502\n\u2502   Initialization\u2502    \u2502   Registration  \u2502    \u2502   Invocation    \u2502    \u2502   Handling      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n         \u2502                       \u2502                       \u2502                       \u2502\n         \u2502                       \u2502                       \u2502                       \u2502\n         \u25bc                       \u25bc                       \u25bc                       \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   RESULT        \u2502    \u2502   STATE         \u2502    \u2502   CONTEXT       \u2502    \u2502   PERSISTENCE   \u2502\n\u2502   PROCESSING    \u2502    \u2502   UPDATE        \u2502    \u2502   UPDATE        \u2502    \u2502   LAYER         \u2502\n\u2502                 \u2502    \u2502                 \u2502    \u2502                 \u2502    \u2502                 \u2502\n\u2502 \u2022 Result        \u2502    \u2502 \u2022 Progress      \u2502    \u2502 \u2022 Artifact      \u2502    \u2502 \u2022 State         \u2502\n\u2502   Validation    \u2502    \u2502   Update        \u2502    \u2502   Update        \u2502    \u2502   Persistence   \u2502\n\u2502 \u2022 Result        \u2502    \u2502 \u2022 Phase         \u2502    \u2502 \u2022 Context       \u2502    \u2502 \u2022 Artifact      \u2502\n\u2502   Transformation\u2502    \u2502   Update        \u2502    \u2502   Update        \u2502    \u2502   Persistence   \u2502\n\u2502 \u2022 Result        \u2502    \u2502 \u2022 Transition    \u2502    \u2502 \u2022 Memory        \u2502    \u2502 \u2022 Memory        \u2502\n\u2502   Integration   \u2502    \u2502   Management    \u2502    \u2502   Update        \u2502    \u2502   Persistence   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n         \u2502                       \u2502                       \u2502                       \u2502\n         \u2502                       \u2502                       \u2502                       \u2502\n         \u25bc                       \u25bc                       \u25bc                       \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   OUTPUT        \u2502    \u2502   FEEDBACK      \u2502    \u2502   LEARNING      \u2502    \u2502   MONITORING    \u2502\n\u2502   GENERATION    \u2502    \u2502   GENERATION    \u2502    \u2502   INTEGRATION   \u2502    \u2502   SYSTEM        \u2502\n\u2502                 \u2502    \u2502                 \u2502    \u2502                 \u2502    \u2502                 \u2502\n\u2502 \u2022 Response      \u2502    \u2502 \u2022 User          \u2502    \u2502 \u2022 Experience    \u2502    \u2502 \u2022 Performance   \u2502\n\u2502   Generation    \u2502    \u2502   Feedback      \u2502    \u2502   Learning      \u2502    \u2502   Monitoring    \u2502\n\u2502 \u2022 Artifact      \u2502    \u2502 \u2022 System        \u2502    \u2502 \u2022 Pattern       \u2502    \u2502 \u2022 Error         \u2502\n\u2502   Generation    \u2502    \u2502   Feedback      \u2502    \u2502   Recognition   \u2502    \u2502   Monitoring    \u2502\n\u2502 \u2022 Next Steps    \u2502    \u2502 \u2022 Improvement   \u2502    \u2502 \u2022 Model         \u2502    \u2502 \u2022 Resource      \u2502\n\u2502   Generation    \u2502    \u2502   Suggestions   \u2502    \u2502   Updates       \u2502    \u2502   Monitoring    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"diagrams/SPARC_GRAPH_DIAGRAM/#security-and-privacy-architecture","title":"\ud83d\udd12 Security and Privacy Architecture","text":""},{"location":"diagrams/SPARC_GRAPH_DIAGRAM/#security-layer-diagram","title":"Security Layer Diagram","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                              SECURITY AND PRIVACY ARCHITECTURE                          \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   AUTHENTICATION\u2502    \u2502   AUTHORIZATION \u2502    \u2502   ENCRYPTION    \u2502    \u2502   AUDIT         \u2502\n\u2502   LAYER         \u2502    \u2502   LAYER         \u2502    \u2502   LAYER         \u2502    \u2502   LAYER         \u2502\n\u2502                 \u2502    \u2502                 \u2502    \u2502                 \u2502    \u2502                 \u2502\n\u2502 \u2022 User          \u2502    \u2502 \u2022 Role-Based    \u2502    \u2502 \u2022 Data          \u2502    \u2502 \u2022 Action        \u2502\n\u2502   Authentication\u2502    \u2502   Access        \u2502    \u2502   Encryption    \u2502    \u2502   Logging       \u2502\n\u2502 \u2022 API Key       \u2502    \u2502   Control       \u2502    \u2502 \u2022 Communication \u2502    \u2502 \u2022 Access        \u2502\n\u2502   Management    \u2502    \u2502 \u2022 Permission    \u2502    \u2502   Encryption    \u2502    \u2502   Logging       \u2502\n\u2502 \u2022 Token         \u2502    \u2502   Management    \u2502    \u2502 \u2022 Storage       \u2502    \u2502 \u2022 Error         \u2502\n\u2502   Management    \u2502    \u2502 \u2022 Resource      \u2502    \u2502   Encryption    \u2502    \u2502   Logging       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n         \u2502                       \u2502                       \u2502                       \u2502\n         \u2502                       \u2502                       \u2502                       \u2502\n         \u25bc                       \u25bc                       \u25bc                       \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   AGENT         \u2502    \u2502   TOOL          \u2502    \u2502   DATA          \u2502    \u2502   COMPLIANCE    \u2502\n\u2502   ISOLATION     \u2502    \u2502   SANDBOXING    \u2502    \u2502   PROTECTION    \u2502    \u2502   LAYER         \u2502\n\u2502                 \u2502    \u2502                 \u2502    \u2502                 \u2502    \u2502                 \u2502\n\u2502 \u2022 Sandbox       \u2502    \u2502 \u2022 Tool          \u2502    \u2502 \u2022 Data          \u2502    \u2502 \u2022 GDPR          \u2502\n\u2502   Environment   \u2502    \u2502   Isolation     \u2502    \u2502   Anonymization \u2502    \u2502   Compliance    \u2502\n\u2502 \u2022 Resource      \u2502    \u2502 \u2022 Resource      \u2502    \u2502 \u2022 Data          \u2502    \u2502 \u2022 CCPA          \u2502\n\u2502   Limits        \u2502    \u2502   Limits        \u2502    \u2502   Masking       \u2502    \u2502   Compliance    \u2502\n\u2502 \u2022 Execution     \u2502    \u2502 \u2022 Execution     \u2502    \u2502 \u2022 Data          \u2502    \u2502 \u2022 SOC2          \u2502\n\u2502   Monitoring    \u2502    \u2502   Monitoring    \u2502    \u2502   Retention     \u2502    \u2502   Compliance    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"diagrams/SPARC_GRAPH_DIAGRAM/#performance-and-scalability","title":"\ud83d\udcc8 Performance and Scalability","text":""},{"location":"diagrams/SPARC_GRAPH_DIAGRAM/#performance-optimization-diagram","title":"Performance Optimization Diagram","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                              PERFORMANCE AND SCALABILITY                                \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   CACHING       \u2502    \u2502   LOAD          \u2502    \u2502   RESOURCE      \u2502    \u2502   MONITORING    \u2502\n\u2502   LAYER         \u2502    \u2502   BALANCING     \u2502    \u2502   OPTIMIZATION  \u2502    \u2502   LAYER         \u2502\n\u2502                 \u2502    \u2502                 \u2502    \u2502                 \u2502    \u2502                 \u2502\n\u2502 \u2022 Node          \u2502    \u2502 \u2022 Agent         \u2502    \u2502 \u2022 Memory        \u2502    \u2502 \u2022 Performance   \u2502\n\u2502   Caching       \u2502    \u2502   Load          \u2502    \u2502   Management    \u2502    \u2502   Metrics       \u2502\n\u2502 \u2022 Result        \u2502    \u2502   Balancing     \u2502    \u2502 \u2022 CPU           \u2502    \u2502 \u2022 Resource      \u2502\n\u2502   Caching       \u2502    \u2502 \u2022 Tool          \u2502    \u2502   Management    \u2502    \u2502   Usage         \u2502\n\u2502 \u2022 State         \u2502    \u2502   Load          \u2502    \u2502 \u2022 Storage       \u2502    \u2502 \u2022 Error         \u2502\n\u2502   Caching       \u2502    \u2502   Balancing     \u2502    \u2502   Optimization  \u2502    \u2502   Rates         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n         \u2502                       \u2502                       \u2502                       \u2502\n         \u2502                       \u2502                       \u2502                       \u2502\n         \u25bc                       \u25bc                       \u25bc                       \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   PARALLEL      \u2502    \u2502   ASYNC         \u2502    \u2502   STREAMING     \u2502    \u2502   OPTIMIZATION  \u2502\n\u2502   EXECUTION     \u2502    \u2502   PROCESSING    \u2502    \u2502   PROCESSING    \u2502    \u2502   ENGINE        \u2502\n\u2502                 \u2502    \u2502                 \u2502    \u2502                 \u2502    \u2502                 \u2502\n\u2502 \u2022 Multi-Node    \u2502    \u2502 \u2022 Async         \u2502    \u2502 \u2022 Real-time     \u2502    \u2502 \u2022 Auto-tuning   \u2502\n\u2502   Execution     \u2502    \u2502   Operations    \u2502    \u2502   Streaming     \u2502    \u2502 \u2022 Performance   \u2502\n\u2502 \u2022 Concurrent    \u2502    \u2502 \u2022 Event-Driven  \u2502    \u2502 \u2022 Progressive   \u2502    \u2502   Optimization  \u2502\n\u2502   Processing    \u2502    \u2502   Architecture  \u2502    \u2502   Loading       \u2502    \u2502 \u2022 Resource      \u2502\n\u2502 \u2022 Distributed   \u2502    \u2502 \u2022 Non-blocking  \u2502    \u2502 \u2022 Incremental   \u2502    \u2502   Optimization  \u2502\n\u2502   Computing     \u2502    \u2502   Operations    \u2502    \u2502   Updates       \u2502    \u2502 \u2022 Cost          \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>These diagrams provide a comprehensive visual representation of the SPARC Graph Architecture, showing how AI agents, workflow nodes, tools, and MCP servers interact to create a sophisticated orchestration system for issue-driven development.</p>"},{"location":"diagrams/SPARC_WORKFLOW_DIAGRAM/","title":"SPARC Workflow Engine - Visual Diagrams","text":""},{"location":"diagrams/SPARC_WORKFLOW_DIAGRAM/#complete-sparc-workflow-overview","title":"Complete SPARC Workflow Overview","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                                SPARC WORKFLOW ENGINE                                    \u2502\n\u2502                           (Specification \u2192 Pseudocode \u2192 Architecture \u2192 Refinement \u2192 Completion) \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                                    USER INPUT                                           \u2502\n\u2502                              \"Create a user authentication system\"                      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                        \u2502\n                                        \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                                 MODE SELECTION                                          \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                                \u2502\n\u2502  \u2502   DESIGN    \u2502    \u2502    BUILD    \u2502    \u2502    DEBUG    \u2502                                \u2502\n\u2502  \u2502    MODE     \u2502    \u2502    MODE     \u2502    \u2502    MODE     \u2502                                \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                                \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                        \u2502\n                                        \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                              DESIGN MODE PROCESSING                                     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                        \u2502\n                                        \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                              PHASE PROGRESSION (0% \u2192 100%)                             \u2502\n\u2502                                                                                         \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2502  \u2502SPECIFICATION\u2502\u2500\u2500\u2500\u25b6\u2502 PSEUDOCODE  \u2502\u2500\u2500\u2500\u25b6\u2502ARCHITECTURE \u2502\u2500\u2500\u2500\u25b6\u2502 REFINEMENT  \u2502\u2500\u2500\u2500\u25b6\u2502COMPLETION\u2502 \u2502\n\u2502  \u2502   (0-25%)   \u2502    \u2502  (25-50%)   \u2502    \u2502  (50-75%)   \u2502    \u2502  (75-100%)  \u2502    \u2502  (100%)  \u2502 \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                        \u2502\n                                        \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                              ARTIFACT GENERATION                                        \u2502\n\u2502                                                                                         \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510              \u2502\n\u2502  \u2502requirements \u2502    \u2502 pseudocode  \u2502    \u2502architecture \u2502    \u2502guidelines   \u2502              \u2502\n\u2502  \u2502    .md      \u2502    \u2502    .md      \u2502    \u2502    .md      \u2502    \u2502    .md      \u2502              \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518              \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                        \u2502\n                                        \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                              BUILD MODE PROCESSING                                      \u2502\n\u2502                              (Requires Design Complete)                                 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                        \u2502\n                                        \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                              IMPLEMENTATION GENERATION                                  \u2502\n\u2502                                                                                         \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                                                    \u2502\n\u2502  \u2502implementation\u2502    \u2502   tests     \u2502                                                    \u2502\n\u2502  \u2502    .md      \u2502    \u2502    .md      \u2502                                                    \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                                                    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                        \u2502\n                                        \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                              DEBUG MODE PROCESSING                                      \u2502\n\u2502                              (Can work with any artifacts)                              \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                        \u2502\n                                        \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                              DEBUG ANALYSIS &amp; NOTES                                     \u2502\n\u2502                                                                                         \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                                                                        \u2502\n\u2502  \u2502   notes     \u2502                                                                        \u2502\n\u2502  \u2502    .md      \u2502                                                                        \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                                                                        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                        \u2502\n                                        \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                              FILE SYSTEM STORAGE                                        \u2502\n\u2502                                                                                         \u2502\n\u2502  .nys/                                                                                  \u2502\n\u2502  \u251c\u2500\u2500 issue-1234567890/                                                                  \u2502\n\u2502  \u2502   \u251c\u2500\u2500 requirements.md                                                                \u2502\n\u2502  \u2502   \u251c\u2500\u2500 guidelines.md                                                                  \u2502\n\u2502  \u2502   \u251c\u2500\u2500 pseudocode.md                                                                  \u2502\n\u2502  \u2502   \u251c\u2500\u2500 architecture.md                                                                \u2502\n\u2502  \u2502   \u251c\u2500\u2500 implementation.md                                                              \u2502\n\u2502  \u2502   \u251c\u2500\u2500 tests.md                                                                       \u2502\n\u2502  \u2502   \u2514\u2500\u2500 notes.md                                                                       \u2502\n\u2502  \u251c\u2500\u2500 issue-1234567890-workflow.json                                                     \u2502\n\u2502  \u2514\u2500\u2500 ...                                                                                \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"diagrams/SPARC_WORKFLOW_DIAGRAM/#detailed-phase-breakdown","title":"Detailed Phase Breakdown","text":""},{"location":"diagrams/SPARC_WORKFLOW_DIAGRAM/#design-mode-phase-progression","title":"Design Mode - Phase Progression","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                              DESIGN MODE PHASES                                         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  PHASE 1: SPECIFICATION (0% \u2192 25%)                                                     \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502\n\u2502  \u2502 Input: \"Create a user authentication system\"                                    \u2502   \u2502\n\u2502  \u2502                                                                                 \u2502   \u2502\n\u2502  \u2502 Process:                                                                        \u2502   \u2502\n\u2502  \u2502 \u2022 Extract core functionality requirements                                       \u2502   \u2502\n\u2502  \u2502 \u2022 Identify technical constraints                                                \u2502   \u2502\n\u2502  \u2502 \u2022 Define performance requirements                                               \u2502   \u2502\n\u2502  \u2502 \u2022 Map integration points                                                        \u2502   \u2502\n\u2502  \u2502                                                                                 \u2502   \u2502\n\u2502  \u2502 Output: requirements.md                                                         \u2502   \u2502\n\u2502  \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502   \u2502\n\u2502  \u2502 \u2502 # Requirements Specification                                            \u2502   \u2502   \u2502\n\u2502  \u2502 \u2502 ## User Input                                                           \u2502   \u2502   \u2502\n\u2502  \u2502 \u2502 Create a user authentication system                                     \u2502   \u2502   \u2502\n\u2502  \u2502 \u2502 ## Extracted Requirements                                               \u2502   \u2502   \u2502\n\u2502  \u2502 \u2502 - Core functionality: User login/logout                                 \u2502   \u2502   \u2502\n\u2502  \u2502 \u2502 - Technical constraints: JWT tokens                                     \u2502   \u2502   \u2502\n\u2502  \u2502 \u2502 - Performance: &lt; 200ms response time                                    \u2502   \u2502   \u2502\n\u2502  \u2502 \u2502 - Integration: REST API endpoints                                       \u2502   \u2502   \u2502\n\u2502  \u2502 \u2502 ## Acceptance Criteria                                                  \u2502   \u2502   \u2502\n\u2502  \u2502 \u2502 - [ ] User can register with email/password                             \u2502   \u2502   \u2502\n\u2502  \u2502 \u2502 - [ ] User can login and receive JWT token                              \u2502   \u2502   \u2502\n\u2502  \u2502 \u2502 - [ ] User can logout and invalidate token                              \u2502   \u2502   \u2502\n\u2502  \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502   \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                        \u2502\n                                        \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  PHASE 2: PSEUDOCODE (25% \u2192 50%)                                                       \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502\n\u2502  \u2502 Input: \"Add JWT token support\" + requirements.md                               \u2502   \u2502\n\u2502  \u2502                                                                                 \u2502   \u2502\n\u2502  \u2502 Process:                                                                        \u2502   \u2502\n\u2502  \u2502 \u2022 Analyze requirements for algorithmic structure                               \u2502   \u2502\n\u2502  \u2502 \u2022 Design high-level algorithm flow                                             \u2502   \u2502\n\u2502  \u2502 \u2022 Define key functions and data structures                                     \u2502   \u2502\n\u2502  \u2502                                                                                 \u2502   \u2502\n\u2502  \u2502 Output: pseudocode.md                                                           \u2502   \u2502\n\u2502  \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502   \u2502\n\u2502  \u2502 \u2502 # Pseudocode                                                            \u2502   \u2502   \u2502\n\u2502  \u2502 \u2502 ## Algorithm Overview                                                   \u2502   \u2502   \u2502\n\u2502  \u2502 \u2502 ```                                                                     \u2502   \u2502   \u2502\n\u2502  \u2502 \u2502 BEGIN                                                                   \u2502   \u2502   \u2502\n\u2502  \u2502 \u2502   INITIALIZE auth service                                               \u2502   \u2502   \u2502\n\u2502  \u2502 \u2502   FOR each login request DO                                             \u2502   \u2502   \u2502\n\u2502  \u2502 \u2502     VALIDATE credentials                                                \u2502   \u2502   \u2502\n\u2502  \u2502 \u2502     IF valid THEN                                                       \u2502   \u2502   \u2502\n\u2502  \u2502 \u2502       GENERATE JWT token                                                \u2502   \u2502   \u2502\n\u2502  \u2502 \u2502       RETURN token                                                      \u2502   \u2502   \u2502\n\u2502  \u2502 \u2502     ELSE                                                                \u2502   \u2502   \u2502\n\u2502  \u2502 \u2502       RETURN error                                                      \u2502   \u2502   \u2502\n\u2502  \u2502 \u2502     END IF                                                              \u2502   \u2502   \u2502\n\u2502  \u2502 \u2502   END FOR                                                               \u2502   \u2502   \u2502\n\u2502  \u2502 \u2502 END                                                                     \u2502   \u2502   \u2502\n\u2502  \u2502 \u2502 ```                                                                     \u2502   \u2502   \u2502\n\u2502  \u2502 \u2502 ## Key Functions                                                        \u2502   \u2502   \u2502\n\u2502  \u2502 \u2502 - validateCredentials(): Credential validation                         \u2502   \u2502   \u2502\n\u2502  \u2502 \u2502 - generateJWT(): Token generation                                      \u2502   \u2502   \u2502\n\u2502  \u2502 \u2502 - hashPassword(): Password hashing                                     \u2502   \u2502   \u2502\n\u2502  \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502   \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                        \u2502\n                                        \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  PHASE 3: ARCHITECTURE (50% \u2192 75%)                                                     \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502\n\u2502  \u2502 Input: \"Include password hashing with bcrypt\" + all previous artifacts          \u2502   \u2502\n\u2502  \u2502                                                                                 \u2502   \u2502\n\u2502  \u2502 Process:                                                                        \u2502   \u2502\n\u2502  \u2502 \u2022 Design system components and layers                                          \u2502   \u2502\n\u2502  \u2502 \u2022 Define component interactions                                                 \u2502   \u2502\n\u2502  \u2502 \u2022 Specify dependencies and interfaces                                          \u2502   \u2502\n\u2502  \u2502 \u2022 Create development guidelines                                                \u2502   \u2502\n\u2502  \u2502                                                                                 \u2502   \u2502\n\u2502  \u2502 Output: architecture.md + guidelines.md                                        \u2502   \u2502\n\u2502  \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502   \u2502\n\u2502  \u2502 \u2502 # System Architecture                                                   \u2502   \u2502   \u2502\n\u2502  \u2502 \u2502 ## Components                                                            \u2502   \u2502   \u2502\n\u2502  \u2502 \u2502 - AuthController: Handle HTTP requests                                   \u2502   \u2502   \u2502\n\u2502  \u2502 \u2502 - AuthService: Business logic                                            \u2502   \u2502   \u2502\n\u2502  \u2502 \u2502 - UserRepository: Data access                                            \u2502   \u2502   \u2502\n\u2502  \u2502 \u2502 - JWTService: Token management                                           \u2502   \u2502   \u2502\n\u2502  \u2502 \u2502 - PasswordService: Password hashing                                      \u2502   \u2502   \u2502\n\u2502  \u2502 \u2502 ## Data Flow                                                             \u2502   \u2502   \u2502\n\u2502  \u2502 \u2502 1. Request \u2192 AuthController                                              \u2502   \u2502   \u2502\n\u2502  \u2502 \u2502 2. AuthController \u2192 AuthService                                          \u2502   \u2502   \u2502\n\u2502  \u2502 \u2502 3. AuthService \u2192 UserRepository                                          \u2502   \u2502   \u2502\n\u2502  \u2502 \u2502 4. AuthService \u2192 PasswordService                                         \u2502   \u2502   \u2502\n\u2502  \u2502 \u2502 5. AuthService \u2192 JWTService                                              \u2502   \u2502   \u2502\n\u2502  \u2502 \u2502 6. Response \u2190 AuthController                                             \u2502   \u2502   \u2502\n\u2502  \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502   \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                        \u2502\n                                        \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  PHASE 4: REFINEMENT (75% \u2192 100%)                                                      \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502\n\u2502  \u2502 Input: \"Finalize requirements\" + requirements.md                               \u2502   \u2502\n\u2502  \u2502                                                                                 \u2502   \u2502\n\u2502  \u2502 Process:                                                                        \u2502   \u2502\n\u2502  \u2502 \u2022 Refine requirements based on architecture                                    \u2502   \u2502\n\u2502  \u2502 \u2022 Add missing details and clarifications                                       \u2502   \u2502\n\u2502  \u2502 \u2022 Finalize acceptance criteria                                                 \u2502   \u2502\n\u2502  \u2502                                                                                 \u2502   \u2502\n\u2502  \u2502 Output: Updated requirements.md                                                \u2502   \u2502\n\u2502  \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502   \u2502\n\u2502  \u2502 \u2502 # Requirements Specification                                            \u2502   \u2502   \u2502\n\u2502  \u2502 \u2502 [Previous content...]                                                   \u2502   \u2502   \u2502\n\u2502  \u2502 \u2502                                                                         \u2502   \u2502   \u2502\n\u2502  \u2502 \u2502 ## Refinements                                                          \u2502   \u2502   \u2502\n\u2502  \u2502 \u2502 [2024-01-15T10:30:00Z] Finalize requirements                            \u2502   \u2502   \u2502\n\u2502  \u2502 \u2502                                                                         \u2502   \u2502   \u2502\n\u2502  \u2502 \u2502 Additional requirements:                                                \u2502   \u2502   \u2502\n\u2502  \u2502 \u2502 - Password must be hashed using bcrypt with salt rounds 12              \u2502   \u2502   \u2502\n\u2502  \u2502 \u2502 - JWT tokens must expire after 24 hours                                 \u2502   \u2502   \u2502\n\u2502  \u2502 \u2502 - API must support refresh token mechanism                               \u2502   \u2502   \u2502\n\u2502  \u2502 \u2502                                                                         \u2502   \u2502   \u2502\n\u2502  \u2502 \u2502 *Refined based on user feedback*                                        \u2502   \u2502   \u2502\n\u2502  \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502   \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                        \u2502\n                                        \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  PHASE 5: COMPLETION (100%)                                                             \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502\n\u2502  \u2502 Status: Design phase complete                                                   \u2502   \u2502\n\u2502  \u2502 Ready for Build mode                                                            \u2502   \u2502\n\u2502  \u2502                                                                                 \u2502   \u2502\n\u2502  \u2502 Generated Artifacts:                                                            \u2502   \u2502\n\u2502  \u2502 \u2705 requirements.md                                                              \u2502   \u2502\n\u2502  \u2502 \u2705 pseudocode.md                                                                \u2502   \u2502\n\u2502  \u2502 \u2705 architecture.md                                                              \u2502   \u2502\n\u2502  \u2502 \u2705 guidelines.md                                                                \u2502   \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"diagrams/SPARC_WORKFLOW_DIAGRAM/#build-mode-processing","title":"Build Mode Processing","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                              BUILD MODE PROCESSING                                      \u2502\n\u2502                              (Requires Design Complete)                                 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  PREREQUISITE CHECK                                                                    \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502\n\u2502  \u2502 if (currentPhase !== 'completion') {                                           \u2502   \u2502\n\u2502  \u2502   // Add note about incomplete design                                           \u2502   \u2502\n\u2502  \u2502   state.artifacts.notes += \"Build requested but design incomplete\"             \u2502   \u2502\n\u2502  \u2502   return                                                                       \u2502   \u2502\n\u2502  \u2502 }                                                                              \u2502   \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                        \u2502\n                                        \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  IMPLEMENTATION GENERATION                                                              \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502\n\u2502  \u2502 Input: \"Generate Express.js authentication middleware\" + all design artifacts  \u2502   \u2502\n\u2502  \u2502                                                                                 \u2502   \u2502\n\u2502  \u2502 Process:                                                                        \u2502   \u2502\n\u2502  \u2502 \u2022 Generate source code based on architecture                                   \u2502   \u2502\n\u2502  \u2502 \u2022 Create configuration files                                                   \u2502   \u2502\n\u2502  \u2502 \u2022 Generate test suites                                                         \u2502   \u2502\n\u2502  \u2502                                                                                 \u2502   \u2502\n\u2502  \u2502 Output: implementation.md + tests.md                                           \u2502   \u2502\n\u2502  \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502   \u2502\n\u2502  \u2502 \u2502 # Implementation                                                        \u2502   \u2502   \u2502\n\u2502  \u2502 \u2502 ## Generated Code Structure                                             \u2502   \u2502   \u2502\n\u2502  \u2502 \u2502 ```typescript                                                           \u2502   \u2502   \u2502\n\u2502  \u2502 \u2502 // auth.controller.ts                                                   \u2502   \u2502   \u2502\n\u2502  \u2502 \u2502 export class AuthController {                                           \u2502   \u2502   \u2502\n\u2502  \u2502 \u2502   constructor(private authService: AuthService) {}                      \u2502   \u2502   \u2502\n\u2502  \u2502 \u2502                                                                         \u2502   \u2502   \u2502\n\u2502  \u2502 \u2502   async login(req: Request, res: Response) {                           \u2502   \u2502   \u2502\n\u2502  \u2502 \u2502     const { email, password } = req.body;                              \u2502   \u2502   \u2502\n\u2502  \u2502 \u2502     const result = await this.authService.login(email, password);      \u2502   \u2502   \u2502\n\u2502  \u2502 \u2502     res.json(result);                                                  \u2502   \u2502   \u2502\n\u2502  \u2502 \u2502   }                                                                    \u2502   \u2502   \u2502\n\u2502  \u2502 \u2502 }                                                                      \u2502   \u2502   \u2502\n\u2502  \u2502 \u2502 ```                                                                     \u2502   \u2502   \u2502\n\u2502  \u2502 \u2502 ## Configuration Files                                                  \u2502   \u2502   \u2502\n\u2502  \u2502 \u2502 - package.json: Dependencies                                            \u2502   \u2502   \u2502\n\u2502  \u2502 \u2502 - .env: Environment variables                                           \u2502   \u2502   \u2502\n\u2502  \u2502 \u2502 - tsconfig.json: TypeScript configuration                               \u2502   \u2502   \u2502\n\u2502  \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502   \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"diagrams/SPARC_WORKFLOW_DIAGRAM/#debug-mode-processing","title":"Debug Mode Processing","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                              DEBUG MODE PROCESSING                                      \u2502\n\u2502                              (Can work with any artifacts)                              \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  DEBUG ANALYSIS                                                                         \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502\n\u2502  \u2502 Input: \"Fix JWT token expiration issue\" + any existing artifacts               \u2502   \u2502\n\u2502  \u2502                                                                                 \u2502   \u2502\n\u2502  \u2502 Process:                                                                        \u2502   \u2502\n\u2502  \u2502 \u2022 Analyze existing code for issues                                             \u2502   \u2502\n\u2502  \u2502 \u2022 Identify performance bottlenecks                                             \u2502   \u2502\n\u2502  \u2502 \u2022 Check for security vulnerabilities                                           \u2502   \u2502\n\u2502  \u2502 \u2022 Provide recommendations                                                      \u2502   \u2502\n\u2502  \u2502                                                                                 \u2502   \u2502\n\u2502  \u2502 Output: Updated notes.md                                                       \u2502   \u2502\n\u2502  \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502   \u2502\n\u2502  \u2502 \u2502 # Debug Notes                                                           \u2502   \u2502   \u2502\n\u2502  \u2502 \u2502 [Previous notes...]                                                     \u2502   \u2502   \u2502\n\u2502  \u2502 \u2502                                                                         \u2502   \u2502   \u2502\n\u2502  \u2502 \u2502 [2024-01-15T11:00:00Z] Debug Analysis:                                  \u2502   \u2502   \u2502\n\u2502  \u2502 \u2502 ## Debug Analysis                                                        \u2502   \u2502   \u2502\n\u2502  \u2502 \u2502 **Issue**: Fix JWT token expiration issue                               \u2502   \u2502   \u2502\n\u2502  \u2502 \u2502                                                                         \u2502   \u2502   \u2502\n\u2502  \u2502 \u2502 **Analysis**:                                                           \u2502   \u2502   \u2502\n\u2502  \u2502 \u2502 - Code quality: JWT expiration not properly handled                     \u2502   \u2502   \u2502\n\u2502  \u2502 \u2502 - Performance: Token validation happens on every request               \u2502   \u2502   \u2502\n\u2502  \u2502 \u2502 - Error handling: No graceful handling of expired tokens               \u2502   \u2502   \u2502\n\u2502  \u2502 \u2502 - Security: Tokens don't have proper expiration validation             \u2502   \u2502   \u2502\n\u2502  \u2502 \u2502                                                                         \u2502   \u2502   \u2502\n\u2502  \u2502 \u2502 **Recommendations**:                                                    \u2502   \u2502   \u2502\n\u2502  \u2502 \u2502 - Add token expiration check in middleware                              \u2502   \u2502   \u2502\n\u2502  \u2502 \u2502 - Implement refresh token mechanism                                     \u2502   \u2502   \u2502\n\u2502  \u2502 \u2502 - Add proper error responses for expired tokens                         \u2502   \u2502   \u2502\n\u2502  \u2502 \u2502 - Update JWT service to handle expiration gracefully                    \u2502   \u2502   \u2502\n\u2502  \u2502 \u2502                                                                         \u2502   \u2502   \u2502\n\u2502  \u2502 \u2502 **Status**: Ready for fixes                                             \u2502   \u2502   \u2502\n\u2502  \u2502 \u2502 *Generated by SPARC Workflow Engine - Debug Phase*                     \u2502   \u2502   \u2502\n\u2502  \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502   \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"diagrams/SPARC_WORKFLOW_DIAGRAM/#state-management-flow","title":"State Management Flow","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                              STATE MANAGEMENT FLOW                                      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  WORKFLOW STATE STRUCTURE                                                               \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502\n\u2502  \u2502 {                                                                               \u2502   \u2502\n\u2502  \u2502   \"issueId\": \"issue-1234567890\",                                               \u2502   \u2502\n\u2502  \u2502   \"currentPhase\": \"completion\",                                                 \u2502   \u2502\n\u2502  \u2502   \"mode\": \"design\",                                                             \u2502   \u2502\n\u2502  \u2502   \"progress\": 100,                                                              \u2502   \u2502\n\u2502  \u2502   \"artifacts\": {                                                                \u2502   \u2502\n\u2502  \u2502     \"requirements\": \"# Requirements Specification...\",                          \u2502   \u2502\n\u2502  \u2502     \"pseudocode\": \"# Pseudocode...\",                                            \u2502   \u2502\n\u2502  \u2502     \"architecture\": \"# System Architecture...\",                                 \u2502   \u2502\n\u2502  \u2502     \"guidelines\": \"# Development Guidelines...\",                                \u2502   \u2502\n\u2502  \u2502     \"implementation\": \"# Implementation...\",                                    \u2502   \u2502\n\u2502  \u2502     \"tests\": \"# Test Suite...\",                                                 \u2502   \u2502\n\u2502  \u2502     \"notes\": \"# Debug Notes...\"                                                 \u2502   \u2502\n\u2502  \u2502   },                                                                            \u2502   \u2502\n\u2502  \u2502   \"createdAt\": \"2024-01-15T09:00:00Z\",                                         \u2502   \u2502\n\u2502  \u2502   \"updatedAt\": \"2024-01-15T11:30:00Z\"                                          \u2502   \u2502\n\u2502  \u2502 }                                                                               \u2502   \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                        \u2502\n                                        \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  DUAL PERSISTENCE MODEL                                                                 \u2502\n\u2502                                                                                         \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u2502\n\u2502  \u2502        JSON STATE FILE          \u2502    \u2502         MARKDOWN ARTIFACTS              \u2502     \u2502\n\u2502  \u2502                                 \u2502    \u2502                                         \u2502     \u2502\n\u2502  \u2502 issue-1234567890-workflow.json  \u2502    \u2502 .nys/issue-1234567890/                 \u2502     \u2502\n\u2502  \u2502                                 \u2502    \u2502 \u251c\u2500\u2500 requirements.md                     \u2502     \u2502\n\u2502  \u2502 \u2022 Complete workflow state       \u2502    \u2502 \u251c\u2500\u2500 guidelines.md                       \u2502     \u2502\n\u2502  \u2502 \u2022 Metadata and progress         \u2502    \u2502 \u251c\u2500\u2500 pseudocode.md                       \u2502     \u2502\n\u2502  \u2502 \u2022 Artifact references           \u2502    \u2502 \u251c\u2500\u2500 architecture.md                     \u2502     \u2502\n\u2502  \u2502 \u2022 Timestamps                    \u2502    \u2502 \u251c\u2500\u2500 implementation.md                   \u2502     \u2502\n\u2502  \u2502                                 \u2502    \u2502 \u251c\u2500\u2500 tests.md                            \u2502     \u2502\n\u2502  \u2502 Machine-readable                \u2502    \u2502 \u2514\u2500\u2500 notes.md                            \u2502     \u2502\n\u2502  \u2502 Fast loading                    \u2502    \u2502                                         \u2502     \u2502\n\u2502  \u2502 State management                \u2502    \u2502 Human-readable                           \u2502     \u2502\n\u2502  \u2502                                 \u2502    \u2502 Version control friendly                \u2502     \u2502\n\u2502  \u2502                                 \u2502    \u2502 Direct editing capability               \u2502     \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"diagrams/SPARC_WORKFLOW_DIAGRAM/#integration-points","title":"Integration Points","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                              INTEGRATION POINTS                                        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  VS CODE EXTENSION INTEGRATION                                                         \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502\n\u2502  \u2502 IssueViewProvider                                                               \u2502   \u2502\n\u2502  \u2502 \u251c\u2500\u2500 SPARCWorkflowEngine integration                                            \u2502   \u2502\n\u2502  \u2502 \u251c\u2500\u2500 Webview communication                                                      \u2502   \u2502\n\u2502  \u2502 \u251c\u2500\u2500 Command handling                                                           \u2502   \u2502\n\u2502  \u2502 \u2514\u2500\u2500 State synchronization                                                      \u2502   \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                        \u2502\n                                        \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  WEBVIEW INTERFACE                                                                      \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502\n\u2502  \u2502 User Interface Components                                                       \u2502   \u2502\n\u2502  \u2502 \u251c\u2500\u2500 Issue creation and management                                               \u2502   \u2502\n\u2502  \u2502 \u251c\u2500\u2500 Mode switching (Design/Build/Debug)                                        \u2502   \u2502\n\u2502  \u2502 \u251c\u2500\u2500 Chat interface with mode-aware responses                                   \u2502   \u2502\n\u2502  \u2502 \u251c\u2500\u2500 Progress tracking and visual indicators                                    \u2502   \u2502\n\u2502  \u2502 \u2514\u2500\u2500 Artifact display and navigation                                            \u2502   \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                        \u2502\n                                        \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  FILE SYSTEM INTEGRATION                                                               \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502\n\u2502  \u2502 .nys/ Directory Structure                                                       \u2502   \u2502\n\u2502  \u2502 \u251c\u2500\u2500 Issue-specific folders                                                      \u2502   \u2502\n\u2502  \u2502 \u251c\u2500\u2500 Workflow state files                                                        \u2502   \u2502\n\u2502  \u2502 \u251c\u2500\u2500 Artifact markdown files                                                     \u2502   \u2502\n\u2502  \u2502 \u2514\u2500\u2500 Version control integration                                                 \u2502   \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>This comprehensive visual documentation illustrates the complete SPARC Workflow Engine architecture, showing how user input flows through the system, how different modes process information, and how artifacts are generated and stored. The diagrams provide both high-level overview and detailed phase-by-phase breakdowns to help understand the complete workflow process.</p>"},{"location":"examples/basic-usage/","title":"Basic Usage Examples","text":"<p>Learn how to use the SPARC Workflow Engine with practical examples.</p>"},{"location":"examples/basic-usage/#getting-started-example","title":"\ud83d\ude80 Getting Started Example","text":""},{"location":"examples/basic-usage/#simple-authentication-system","title":"Simple Authentication System","text":"<p>Let's create a complete user authentication system using the SPARC workflow.</p>"},{"location":"examples/basic-usage/#step-1-create-and-initialize","title":"Step 1: Create and Initialize","text":"<pre><code>// Initialize the SPARC Workflow Engine\nconst engine = new SPARCWorkflowEngine(workspaceRoot);\n\n// Create a new issue\nconst issueId = 'auth-system-001';\n</code></pre>"},{"location":"examples/basic-usage/#step-2-design-phase-specification","title":"Step 2: Design Phase - Specification","text":"<pre><code>// Start with specification phase\nlet state = await engine.processIssue(\n  issueId, \n  'design', \n  'Create a user authentication system with secure login, registration, and JWT token management'\n);\n\nconsole.log(`Phase: ${state.currentPhase}`); // \"pseudocode\"\nconsole.log(`Progress: ${state.progress}%`); // 25%\nconsole.log(`Artifacts: ${Object.keys(state.artifacts)}`); // [\"requirements\"]\n</code></pre> <p>Generated requirements.md:</p> <pre><code># Requirements Specification\n\n## User Input\nCreate a user authentication system with secure login, registration, and JWT token management\n\n## Extracted Requirements\n- Core functionality: User registration, login, logout, JWT token management\n- Technical constraints: Secure password hashing, token expiration\n- Performance requirements: &lt; 200ms response time for authentication\n- Integration points: REST API endpoints, database integration\n\n## Acceptance Criteria\n- [ ] User can register with email and password\n- [ ] User can login and receive JWT token\n- [ ] User can logout and invalidate token\n- [ ] Password is securely hashed\n- [ ] JWT tokens have proper expiration\n</code></pre>"},{"location":"examples/basic-usage/#step-3-design-phase-pseudocode","title":"Step 3: Design Phase - Pseudocode","text":"<pre><code>// Continue to pseudocode phase\nstate = await engine.processIssue(\n  issueId, \n  'design', \n  'Add password hashing with bcrypt and JWT token generation'\n);\n\nconsole.log(`Phase: ${state.currentPhase}`); // \"architecture\"\nconsole.log(`Progress: ${state.progress}%`); // 50%\nconsole.log(`Artifacts: ${Object.keys(state.artifacts)}`); // [\"requirements\", \"pseudocode\"]\n</code></pre> <p>Generated pseudocode.md:</p> <pre><code># Pseudocode\n\n## Algorithm Overview\nBased on requirements analysis, here's the high-level algorithm:\n\n</code></pre> <p>BEGIN   INITIALIZE auth service with bcrypt and JWT   FOR each authentication request DO     IF request type = \"register\" THEN       VALIDATE email and password       HASH password with bcrypt       STORE user in database       GENERATE JWT token       RETURN success with token     ELSE IF request type = \"login\" THEN       VALIDATE credentials       IF credentials valid THEN         GENERATE JWT token         RETURN success with token       ELSE         RETURN authentication error       END IF     ELSE IF request type = \"logout\" THEN       INVALIDATE JWT token       RETURN success     END IF   END FOR END</p> <pre><code>\n## Key Functions\n- validateCredentials(): Credential validation\n- hashPassword(): Password hashing with bcrypt\n- generateJWT(): JWT token generation\n- invalidateToken(): Token invalidation\n</code></pre>"},{"location":"examples/basic-usage/#step-4-design-phase-architecture","title":"Step 4: Design Phase - Architecture","text":"<pre><code>// Continue to architecture phase\nstate = await engine.processIssue(\n  issueId, \n  'design', \n  'Design Express.js API with TypeScript, PostgreSQL database, and Redis for session management'\n);\n\nconsole.log(`Phase: ${state.currentPhase}`); // \"refinement\"\nconsole.log(`Progress: ${state.progress}%`); // 75%\nconsole.log(`Artifacts: ${Object.keys(state.artifacts)}`); // [\"requirements\", \"pseudocode\", \"architecture\", \"guidelines\"]\n</code></pre> <p>Generated architecture.md:</p> <pre><code># System Architecture\n\n## Overview\nHigh-level system design for user authentication with Express.js, TypeScript, PostgreSQL, and Redis.\n\n## Components\n- **AuthController**: Handle HTTP requests for authentication\n- **AuthService**: Business logic for authentication\n- **UserRepository**: Data access layer for user operations\n- **JWTService**: JWT token management\n- **PasswordService**: Password hashing and validation\n- **RedisService**: Session and token storage\n\n## Dependencies\n- Framework: Express.js with TypeScript\n- Database: PostgreSQL for user data\n- Cache: Redis for session management\n- Security: bcrypt for password hashing, jsonwebtoken for JWT\n\n## Data Flow\n1. Request \u2192 AuthController\n2. AuthController \u2192 AuthService\n3. AuthService \u2192 UserRepository (database operations)\n4. AuthService \u2192 PasswordService (password validation)\n5. AuthService \u2192 JWTService (token generation)\n6. AuthService \u2192 RedisService (session storage)\n7. Response \u2190 AuthController\n</code></pre>"},{"location":"examples/basic-usage/#step-5-design-phase-refinement","title":"Step 5: Design Phase - Refinement","text":"<pre><code>// Finalize the design\nstate = await engine.processIssue(\n  issueId, \n  'design', \n  'Add rate limiting, input validation, and comprehensive error handling'\n);\n\nconsole.log(`Phase: ${state.currentPhase}`); // \"completion\"\nconsole.log(`Progress: ${state.progress}%`); // 100%\nconsole.log(`Design Complete: ${state.currentPhase === 'completion'}`); // true\n</code></pre>"},{"location":"examples/basic-usage/#step-6-build-phase-implementation","title":"Step 6: Build Phase - Implementation","text":"<pre><code>// Switch to build mode\nstate = await engine.processIssue(\n  issueId, \n  'build', \n  'Generate complete Express.js implementation with TypeScript, including all controllers, services, and configuration files'\n);\n\nconsole.log(`Build Complete: ${state.artifacts.implementation ? 'Yes' : 'No'}`);\nconsole.log(`Tests Generated: ${state.artifacts.tests ? 'Yes' : 'No'}`);\n</code></pre> <p>Generated implementation.md:</p> <pre><code># Implementation\n\n## Generated Code Structure\nBased on the design artifacts, here's the implementation:\n\n```typescript\n// auth.controller.ts\nimport { Request, Response } from 'express';\nimport { AuthService } from '../services/auth.service';\n\nexport class AuthController {\n  constructor(private authService: AuthService) {}\n\n  async register(req: Request, res: Response) {\n    try {\n      const { email, password } = req.body;\n      const result = await this.authService.register(email, password);\n      res.status(201).json(result);\n    } catch (error) {\n      res.status(400).json({ error: error.message });\n    }\n  }\n\n  async login(req: Request, res: Response) {\n    try {\n      const { email, password } = req.body;\n      const result = await this.authService.login(email, password);\n      res.json(result);\n    } catch (error) {\n      res.status(401).json({ error: error.message });\n    }\n  }\n\n  async logout(req: Request, res: Response) {\n    try {\n      const token = req.headers.authorization?.split(' ')[1];\n      await this.authService.logout(token);\n      res.json({ message: 'Logged out successfully' });\n    } catch (error) {\n      res.status(400).json({ error: error.message });\n    }\n  }\n}\n</code></pre>"},{"location":"examples/basic-usage/#configuration-files","title":"Configuration Files","text":"<ul> <li>package.json: Dependencies and scripts</li> <li>tsconfig.json: TypeScript configuration</li> <li>.env: Environment variables</li> <li>docker-compose.yml: Development environment</li> </ul> <pre><code>\n#### Step 7: Debug Phase - Analysis\n\n```typescript\n// Switch to debug mode\nstate = await engine.processIssue(\n  issueId, \n  'debug', \n  'Analyze the authentication system for security vulnerabilities and performance issues'\n);\n\nconsole.log(`Debug Analysis: ${state.artifacts.notes ? 'Completed' : 'Not completed'}`);\n</code></pre> <p>Generated notes.md:</p> <pre><code># Debug Notes\n\n[2024-01-15T10:30:00Z] Debug Analysis:\n## Debug Analysis\n\n**Issue**: Analyze the authentication system for security vulnerabilities and performance issues\n\n**Analysis**:\n- Code quality: Good separation of concerns, proper error handling\n- Performance: Database queries could be optimized with indexing\n- Error handling: Comprehensive error responses implemented\n- Security: JWT implementation looks secure, password hashing with bcrypt\n\n**Recommendations**:\n- Add rate limiting middleware to prevent brute force attacks\n- Implement input validation middleware\n- Add database indexes for email and user_id fields\n- Consider adding refresh token mechanism\n- Add comprehensive logging for security events\n\n**Status**: Ready for fixes\n*Generated by SPARC Workflow Engine - Debug Phase*\n</code></pre>"},{"location":"examples/basic-usage/#complete-workflow-example","title":"\ud83d\udd04 Complete Workflow Example","text":""},{"location":"examples/basic-usage/#e-commerce-api-development","title":"E-commerce API Development","text":"<p>Here's a complete example of developing an e-commerce API:</p> <pre><code>async function developEcommerceAPI() {\n  const engine = new SPARCWorkflowEngine(workspaceRoot);\n  const issueId = 'ecommerce-api-001';\n\n  // Design Phase\n  console.log('=== DESIGN PHASE ===');\n\n  // Specification\n  let state = await engine.processIssue(\n    issueId, \n    'design', \n    'Create a REST API for an e-commerce platform with user management, product catalog, shopping cart, and order processing'\n  );\n  console.log(`Specification complete: ${state.progress}%`);\n\n  // Pseudocode\n  state = await engine.processIssue(\n    issueId, \n    'design', \n    'Include payment processing with Stripe, inventory management, and order tracking'\n  );\n  console.log(`Pseudocode complete: ${state.progress}%`);\n\n  // Architecture\n  state = await engine.processIssue(\n    issueId, \n    'design', \n    'Use Node.js with Express, TypeScript, PostgreSQL, Redis, and microservices architecture'\n  );\n  console.log(`Architecture complete: ${state.progress}%`);\n\n  // Refinement\n  state = await engine.processIssue(\n    issueId, \n    'design', \n    'Add comprehensive API documentation, rate limiting, and monitoring'\n  );\n  console.log(`Design complete: ${state.progress}%`);\n\n  // Build Phase\n  console.log('=== BUILD PHASE ===');\n  state = await engine.processIssue(\n    issueId, \n    'build', \n    'Generate complete microservices implementation with Docker containers, API Gateway, and database schemas'\n  );\n  console.log(`Implementation complete: ${state.artifacts.implementation ? 'Yes' : 'No'}`);\n\n  // Debug Phase\n  console.log('=== DEBUG PHASE ===');\n  state = await engine.processIssue(\n    issueId, \n    'debug', \n    'Review the implementation for scalability issues, security vulnerabilities, and performance bottlenecks'\n  );\n  console.log(`Debug analysis complete: ${state.artifacts.notes ? 'Yes' : 'No'}`);\n\n  return state;\n}\n</code></pre>"},{"location":"examples/basic-usage/#mode-specific-examples","title":"\ud83c\udfaf Mode-Specific Examples","text":""},{"location":"examples/basic-usage/#design-mode-examples","title":"Design Mode Examples","text":""},{"location":"examples/basic-usage/#requirements-gathering","title":"Requirements Gathering","text":"<pre><code>// Start with high-level requirements\nawait engine.processIssue('project-001', 'design', 'Build a social media platform');\n\n// Add specific features\nawait engine.processIssue('project-001', 'design', 'Include user profiles, posts, comments, and real-time messaging');\n\n// Add technical constraints\nawait engine.processIssue('project-001', 'design', 'Use React frontend, Node.js backend, and WebSocket for real-time features');\n</code></pre>"},{"location":"examples/basic-usage/#architecture-design","title":"Architecture Design","text":"<pre><code>// Define system architecture\nawait engine.processIssue('project-001', 'design', 'Design microservices architecture with API Gateway, User Service, Post Service, and Message Service');\n\n// Add database design\nawait engine.processIssue('project-001', 'design', 'Use PostgreSQL for user data, MongoDB for posts, and Redis for caching');\n</code></pre>"},{"location":"examples/basic-usage/#build-mode-examples","title":"Build Mode Examples","text":""},{"location":"examples/basic-usage/#technology-specific-implementation","title":"Technology-Specific Implementation","text":"<pre><code>// React Frontend\nawait engine.processIssue('project-001', 'build', 'Generate React components with TypeScript, Redux for state management, and Material-UI for styling');\n\n// Node.js Backend\nawait engine.processIssue('project-001', 'build', 'Create Express.js API with TypeScript, JWT authentication, and Swagger documentation');\n\n// Database Setup\nawait engine.processIssue('project-001', 'build', 'Generate database schemas, migrations, and seed data for PostgreSQL and MongoDB');\n</code></pre>"},{"location":"examples/basic-usage/#debug-mode-examples","title":"Debug Mode Examples","text":""},{"location":"examples/basic-usage/#security-analysis","title":"Security Analysis","text":"<pre><code>// Security review\nawait engine.processIssue('project-001', 'debug', 'Analyze the authentication system for security vulnerabilities');\n\n// Performance analysis\nawait engine.processIssue('project-001', 'debug', 'Check for performance bottlenecks in the database queries and API endpoints');\n\n// Code quality review\nawait engine.processIssue('project-001', 'debug', 'Review code quality, error handling, and best practices compliance');\n</code></pre>"},{"location":"examples/basic-usage/#error-handling-examples","title":"\ud83d\udd27 Error Handling Examples","text":""},{"location":"examples/basic-usage/#basic-error-handling","title":"Basic Error Handling","text":"<pre><code>async function safeProcessIssue(issueId: string, mode: string, input: string) {\n  try {\n    const state = await engine.processIssue(issueId, mode, input);\n    console.log(`Success: ${state.currentPhase} - ${state.progress}%`);\n    return state;\n  } catch (error) {\n    console.error(`Error processing issue ${issueId}:`, error.message);\n    throw error;\n  }\n}\n</code></pre>"},{"location":"examples/basic-usage/#retry-logic","title":"Retry Logic","text":"<pre><code>async function processIssueWithRetry(issueId: string, mode: string, input: string, maxRetries: number = 3) {\n  for (let attempt = 1; attempt &lt;= maxRetries; attempt++) {\n    try {\n      const state = await engine.processIssue(issueId, mode, input);\n      return state;\n    } catch (error) {\n      console.log(`Attempt ${attempt} failed:`, error.message);\n\n      if (attempt === maxRetries) {\n        throw new Error(`Failed after ${maxRetries} attempts: ${error.message}`);\n      }\n\n      // Wait before retry\n      await new Promise(resolve =&gt; setTimeout(resolve, 1000 * attempt));\n    }\n  }\n}\n</code></pre>"},{"location":"examples/basic-usage/#validation","title":"Validation","text":"<pre><code>function validateInput(input: string): boolean {\n  if (!input || input.trim().length === 0) {\n    throw new Error('Input cannot be empty');\n  }\n\n  if (input.length &gt; 2000) {\n    throw new Error('Input too long (max 2000 characters)');\n  }\n\n  return true;\n}\n\nasync function validatedProcessIssue(issueId: string, mode: string, input: string) {\n  validateInput(input);\n  return await engine.processIssue(issueId, mode, input);\n}\n</code></pre>"},{"location":"examples/basic-usage/#progress-tracking-examples","title":"\ud83d\udcca Progress Tracking Examples","text":""},{"location":"examples/basic-usage/#monitor-progress","title":"Monitor Progress","text":"<pre><code>async function trackProgress(issueId: string, inputs: string[]) {\n  const progress = [];\n\n  for (const input of inputs) {\n    const state = await engine.processIssue(issueId, 'design', input);\n    progress.push({\n      input,\n      phase: state.currentPhase,\n      progress: state.progress,\n      artifacts: Object.keys(state.artifacts)\n    });\n  }\n\n  return progress;\n}\n\n// Usage\nconst inputs = [\n  'Create a blog platform',\n  'Add user authentication',\n  'Include comment system',\n  'Add admin dashboard'\n];\n\nconst progress = await trackProgress('blog-platform', inputs);\nconsole.table(progress);\n</code></pre>"},{"location":"examples/basic-usage/#batch-processing","title":"Batch Processing","text":"<pre><code>async function batchProcess(issues: Array&lt;{id: string, mode: string, input: string}&gt;) {\n  const results = await Promise.allSettled(\n    issues.map(issue =&gt; engine.processIssue(issue.id, issue.mode, issue.input))\n  );\n\n  return results.map((result, index) =&gt; ({\n    issue: issues[index],\n    success: result.status === 'fulfilled',\n    data: result.status === 'fulfilled' ? result.value : null,\n    error: result.status === 'rejected' ? result.reason : null\n  }));\n}\n</code></pre>"},{"location":"examples/basic-usage/#best-practices","title":"\ud83d\udca1 Best Practices","text":""},{"location":"examples/basic-usage/#input-quality","title":"Input Quality","text":"<pre><code>// Good: Specific and detailed\nawait engine.processIssue('project-001', 'design', 'Create a REST API for user management with JWT authentication, password hashing using bcrypt, and rate limiting');\n\n// Bad: Vague and unclear\nawait engine.processIssue('project-001', 'design', 'Make an API');\n</code></pre>"},{"location":"examples/basic-usage/#progressive-refinement","title":"Progressive Refinement","text":"<pre><code>// Start broad, then get specific\nawait engine.processIssue('project-001', 'design', 'Create a web application');\nawait engine.processIssue('project-001', 'design', 'Add user authentication system');\nawait engine.processIssue('project-001', 'design', 'Include JWT tokens and password hashing');\nawait engine.processIssue('project-001', 'design', 'Add rate limiting and input validation');\n</code></pre>"},{"location":"examples/basic-usage/#mode-transitions","title":"Mode Transitions","text":"<pre><code>// Complete design before building\nconst designState = await engine.processIssue('project-001', 'design', 'Finalize requirements');\nif (designState.currentPhase === 'completion') {\n  const buildState = await engine.processIssue('project-001', 'build', 'Generate implementation');\n}\n</code></pre> <p>Ready for more advanced examples? Check out Advanced Scenarios for complex use cases.</p>"},{"location":"readme-pages/Overview/","title":"Nys - SPARC Workflow-Driven Development Assistant","text":"<p>A Visual Studio Code extension that implements a workflow-driven assistant based on the SPARC framework (Specification \u2192 Pseudocode \u2192 Architecture \u2192 Refinement \u2192 Completion). The assistant is issue-driven: every new task is stored as an issue folder, and each issue goes through Design \u2192 Build \u2192 Debug modes for systematic development.</p>"},{"location":"readme-pages/Overview/#core-philosophy","title":"\ud83c\udfaf Core Philosophy","text":"<p>Mira transforms development from ad-hoc coding to structured, traceable workflows. Every development task becomes an issue that progresses through three distinct phases:</p> <ul> <li>\ud83c\udfa8 Design Mode: Analyze requirements, generate specifications, and create technical guidelines</li> <li>\ud83d\udd28 Build Mode: Generate code, create project structure, and implement features</li> <li>\ud83d\udc1b Debug Mode: Identify issues, apply fixes, and optimize performance</li> </ul> <p>This ensures every piece of code has clear requirements, documented decisions, and traceable evolution.</p>"},{"location":"readme-pages/Overview/#key-features","title":"\ud83d\ude80 Key Features","text":""},{"location":"readme-pages/Overview/#issue-driven-workflow-system","title":"Issue-Driven Workflow System","text":"<ul> <li>Issue Folder Structure: Each task gets a dedicated folder with requirements, guidelines, notes, and outputs</li> <li>Three-Mode Progression: Design \u2192 Build \u2192 Debug workflow for systematic development</li> <li>Persistent State Management: All workflow state stored in <code>.nys/</code> directory for session continuity</li> <li>Traceable Development: Every code change linked to specific requirements and decisions</li> </ul>"},{"location":"readme-pages/Overview/#sparc-framework-integration","title":"SPARC Framework Integration","text":"<ul> <li>Specification: Automated requirements extraction and technical specification generation</li> <li>Pseudocode: Architecture planning and design documentation</li> <li>Architecture: Project structure planning and dependency management</li> <li>Refinement: Iterative improvement and optimization</li> <li>Completion: Final implementation and testing</li> </ul>"},{"location":"readme-pages/Overview/#advanced-tool-integration","title":"Advanced Tool Integration","text":"<ul> <li>MCP Server Support: Connect to HTTP/WebSocket servers and local stdio binaries</li> <li>Built-in Tools: Computation, search, parsing, and file operations</li> <li>External Data Sources: GitHub, web APIs, and custom data integrations</li> <li>AI Chat Interface: Context-aware conversations with project understanding</li> </ul>"},{"location":"readme-pages/Overview/#development-workflow-features","title":"Development Workflow Features","text":"<ul> <li>Mode-Specific Processing: Tailored workflows for design, build, and debug phases</li> <li>File System Integration: Direct project file manipulation and structure management</li> <li>State Persistence: Workflow progress saved across sessions</li> <li>Rollback Capability: Version control integration for code state management</li> </ul>"},{"location":"readme-pages/Overview/#issue-folder-structure","title":"\ud83d\udcc2 Issue Folder Structure","text":"<p>Each development task is organized in a dedicated issue folder for complete traceability:</p> <pre><code>/issues/ISSUE-001/\n   \u251c\u2500\u2500 requirements.md   # Generated requirements &amp; technical specs\n   \u251c\u2500\u2500 guidelines.md     # Style guides, dependencies, coding constraints  \n   \u251c\u2500\u2500 notes.md          # Iterations, debug notes, brainstorming\n   \u251c\u2500\u2500 status.json       # Tracks mode (design/build/debug), progress, state\n</code></pre>"},{"location":"readme-pages/Overview/#workflow-modes","title":"\ud83d\udd04 Workflow Modes","text":""},{"location":"readme-pages/Overview/#design-mode","title":"\ud83c\udfa8 Design Mode","text":"<ul> <li>Input: User prompt (problem statement)</li> <li>Process:<ul> <li>Analyze user input &amp; project state</li> <li>Extract features and constraints</li> <li>Generate <code>requirements.md</code> and <code>guidelines.md</code></li> </ul> </li> <li>Output: Structured documents inside issue folder</li> </ul>"},{"location":"readme-pages/Overview/#build-mode","title":"\ud83d\udd28 Build Mode","text":"<ul> <li>Input: <code>requirements.md</code> + <code>guidelines.md</code></li> <li>Process:<ul> <li>Parse requirements and technical specifications</li> <li>Propose project structure (if needed)</li> <li>Generate source code, configs, tests</li> <li>Update <code>status.json</code> with progress</li> </ul> </li> <li>Output: Code written to project files or <code>outputs/</code></li> </ul>"},{"location":"readme-pages/Overview/#debug-mode","title":"\ud83d\udc1b Debug Mode","text":"<ul> <li>Input: Existing code + requirements/guidelines</li> <li>Process:<ul> <li>Identify bugs, errors, or performance issues</li> <li>Generate fixes and improvements</li> <li>Apply fixes to project files</li> <li>Record debug notes in <code>notes.md</code></li> </ul> </li> <li>Output: Updated project files and documentation</li> </ul>"},{"location":"readme-pages/page-2/","title":"Page 2","text":""},{"location":"readme-pages/page-2/#architecture-overview","title":"\ud83c\udfd7\ufe0f Architecture Overview","text":"<p>Mira is architected for modular, persistent, and orchestrated AI workflows:</p> <ul> <li>SPARC Workflow Engine: Core orchestration system managing Design \u2192 Build \u2192 Debug transitions</li> <li>Issue Management System: Persistent issue folders with structured metadata and state tracking</li> <li>Tool Integration Layer: Built-in tools + MCP server support for external capabilities</li> <li>File System Integration: Direct project manipulation with version control awareness</li> <li>State Persistence: All workflow state stored in <code>.nys/</code> directory for session continuity. </li> </ul>"},{"location":"readme-pages/page-3/","title":"Page 3","text":""},{"location":"readme-pages/page-3/#orchestrator-and-graphnodes","title":"Orchestrator and GraphNodes","text":"<p>Each step in the SPARC workflow occurs in nodes and these nodes chained to each other, either by a sequential, parallel or conditional edge. building GraphNodes and we have agents in each of these nodes orchestrating flow from one Node to another </p>"},{"location":"readme-pages/page-3/#graphnodestate","title":"GraphNodeState","text":"<p>Nodes refers to each step in th SPARC workflow and are grouped into 3 categories - Design Nodes - Build Nodes - Debug Nodes   The GraphNodeState shows in initial state of the graph (similar to Langgraph's). </p>"},{"location":"readme-pages/page-3/#decision-workflow","title":"Decision Workflow","text":""},{"location":"readme-pages/page-4/","title":"Page 4","text":""},{"location":"readme-pages/page-4/#building-graphnodes-chains","title":"Building GraphNodes Chains","text":"<p>Building GraphNodes is as simple as just chaining them together in an analogous fashion to Langgraph's way </p>"},{"location":"readme-pages/page-5/","title":"Page 5","text":""},{"location":"readme-pages/page-5/#agents","title":"Agents","text":"<p>Agents are the intelligent brains in the nodes execution they do this by their base systemprompts which triggers the way the llm provide responses from their inputs Each step in the SPARC workflow falls in a particular agent group. </p>"},{"location":"technical/SPARC_GRAPH_ARCHITECTURE/","title":"SPARC Graph Architecture - AI-Assisted Workflow Orchestration","text":""},{"location":"technical/SPARC_GRAPH_ARCHITECTURE/#executive-summary","title":"Executive Summary","text":"<p>The SPARC Graph Architecture represents a sophisticated orchestration system that combines the SPARC workflow methodology with AI assistance, LangGraph state management, and MCP (Model Context Protocol) server integration. This architecture creates a graph-like structure where nodes represent workflow phases, edges represent transitions, and AI agents guide the progression through intelligent decision-making.</p>"},{"location":"technical/SPARC_GRAPH_ARCHITECTURE/#architecture-overview","title":"\ud83c\udfd7\ufe0f Architecture Overview","text":""},{"location":"technical/SPARC_GRAPH_ARCHITECTURE/#high-level-graph-structure","title":"High-Level Graph Structure","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                              SPARC GRAPH ARCHITECTURE                                   \u2502\n\u2502                         AI-Assisted Workflow Orchestration                              \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                                    USER INTERFACE                                       \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502\n\u2502  \u2502   VS Code       \u2502  \u2502   Webview       \u2502  \u2502   Chat          \u2502  \u2502   Issue         \u2502   \u2502\n\u2502  \u2502   Extension     \u2502  \u2502   Interface     \u2502  \u2502   Interface     \u2502  \u2502   Management    \u2502   \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                        \u2502\n                                        \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                              ORCHESTRATION LAYER                                        \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502\n\u2502  \u2502   Issue         \u2502  \u2502   SPARC         \u2502  \u2502   LangGraph     \u2502  \u2502   AI            \u2502   \u2502\n\u2502  \u2502   Manager       \u2502  \u2502   Workflow      \u2502  \u2502   State         \u2502  \u2502   Orchestrator  \u2502   \u2502\n\u2502  \u2502                 \u2502  \u2502   Engine        \u2502  \u2502   Manager       \u2502  \u2502                 \u2502   \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                        \u2502\n                                        \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                              WORKFLOW GRAPH NODES                                       \u2502\n\u2502                                                                                         \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                    \u2502\n\u2502  \u2502   DESIGN        \u2502\u2500\u2500\u2500\u25b6\u2502   BUILD         \u2502\u2500\u2500\u2500\u25b6\u2502   DEBUG         \u2502                    \u2502\n\u2502  \u2502   MODE          \u2502    \u2502   MODE          \u2502    \u2502   MODE          \u2502                    \u2502\n\u2502  \u2502                 \u2502    \u2502                 \u2502    \u2502                 \u2502                    \u2502\n\u2502  \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502    \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502    \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502                    \u2502\n\u2502  \u2502 \u2502Specification\u2502 \u2502    \u2502 \u2502Implementation\u2502 \u2502    \u2502 \u2502Analysis     \u2502 \u2502                    \u2502\n\u2502  \u2502 \u2502Phase        \u2502 \u2502    \u2502 \u2502Generation   \u2502 \u2502    \u2502 \u2502Engine       \u2502 \u2502                    \u2502\n\u2502  \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502    \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502    \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502                    \u2502\n\u2502  \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502    \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502    \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502                    \u2502\n\u2502  \u2502 \u2502Pseudocode   \u2502 \u2502    \u2502 \u2502Test         \u2502 \u2502    \u2502 \u2502Issue        \u2502 \u2502                    \u2502\n\u2502  \u2502 \u2502Phase        \u2502 \u2502    \u2502 \u2502Generation   \u2502 \u2502    \u2502 \u2502Detection    \u2502 \u2502                    \u2502\n\u2502  \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502    \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502    \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502                    \u2502\n\u2502  \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502    \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502    \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502                    \u2502\n\u2502  \u2502 \u2502Architecture \u2502 \u2502    \u2502 \u2502Code         \u2502 \u2502    \u2502 \u2502Fix          \u2502 \u2502                    \u2502\n\u2502  \u2502 \u2502Phase        \u2502 \u2502    \u2502 \u2502Generation   \u2502 \u2502    \u2502 \u2502Generation   \u2502 \u2502                    \u2502\n\u2502  \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502    \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502    \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502                    \u2502\n\u2502  \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502    \u2502                 \u2502    \u2502                 \u2502                    \u2502\n\u2502  \u2502 \u2502Refinement   \u2502 \u2502    \u2502                 \u2502    \u2502                 \u2502                    \u2502\n\u2502  \u2502 \u2502Phase        \u2502 \u2502    \u2502                 \u2502    \u2502                 \u2502                    \u2502\n\u2502  \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502    \u2502                 \u2502    \u2502                 \u2502                    \u2502\n\u2502  \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502    \u2502                 \u2502    \u2502                 \u2502                    \u2502\n\u2502  \u2502 \u2502Completion   \u2502 \u2502    \u2502                 \u2502    \u2502                 \u2502                    \u2502\n\u2502  \u2502 \u2502Phase        \u2502 \u2502    \u2502                 \u2502    \u2502                 \u2502                    \u2502\n\u2502  \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502    \u2502                 \u2502    \u2502                 \u2502                    \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                        \u2502\n                                        \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                              AI AGENT LAYER                                             \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502\n\u2502  \u2502   Design        \u2502  \u2502   Build         \u2502  \u2502   Debug         \u2502  \u2502   Orchestration \u2502   \u2502\n\u2502  \u2502   Agent         \u2502  \u2502   Agent         \u2502  \u2502   Agent         \u2502  \u2502   Agent         \u2502   \u2502\n\u2502  \u2502                 \u2502  \u2502                 \u2502  \u2502                 \u2502  \u2502                 \u2502   \u2502\n\u2502  \u2502 \u2022 Requirements  \u2502  \u2502 \u2022 Code          \u2502  \u2502 \u2022 Issue         \u2502  \u2502 \u2022 Workflow      \u2502   \u2502\n\u2502  \u2502   Analysis      \u2502  \u2502   Generation    \u2502  \u2502   Analysis      \u2502  \u2502   Coordination  \u2502   \u2502\n\u2502  \u2502 \u2022 Architecture  \u2502  \u2502 \u2022 Test          \u2502  \u2502 \u2022 Fix           \u2502  \u2502 \u2022 State         \u2502   \u2502\n\u2502  \u2502   Design        \u2502  \u2502   Creation      \u2502  \u2502   Generation    \u2502  \u2502   Management    \u2502   \u2502\n\u2502  \u2502 \u2022 Specification \u2502  \u2502 \u2022 Documentation \u2502  \u2502 \u2022 Optimization  \u2502  \u2502 \u2022 Decision      \u2502   \u2502\n\u2502  \u2502   Generation    \u2502  \u2502   Generation    \u2502  \u2502 \u2022 Performance   \u2502  \u2502   Making        \u2502   \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                        \u2502\n                                        \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                              TOOL INTEGRATION LAYER                                     \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502\n\u2502  \u2502   Built-in      \u2502  \u2502   MCP           \u2502  \u2502   External      \u2502  \u2502   Custom        \u2502   \u2502\n\u2502  \u2502   Tools         \u2502  \u2502   Servers       \u2502  \u2502   APIs          \u2502  \u2502   Tools         \u2502   \u2502\n\u2502  \u2502                 \u2502  \u2502                 \u2502  \u2502                 \u2502  \u2502                 \u2502   \u2502\n\u2502  \u2502 \u2022 File System   \u2502  \u2502 \u2022 GitHub        \u2502  \u2502 \u2022 Web Search    \u2502  \u2502 \u2022 Project       \u2502   \u2502\n\u2502  \u2502 \u2022 Terminal      \u2502  \u2502 \u2022 Database      \u2502  \u2502 \u2022 Documentation \u2502  \u2502   Specific      \u2502   \u2502\n\u2502  \u2502 \u2022 Git           \u2502  \u2502 \u2022 Vector Store  \u2502  \u2502 \u2022 Code Analysis \u2502  \u2502 \u2022 Domain        \u2502   \u2502\n\u2502  \u2502 \u2022 Code Analysis \u2502  \u2502 \u2022 Embedding     \u2502  \u2502 \u2022 Testing       \u2502  \u2502   Specific      \u2502   \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                        \u2502\n                                        \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                              PERSISTENCE LAYER                                          \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502\n\u2502  \u2502   State         \u2502  \u2502   Artifacts     \u2502  \u2502   Memory        \u2502  \u2502   Vector        \u2502   \u2502\n\u2502  \u2502   Storage       \u2502  \u2502   Storage       \u2502  \u2502   Storage       \u2502  \u2502   Storage       \u2502   \u2502\n\u2502  \u2502                 \u2502  \u2502                 \u2502  \u2502                 \u2502  \u2502                 \u2502   \u2502\n\u2502  \u2502 \u2022 Workflow      \u2502  \u2502 \u2022 Requirements  \u2502  \u2502 \u2022 Chat History  \u2502  \u2502 \u2022 Embeddings    \u2502   \u2502\n\u2502  \u2502   State         \u2502  \u2502 \u2022 Architecture  \u2502  \u2502 \u2022 Context       \u2502  \u2502 \u2022 Similarity    \u2502   \u2502\n\u2502  \u2502 \u2022 Progress      \u2502  \u2502 \u2022 Code          \u2502  \u2502 \u2022 Decisions     \u2502  \u2502   Search        \u2502   \u2502\n\u2502  \u2502 \u2022 Transitions   \u2502  \u2502 \u2022 Tests         \u2502  \u2502 \u2022 Iterations    \u2502  \u2502 \u2022 Knowledge     \u2502   \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"technical/SPARC_GRAPH_ARCHITECTURE/#graph-node-structure","title":"\ud83d\udd04 Graph Node Structure","text":""},{"location":"technical/SPARC_GRAPH_ARCHITECTURE/#node-types","title":"Node Types","text":""},{"location":"technical/SPARC_GRAPH_ARCHITECTURE/#1-mode-nodes-high-level-workflow-states","title":"1. Mode Nodes (High-Level Workflow States)","text":"<pre><code>interface ModeNode {\n  id: string;\n  type: 'design' | 'build' | 'debug';\n  status: 'active' | 'completed' | 'pending' | 'blocked';\n  currentPhase: string;\n  progress: number;\n  artifacts: ArtifactMap;\n  transitions: Transition[];\n}\n</code></pre>"},{"location":"technical/SPARC_GRAPH_ARCHITECTURE/#2-phase-nodes-sparc-workflow-phases","title":"2. Phase Nodes (SPARC Workflow Phases)","text":"<pre><code>interface PhaseNode {\n  id: string;\n  mode: 'design' | 'build' | 'debug';\n  phase: 'specification' | 'pseudocode' | 'architecture' | 'refinement' | 'completion';\n  status: 'active' | 'completed' | 'pending' | 'blocked';\n  progress: number;\n  input: string;\n  output: string;\n  artifacts: ArtifactMap;\n  aiAgent: AgentConfig;\n  tools: ToolConfig[];\n}\n</code></pre>"},{"location":"technical/SPARC_GRAPH_ARCHITECTURE/#3-agent-nodes-ai-assistant-instances","title":"3. Agent Nodes (AI Assistant Instances)","text":"<pre><code>interface AgentNode {\n  id: string;\n  type: 'design' | 'build' | 'debug' | 'orchestration';\n  role: string;\n  capabilities: string[];\n  tools: string[];\n  context: ContextData;\n  state: AgentState;\n}\n</code></pre>"},{"location":"technical/SPARC_GRAPH_ARCHITECTURE/#4-tool-nodes-available-tools-and-services","title":"4. Tool Nodes (Available Tools and Services)","text":"<pre><code>interface ToolNode {\n  id: string;\n  name: string;\n  type: 'built-in' | 'mcp' | 'external' | 'custom';\n  capabilities: string[];\n  parameters: ParameterSchema;\n  status: 'available' | 'busy' | 'error';\n  lastUsed: Date;\n}\n</code></pre>"},{"location":"technical/SPARC_GRAPH_ARCHITECTURE/#edge-types","title":"Edge Types","text":""},{"location":"technical/SPARC_GRAPH_ARCHITECTURE/#1-transition-edges-workflow-progression","title":"1. Transition Edges (Workflow Progression)","text":"<pre><code>interface TransitionEdge {\n  from: string;\n  to: string;\n  condition: TransitionCondition;\n  trigger: 'user_input' | 'ai_decision' | 'completion' | 'error';\n  weight: number;\n  metadata: TransitionMetadata;\n}\n</code></pre>"},{"location":"technical/SPARC_GRAPH_ARCHITECTURE/#2-agent-tool-edges-tool-invocation","title":"2. Agent-Tool Edges (Tool Invocation)","text":"<pre><code>interface AgentToolEdge {\n  agentId: string;\n  toolId: string;\n  invocation: ToolInvocation;\n  result: ToolResult;\n  timestamp: Date;\n}\n</code></pre>"},{"location":"technical/SPARC_GRAPH_ARCHITECTURE/#3-context-edges-information-flow","title":"3. Context Edges (Information Flow)","text":"<pre><code>interface ContextEdge {\n  from: string;\n  to: string;\n  contextType: 'artifacts' | 'state' | 'memory' | 'decisions';\n  data: ContextData;\n  timestamp: Date;\n}\n</code></pre>"},{"location":"technical/SPARC_GRAPH_ARCHITECTURE/#ai-agent-architecture","title":"\ud83e\udd16 AI Agent Architecture","text":""},{"location":"technical/SPARC_GRAPH_ARCHITECTURE/#agent-types-and-responsibilities","title":"Agent Types and Responsibilities","text":""},{"location":"technical/SPARC_GRAPH_ARCHITECTURE/#1-design-agent","title":"1. Design Agent","text":"<pre><code>class DesignAgent {\n  // Core responsibilities\n  analyzeRequirements(input: string): RequirementsAnalysis;\n  generateSpecifications(context: Context): SpecificationDocument;\n  createPseudocode(requirements: Requirements): PseudocodeDocument;\n  designArchitecture(specs: Specifications): ArchitectureDocument;\n  refineRequirements(feedback: Feedback): RefinedRequirements;\n\n  // AI capabilities\n  private llmClient: LLMClient;\n  private contextManager: ContextManager;\n  private toolRegistry: ToolRegistry;\n\n  // Tool integration\n  availableTools: [\n    'requirements_analyzer',\n    'architecture_designer',\n    'specification_generator',\n    'pseudocode_creator'\n  ];\n}\n</code></pre>"},{"location":"technical/SPARC_GRAPH_ARCHITECTURE/#2-build-agent","title":"2. Build Agent","text":"<pre><code>class BuildAgent {\n  // Core responsibilities\n  generateImplementation(design: DesignArtifacts): ImplementationCode;\n  createTests(implementation: Code): TestSuite;\n  generateDocumentation(code: Code): Documentation;\n  createConfiguration(requirements: Requirements): ConfigFiles;\n\n  // AI capabilities\n  private codeGenerator: CodeGenerator;\n  private testGenerator: TestGenerator;\n  private docGenerator: DocGenerator;\n\n  // Tool integration\n  availableTools: [\n    'code_generator',\n    'test_creator',\n    'documentation_generator',\n    'config_creator',\n    'file_system',\n    'terminal'\n  ];\n}\n</code></pre>"},{"location":"technical/SPARC_GRAPH_ARCHITECTURE/#3-debug-agent","title":"3. Debug Agent","text":"<pre><code>class DebugAgent {\n  // Core responsibilities\n  analyzeCode(code: Code): CodeAnalysis;\n  identifyIssues(analysis: CodeAnalysis): IssueList;\n  generateFixes(issues: IssueList): FixProposals;\n  optimizePerformance(code: Code): OptimizationSuggestions;\n\n  // AI capabilities\n  private codeAnalyzer: CodeAnalyzer;\n  private issueDetector: IssueDetector;\n  private fixGenerator: FixGenerator;\n\n  // Tool integration\n  availableTools: [\n    'code_analyzer',\n    'issue_detector',\n    'fix_generator',\n    'performance_profiler',\n    'security_scanner'\n  ];\n}\n</code></pre>"},{"location":"technical/SPARC_GRAPH_ARCHITECTURE/#4-orchestration-agent","title":"4. Orchestration Agent","text":"<pre><code>class OrchestrationAgent {\n  // Core responsibilities\n  coordinateWorkflow(state: WorkflowState): WorkflowDecision;\n  manageTransitions(current: Node, target: Node): TransitionPlan;\n  resolveConflicts(conflicts: Conflict[]): Resolution;\n  optimizeWorkflow(metrics: WorkflowMetrics): Optimization;\n\n  // AI capabilities\n  private decisionEngine: DecisionEngine;\n  private conflictResolver: ConflictResolver;\n  private optimizer: WorkflowOptimizer;\n\n  // Tool integration\n  availableTools: [\n    'workflow_analyzer',\n    'decision_engine',\n    'conflict_resolver',\n    'performance_monitor'\n  ];\n}\n</code></pre>"},{"location":"technical/SPARC_GRAPH_ARCHITECTURE/#tool-integration-architecture","title":"\ud83d\udd27 Tool Integration Architecture","text":""},{"location":"technical/SPARC_GRAPH_ARCHITECTURE/#tool-categories","title":"Tool Categories","text":""},{"location":"technical/SPARC_GRAPH_ARCHITECTURE/#1-built-in-tools","title":"1. Built-in Tools","text":"<pre><code>interface BuiltInTool {\n  name: string;\n  category: 'filesystem' | 'terminal' | 'git' | 'analysis';\n  implementation: ToolImplementation;\n  parameters: ParameterSchema;\n  capabilities: string[];\n}\n\n// Example built-in tools\nconst builtInTools: BuiltInTool[] = [\n  {\n    name: 'file_system',\n    category: 'filesystem',\n    capabilities: ['read', 'write', 'list', 'create', 'delete'],\n    parameters: {\n      operation: { type: 'string', enum: ['read', 'write', 'list', 'create', 'delete'] },\n      path: { type: 'string' },\n      content: { type: 'string', optional: true }\n    }\n  },\n  {\n    name: 'terminal',\n    category: 'terminal',\n    capabilities: ['execute', 'interactive', 'stream'],\n    parameters: {\n      command: { type: 'string' },\n      cwd: { type: 'string', optional: true },\n      interactive: { type: 'boolean', default: false }\n    }\n  }\n];\n</code></pre>"},{"location":"technical/SPARC_GRAPH_ARCHITECTURE/#2-mcp-server-tools","title":"2. MCP Server Tools","text":"<pre><code>interface MCPServerTool {\n  name: string;\n  serverUrl: string;\n  serverType: 'http' | 'websocket' | 'stdio';\n  capabilities: string[];\n  authentication: AuthConfig;\n  tools: MCPTool[];\n}\n\n// Example MCP server configurations\nconst mcpServers: MCPServerTool[] = [\n  {\n    name: 'github-mcp',\n    serverUrl: 'stdio://github-mcp-server',\n    serverType: 'stdio',\n    capabilities: ['repository_management', 'issue_tracking', 'code_analysis'],\n    authentication: {\n      type: 'token',\n      token: 'GITHUB_PERSONAL_ACCESS_TOKEN'\n    },\n    tools: [\n      {\n        name: 'create_issue',\n        description: 'Create a new GitHub issue',\n        parameters: {\n          title: { type: 'string' },\n          body: { type: 'string' },\n          labels: { type: 'array', optional: true }\n        }\n      }\n    ]\n  }\n];\n</code></pre>"},{"location":"technical/SPARC_GRAPH_ARCHITECTURE/#3-external-api-tools","title":"3. External API Tools","text":"<pre><code>interface ExternalAPITool {\n  name: string;\n  apiUrl: string;\n  authentication: AuthConfig;\n  endpoints: APIEndpoint[];\n  rateLimiting: RateLimitConfig;\n}\n\n// Example external API tools\nconst externalAPIs: ExternalAPITool[] = [\n  {\n    name: 'web_search',\n    apiUrl: 'https://api.search.com/v1',\n    authentication: {\n      type: 'api_key',\n      key: 'SEARCH_API_KEY'\n    },\n    endpoints: [\n      {\n        name: 'search',\n        method: 'GET',\n        path: '/search',\n        parameters: {\n          query: { type: 'string' },\n          limit: { type: 'number', default: 10 }\n        }\n      }\n    ]\n  }\n];\n</code></pre>"},{"location":"technical/SPARC_GRAPH_ARCHITECTURE/#langgraph-state-management","title":"\ud83d\udcca LangGraph State Management","text":""},{"location":"technical/SPARC_GRAPH_ARCHITECTURE/#state-schema","title":"State Schema","text":"<pre><code>interface LangGraphState {\n  // Workflow state\n  currentMode: 'design' | 'build' | 'debug';\n  currentPhase: string;\n  progress: number;\n\n  // Issue context\n  issueId: string;\n  issueTitle: string;\n  issueDescription: string;\n\n  // Artifacts\n  artifacts: {\n    requirements?: string;\n    guidelines?: string;\n    pseudocode?: string;\n    architecture?: string;\n    implementation?: string;\n    tests?: string;\n    notes?: string;\n  };\n\n  // AI context\n  aiContext: {\n    currentAgent: string;\n    agentHistory: AgentAction[];\n    toolCalls: ToolCall[];\n    decisions: Decision[];\n  };\n\n  // Memory and context\n  memory: {\n    chatHistory: ChatMessage[];\n    context: ContextData;\n    retrievedContext: RetrievedContext[];\n  };\n\n  // Workflow metadata\n  metadata: {\n    createdAt: Date;\n    updatedAt: Date;\n    transitions: Transition[];\n    errors: Error[];\n  };\n}\n</code></pre>"},{"location":"technical/SPARC_GRAPH_ARCHITECTURE/#graph-execution-flow","title":"Graph Execution Flow","text":"<pre><code>class LangGraphWorkflow {\n  private state: LangGraphState;\n  private nodes: Map&lt;string, GraphNode&gt;;\n  private edges: Map&lt;string, GraphEdge&gt;;\n\n  async executeWorkflow(input: WorkflowInput): Promise&lt;WorkflowOutput&gt; {\n    // Initialize state\n    this.state = this.initializeState(input);\n\n    // Execute graph traversal\n    while (!this.isComplete()) {\n      const currentNode = this.getCurrentNode();\n      const nextNode = await this.executeNode(currentNode);\n      this.transitionTo(nextNode);\n    }\n\n    return this.generateOutput();\n  }\n\n  private async executeNode(node: GraphNode): Promise&lt;GraphNode&gt; {\n    // Get appropriate agent\n    const agent = this.getAgentForNode(node);\n\n    // Execute agent with tools\n    const result = await agent.execute(node, this.state);\n\n    // Update state\n    this.updateState(result);\n\n    // Determine next node\n    return this.determineNextNode(node, result);\n  }\n}\n</code></pre>"},{"location":"technical/SPARC_GRAPH_ARCHITECTURE/#workflow-execution-flow","title":"\ud83d\udd04 Workflow Execution Flow","text":""},{"location":"technical/SPARC_GRAPH_ARCHITECTURE/#1-user-input-processing","title":"1. User Input Processing","text":"<pre><code>async function processUserInput(input: UserInput): Promise&lt;WorkflowResult&gt; {\n  // 1. Parse and validate input\n  const parsedInput = await parseUserInput(input);\n\n  // 2. Determine workflow mode\n  const mode = determineWorkflowMode(parsedInput);\n\n  // 3. Initialize or load workflow state\n  const state = await initializeWorkflowState(parsedInput.issueId, mode);\n\n  // 4. Execute LangGraph workflow\n  const result = await langGraphWorkflow.execute(state, parsedInput);\n\n  // 5. Update persistence layer\n  await updatePersistence(result);\n\n  // 6. Return result to UI\n  return result;\n}\n</code></pre>"},{"location":"technical/SPARC_GRAPH_ARCHITECTURE/#2-ai-agent-coordination","title":"2. AI Agent Coordination","text":"<pre><code>class AgentCoordinator {\n  private agents: Map&lt;string, AIAgent&gt;;\n  private toolRegistry: ToolRegistry;\n  private contextManager: ContextManager;\n\n  async coordinateWorkflow(\n    mode: WorkflowMode,\n    phase: WorkflowPhase,\n    input: string,\n    context: WorkflowContext\n  ): Promise&lt;AgentResult&gt; {\n    // 1. Select appropriate agent\n    const agent = this.selectAgent(mode, phase);\n\n    // 2. Prepare context\n    const enrichedContext = await this.contextManager.enrichContext(context);\n\n    // 3. Execute agent with tools\n    const result = await agent.execute(input, enrichedContext, this.toolRegistry);\n\n    // 4. Update workflow state\n    await this.updateWorkflowState(result);\n\n    // 5. Determine next steps\n    const nextSteps = await this.determineNextSteps(result);\n\n    return {\n      result,\n      nextSteps,\n      updatedState: this.getCurrentState()\n    };\n  }\n}\n</code></pre>"},{"location":"technical/SPARC_GRAPH_ARCHITECTURE/#3-tool-invocation-flow","title":"3. Tool Invocation Flow","text":"<pre><code>class ToolInvocationFlow {\n  async invokeTool(\n    agentId: string,\n    toolName: string,\n    parameters: ToolParameters\n  ): Promise&lt;ToolResult&gt; {\n    // 1. Validate tool availability\n    const tool = await this.toolRegistry.getTool(toolName);\n    if (!tool) {\n      throw new Error(`Tool ${toolName} not found`);\n    }\n\n    // 2. Check agent permissions\n    const agent = this.agentRegistry.getAgent(agentId);\n    if (!agent.hasPermission(toolName)) {\n      throw new Error(`Agent ${agentId} not authorized for tool ${toolName}`);\n    }\n\n    // 3. Execute tool\n    const result = await tool.execute(parameters);\n\n    // 4. Log tool usage\n    await this.logToolUsage(agentId, toolName, parameters, result);\n\n    // 5. Update context\n    await this.contextManager.updateContext(result);\n\n    return result;\n  }\n}\n</code></pre>"},{"location":"technical/SPARC_GRAPH_ARCHITECTURE/#performance-and-optimization","title":"\ud83d\udcc8 Performance and Optimization","text":""},{"location":"technical/SPARC_GRAPH_ARCHITECTURE/#graph-optimization-strategies","title":"Graph Optimization Strategies","text":""},{"location":"technical/SPARC_GRAPH_ARCHITECTURE/#1-node-caching","title":"1. Node Caching","text":"<pre><code>class NodeCache {\n  private cache: Map&lt;string, CachedNode&gt;;\n  private ttl: number;\n\n  async getNode(nodeId: string): Promise&lt;GraphNode | null&gt; {\n    const cached = this.cache.get(nodeId);\n    if (cached &amp;&amp; !this.isExpired(cached)) {\n      return cached.node;\n    }\n    return null;\n  }\n\n  async setNode(nodeId: string, node: GraphNode): Promise&lt;void&gt; {\n    this.cache.set(nodeId, {\n      node,\n      timestamp: Date.now(),\n      ttl: this.ttl\n    });\n  }\n}\n</code></pre>"},{"location":"technical/SPARC_GRAPH_ARCHITECTURE/#2-parallel-execution","title":"2. Parallel Execution","text":"<pre><code>class ParallelExecutor {\n  async executeParallelNodes(nodes: GraphNode[]): Promise&lt;GraphNode[]&gt; {\n    const promises = nodes.map(node =&gt; this.executeNode(node));\n    const results = await Promise.allSettled(promises);\n\n    return results\n      .filter(result =&gt; result.status === 'fulfilled')\n      .map(result =&gt; (result as PromiseFulfilledResult&lt;GraphNode&gt;).value);\n  }\n}\n</code></pre>"},{"location":"technical/SPARC_GRAPH_ARCHITECTURE/#3-state-compression","title":"3. State Compression","text":"<pre><code>class StateCompressor {\n  compressState(state: LangGraphState): CompressedState {\n    return {\n      // Keep only essential state\n      currentMode: state.currentMode,\n      currentPhase: state.currentPhase,\n      progress: state.progress,\n      issueId: state.issueId,\n\n      // Compress artifacts\n      artifacts: this.compressArtifacts(state.artifacts),\n\n      // Compress memory\n      memory: this.compressMemory(state.memory),\n\n      // Keep metadata\n      metadata: state.metadata\n    };\n  }\n}\n</code></pre>"},{"location":"technical/SPARC_GRAPH_ARCHITECTURE/#security-and-privacy","title":"\ud83d\udd12 Security and Privacy","text":""},{"location":"technical/SPARC_GRAPH_ARCHITECTURE/#security-considerations","title":"Security Considerations","text":""},{"location":"technical/SPARC_GRAPH_ARCHITECTURE/#1-agent-isolation","title":"1. Agent Isolation","text":"<pre><code>class AgentIsolation {\n  private sandbox: AgentSandbox;\n\n  async executeAgentInSandbox(\n    agent: AIAgent,\n    input: string,\n    tools: ToolRegistry\n  ): Promise&lt;AgentResult&gt; {\n    // Create isolated environment\n    const sandbox = await this.sandbox.create();\n\n    try {\n      // Execute agent in sandbox\n      const result = await sandbox.execute(agent, input, tools);\n      return result;\n    } finally {\n      // Clean up sandbox\n      await sandbox.destroy();\n    }\n  }\n}\n</code></pre>"},{"location":"technical/SPARC_GRAPH_ARCHITECTURE/#2-tool-permission-management","title":"2. Tool Permission Management","text":"<pre><code>class ToolPermissionManager {\n  private permissions: Map&lt;string, Set&lt;string&gt;&gt;;\n\n  hasPermission(agentId: string, toolName: string): boolean {\n    const agentPermissions = this.permissions.get(agentId);\n    return agentPermissions?.has(toolName) ?? false;\n  }\n\n  grantPermission(agentId: string, toolName: string): void {\n    if (!this.permissions.has(agentId)) {\n      this.permissions.set(agentId, new Set());\n    }\n    this.permissions.get(agentId)!.add(toolName);\n  }\n}\n</code></pre>"},{"location":"technical/SPARC_GRAPH_ARCHITECTURE/#testing-and-validation","title":"\ud83e\uddea Testing and Validation","text":""},{"location":"technical/SPARC_GRAPH_ARCHITECTURE/#graph-testing-framework","title":"Graph Testing Framework","text":"<pre><code>class GraphTestFramework {\n  async testWorkflowExecution(\n    workflow: LangGraphWorkflow,\n    testCases: TestCase[]\n  ): Promise&lt;TestResults&gt; {\n    const results: TestResult[] = [];\n\n    for (const testCase of testCases) {\n      try {\n        const result = await workflow.execute(testCase.input);\n        results.push({\n          testCase: testCase.id,\n          status: 'passed',\n          result,\n          duration: result.duration\n        });\n      } catch (error) {\n        results.push({\n          testCase: testCase.id,\n          status: 'failed',\n          error: error.message,\n          duration: 0\n        });\n      }\n    }\n\n    return {\n      total: testCases.length,\n      passed: results.filter(r =&gt; r.status === 'passed').length,\n      failed: results.filter(r =&gt; r.status === 'failed').length,\n      results\n    };\n  }\n}\n</code></pre>"},{"location":"technical/SPARC_GRAPH_ARCHITECTURE/#future-enhancements","title":"\ud83d\ude80 Future Enhancements","text":""},{"location":"technical/SPARC_GRAPH_ARCHITECTURE/#planned-features","title":"Planned Features","text":"<ol> <li>Dynamic Graph Construction: Build workflow graphs dynamically based on project requirements</li> <li>Multi-Agent Collaboration: Enable multiple agents to work together on complex tasks</li> <li>Real-time Optimization: Continuously optimize workflow execution based on performance metrics</li> <li>Federated Learning: Learn from multiple projects to improve agent capabilities</li> <li>Visual Graph Editor: Provide a visual interface for designing custom workflows</li> </ol>"},{"location":"technical/SPARC_GRAPH_ARCHITECTURE/#extension-points","title":"Extension Points","text":"<pre><code>interface GraphExtension {\n  name: string;\n  version: string;\n\n  // Custom nodes\n  customNodes?: CustomNode[];\n\n  // Custom edges\n  customEdges?: CustomEdge[];\n\n  // Custom agents\n  customAgents?: CustomAgent[];\n\n  // Custom tools\n  customTools?: CustomTool[];\n\n  // Hooks\n  hooks?: {\n    beforeNodeExecution?: (node: GraphNode) =&gt; Promise&lt;void&gt;;\n    afterNodeExecution?: (node: GraphNode, result: any) =&gt; Promise&lt;void&gt;;\n    beforeTransition?: (from: GraphNode, to: GraphNode) =&gt; Promise&lt;boolean&gt;;\n  };\n}\n</code></pre>"},{"location":"technical/SPARC_GRAPH_ARCHITECTURE/#monitoring-and-analytics","title":"\ud83d\udcca Monitoring and Analytics","text":""},{"location":"technical/SPARC_GRAPH_ARCHITECTURE/#workflow-metrics","title":"Workflow Metrics","text":"<pre><code>interface WorkflowMetrics {\n  executionTime: number;\n  nodeExecutionTimes: Map&lt;string, number&gt;;\n  toolUsageCounts: Map&lt;string, number&gt;;\n  errorRates: Map&lt;string, number&gt;;\n  successRate: number;\n  resourceUsage: ResourceUsage;\n  userSatisfaction: number;\n}\n\nclass WorkflowMonitor {\n  async collectMetrics(workflowId: string): Promise&lt;WorkflowMetrics&gt; {\n    // Collect execution metrics\n    const executionMetrics = await this.collectExecutionMetrics(workflowId);\n\n    // Collect performance metrics\n    const performanceMetrics = await this.collectPerformanceMetrics(workflowId);\n\n    // Collect user feedback\n    const userFeedback = await this.collectUserFeedback(workflowId);\n\n    return {\n      ...executionMetrics,\n      ...performanceMetrics,\n      userSatisfaction: userFeedback.satisfaction\n    };\n  }\n}\n</code></pre> <p>This comprehensive graph architecture provides a robust foundation for AI-assisted SPARC workflow orchestration, enabling intelligent decision-making, tool integration, and seamless user experience while maintaining security, performance, and extensibility.</p>"},{"location":"technical/SPARC_TECHNICAL_SPECIFICATION/","title":"SPARC Workflow Engine - Technical Specification","text":""},{"location":"technical/SPARC_TECHNICAL_SPECIFICATION/#executive-summary","title":"Executive Summary","text":"<p>The SPARC Workflow Engine is a sophisticated orchestration system that implements the SPARC framework (Specification \u2192 Pseudocode \u2192 Architecture \u2192 Refinement \u2192 Completion) for systematic, issue-driven software development. It provides a structured approach to transforming user requirements into comprehensive development artifacts through a guided, phase-based workflow.</p>"},{"location":"technical/SPARC_TECHNICAL_SPECIFICATION/#system-architecture","title":"System Architecture","text":""},{"location":"technical/SPARC_TECHNICAL_SPECIFICATION/#core-components","title":"Core Components","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                    SPARC Workflow Engine                    \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2502  \u2502   Design Mode   \u2502  \u2502   Build Mode    \u2502  \u2502 Debug Mode   \u2502 \u2502\n\u2502  \u2502   Processor     \u2502  \u2502   Processor     \u2502  \u2502  Processor   \u2502 \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2502  \u2502  Specification  \u2502  \u2502   Pseudocode    \u2502  \u2502 Architecture \u2502 \u2502\n\u2502  \u2502    Phase        \u2502  \u2502     Phase       \u2502  \u2502    Phase     \u2502 \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                  \u2502\n\u2502  \u2502   Refinement    \u2502  \u2502   Completion    \u2502                  \u2502\n\u2502  \u2502     Phase       \u2502  \u2502     Phase       \u2502                  \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                  \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2502  \u2502 Artifact        \u2502  \u2502 State           \u2502  \u2502 File System  \u2502 \u2502\n\u2502  \u2502 Generator       \u2502  \u2502 Manager         \u2502  \u2502 Integration  \u2502 \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"technical/SPARC_TECHNICAL_SPECIFICATION/#data-flow-architecture","title":"Data Flow Architecture","text":"<pre><code>User Input \u2192 Mode Selection \u2192 Phase Processing \u2192 Artifact Generation \u2192 State Persistence \u2192 File Storage\n     \u2193              \u2193              \u2193                    \u2193                    \u2193              \u2193\n  Raw Text    Design/Build/    Current Phase    requirements.md      Workflow State   .nys/issue-id/\n              Debug Mode       Progression      guidelines.md        JSON File        requirements.md\n                                25% \u2192 50% \u2192      pseudocode.md                        guidelines.md\n                                75% \u2192 100%       architecture.md                      pseudocode.md\n                                                implementation.md                     architecture.md\n                                                tests.md                             implementation.md\n                                                notes.md                             tests.md\n                                                                                     notes.md\n</code></pre>"},{"location":"technical/SPARC_TECHNICAL_SPECIFICATION/#detailed-component-analysis","title":"Detailed Component Analysis","text":""},{"location":"technical/SPARC_TECHNICAL_SPECIFICATION/#1-sparcworkflowengine-class","title":"1. SPARCWorkflowEngine Class","text":"<p>Purpose: Main orchestrator that coordinates all workflow operations</p> <p>Key Responsibilities: - Initialize and manage workspace integration - Coordinate mode-specific processing - Manage workflow state persistence - Handle artifact generation and storage</p> <p>Core Methods:</p> <pre><code>class SPARCWorkflowEngine {\n  // Public API\n  async processIssue(issueId: string, mode: WorkflowMode, userInput: string): Promise&lt;SPARCWorkflowState&gt;\n\n  // Private Processing Methods\n  private async processDesignPhase(state: SPARCWorkflowState, userInput: string): Promise&lt;void&gt;\n  private async processBuildPhase(state: SPARCWorkflowState, userInput: string): Promise&lt;void&gt;\n  private async processDebugPhase(state: SPARCWorkflowState, userInput: string): Promise&lt;void&gt;\n\n  // Artifact Generation Methods\n  private async generateRequirements(userInput: string): Promise&lt;string&gt;\n  private async generatePseudocode(userInput: string, requirements?: string): Promise&lt;string&gt;\n  private async generateArchitecture(userInput: string, artifacts: any): Promise&lt;string&gt;\n  private async generateGuidelines(userInput: string, artifacts: any): Promise&lt;string&gt;\n  private async generateImplementation(userInput: string, artifacts: any): Promise&lt;string&gt;\n  private async generateTests(userInput: string, artifacts: any): Promise&lt;string&gt;\n  private async analyzeAndDebug(userInput: string, artifacts: any): Promise&lt;string&gt;\n\n  // State Management Methods\n  private async loadWorkflowState(issueId: string): Promise&lt;SPARCWorkflowState | null&gt;\n  private async saveWorkflowState(state: SPARCWorkflowState): Promise&lt;void&gt;\n  private async saveArtifacts(state: SPARCWorkflowState): Promise&lt;void&gt;\n}\n</code></pre>"},{"location":"technical/SPARC_TECHNICAL_SPECIFICATION/#2-workflow-state-management","title":"2. Workflow State Management","text":"<p>SPARCWorkflowState Interface:</p> <pre><code>interface SPARCWorkflowState {\n  // Identity and Metadata\n  issueId: string;                    // Unique issue identifier\n  createdAt: Date;                    // Creation timestamp\n  updatedAt: Date;                    // Last modification timestamp\n\n  // Workflow Control\n  currentPhase: WorkflowPhase;        // Current phase in the workflow\n  mode: WorkflowMode;                 // Current processing mode\n  progress: number;                   // Completion percentage (0-100)\n\n  // Generated Artifacts\n  artifacts: {\n    requirements?: string;            // Requirements specification\n    guidelines?: string;              // Development guidelines\n    pseudocode?: string;              // Algorithm pseudocode\n    architecture?: string;            // System architecture\n    implementation?: string;          // Generated implementation\n    tests?: string;                   // Test suite\n    notes?: string;                   // Debug notes and iterations\n  };\n}\n\ntype WorkflowPhase = 'specification' | 'pseudocode' | 'architecture' | 'refinement' | 'completion';\ntype WorkflowMode = 'design' | 'build' | 'debug';\n</code></pre>"},{"location":"technical/SPARC_TECHNICAL_SPECIFICATION/#3-phase-processing-logic","title":"3. Phase Processing Logic","text":""},{"location":"technical/SPARC_TECHNICAL_SPECIFICATION/#design-mode-phase-progression","title":"Design Mode Phase Progression","text":"<pre><code>private async processDesignPhase(state: SPARCWorkflowState, userInput: string): Promise&lt;void&gt; {\n  switch (state.currentPhase) {\n    case 'specification':\n      // Phase 1: Extract and formalize requirements\n      state.artifacts.requirements = await this.generateRequirements(userInput);\n      state.currentPhase = 'pseudocode';\n      state.progress = 25;\n      break;\n\n    case 'pseudocode':\n      // Phase 2: Create algorithmic design\n      state.artifacts.pseudocode = await this.generatePseudocode(userInput, state.artifacts.requirements);\n      state.currentPhase = 'architecture';\n      state.progress = 50;\n      break;\n\n    case 'architecture':\n      // Phase 3: Design system architecture\n      state.artifacts.architecture = await this.generateArchitecture(userInput, state.artifacts);\n      state.artifacts.guidelines = await this.generateGuidelines(userInput, state.artifacts);\n      state.currentPhase = 'refinement';\n      state.progress = 75;\n      break;\n\n    case 'refinement':\n      // Phase 4: Refine and finalize requirements\n      state.artifacts.requirements = await this.refineRequirements(\n        state.artifacts.requirements || '', \n        userInput\n      );\n      state.currentPhase = 'completion';\n      state.progress = 100;\n      break;\n  }\n}\n</code></pre>"},{"location":"technical/SPARC_TECHNICAL_SPECIFICATION/#build-mode-processing","title":"Build Mode Processing","text":"<pre><code>private async processBuildPhase(state: SPARCWorkflowState, userInput: string): Promise&lt;void&gt; {\n  // Prerequisite Check: Design must be complete\n  if (state.currentPhase !== 'completion') {\n    state.artifacts.notes = (state.artifacts.notes || '') + \n      `\\n[${new Date().toISOString()}] Build requested but design incomplete. Current phase: ${state.currentPhase}`;\n    return;\n  }\n\n  // Generate implementation artifacts\n  state.artifacts.implementation = await this.generateImplementation(userInput, state.artifacts);\n  state.artifacts.tests = await this.generateTests(userInput, state.artifacts);\n\n  state.progress = 100;\n}\n</code></pre>"},{"location":"technical/SPARC_TECHNICAL_SPECIFICATION/#debug-mode-processing","title":"Debug Mode Processing","text":"<pre><code>private async processDebugPhase(state: SPARCWorkflowState, userInput: string): Promise&lt;void&gt; {\n  // Debug can work with any existing artifacts\n  const debugNotes = await this.analyzeAndDebug(userInput, state.artifacts);\n  state.artifacts.notes = (state.artifacts.notes || '') + \n    `\\n[${new Date().toISOString()}] Debug Analysis:\\n${debugNotes}`;\n}\n</code></pre>"},{"location":"technical/SPARC_TECHNICAL_SPECIFICATION/#artifact-generation-system","title":"Artifact Generation System","text":""},{"location":"technical/SPARC_TECHNICAL_SPECIFICATION/#1-requirements-generation","title":"1. Requirements Generation","text":"<p>Input: Raw user requirements/description Output: Structured requirements document Template Structure:</p> <pre><code># Requirements Specification\n\n## User Input\n{userInput}\n\n## Extracted Requirements\n- Core functionality: [To be defined based on input analysis]\n- Technical constraints: [To be identified]\n- Performance requirements: [To be specified]\n- Integration points: [To be mapped]\n\n## Acceptance Criteria\n- [ ] Feature 1: [Description]\n- [ ] Feature 2: [Description]\n- [ ] Feature 3: [Description]\n\n*Generated by SPARC Workflow Engine - Design Phase*\n</code></pre>"},{"location":"technical/SPARC_TECHNICAL_SPECIFICATION/#2-pseudocode-generation","title":"2. Pseudocode Generation","text":"<p>Input: User input + requirements artifact Output: Algorithmic pseudocode Template Structure:</p> <pre><code># Pseudocode\n\n## Algorithm Overview\nBased on requirements analysis, here's the high-level algorithm:\n\n</code></pre> <p>BEGIN   // Initialize system components   INITIALIZE components</p> <p>// Main processing loop   FOR each input item DO     PROCESS item according to requirements     VALIDATE output     STORE result   END FOR</p> <p>// Cleanup and finalization   CLEANUP resources   RETURN results END</p> <pre><code>\n## Key Functions\n- `processItem()`: Core processing logic\n- `validateOutput()`: Result validation\n- `storeResult()`: Data persistence\n\n*Generated by SPARC Workflow Engine - Pseudocode Phase*\n</code></pre>"},{"location":"technical/SPARC_TECHNICAL_SPECIFICATION/#3-architecture-generation","title":"3. Architecture Generation","text":"<p>Input: User input + all previous artifacts Output: System architecture and development guidelines Template Structure:</p> <pre><code># System Architecture\n\n## Overview\nHigh-level system design based on requirements and pseudocode analysis.\n\n## Components\n- **Core Module**: Main processing logic\n- **Data Layer**: Data persistence and retrieval\n- **Interface Layer**: External API and user interface\n- **Validation Layer**: Input/output validation\n\n## Dependencies\n- Framework: [To be specified]\n- Database: [To be specified]\n- External APIs: [To be identified]\n\n## Data Flow\n1. Input \u2192 Validation Layer\n2. Validation \u2192 Core Module\n3. Core Module \u2192 Data Layer\n4. Data Layer \u2192 Interface Layer\n5. Interface Layer \u2192 Output\n\n*Generated by SPARC Workflow Engine - Architecture Phase*\n</code></pre>"},{"location":"technical/SPARC_TECHNICAL_SPECIFICATION/#4-implementation-generation","title":"4. Implementation Generation","text":"<p>Input: User input + design artifacts Output: Generated source code and configuration Template Structure:</p> <pre><code># Implementation\n\n## Generated Code Structure\nBased on the design artifacts, here's the implementation:\n\n```typescript\n// Main implementation file\nexport class {ClassName} {\n  constructor() {\n    // Initialize based on architecture\n  }\n\n  async process(input: any): Promise&lt;any&gt; {\n    // Implementation based on pseudocode\n    return this.validateAndStore(input);\n  }\n\n  private validateAndStore(input: any): any {\n    // Validation and storage logic\n    return input;\n  }\n}\n</code></pre>"},{"location":"technical/SPARC_TECHNICAL_SPECIFICATION/#configuration-files","title":"Configuration Files","text":"<ul> <li>Package configuration</li> <li>Environment setup</li> <li>Build configuration</li> </ul> <p>Generated by SPARC Workflow Engine - Build Phase</p> <pre><code>\n## File System Integration\n\n### Directory Structure\n\n</code></pre> <p>workspace-root/ \u2514\u2500\u2500 .nys/                                    # SPARC workflow data directory     \u251c\u2500\u2500 {issue-id}/                          # Issue-specific folder     \u2502   \u251c\u2500\u2500 requirements.md                  # Requirements specification     \u2502   \u251c\u2500\u2500 guidelines.md                    # Development guidelines     \u2502   \u251c\u2500\u2500 pseudocode.md                    # Algorithm pseudocode     \u2502   \u251c\u2500\u2500 architecture.md                  # System architecture     \u2502   \u251c\u2500\u2500 implementation.md                # Generated implementation     \u2502   \u251c\u2500\u2500 tests.md                         # Test suite     \u2502   \u2514\u2500\u2500 notes.md                         # Debug notes     \u251c\u2500\u2500 {issue-id}-workflow.json             # Workflow state file     \u2514\u2500\u2500 {other-issue-id}/                    # Additional issue folders</p> <pre><code>\n### State Persistence Strategy\n\n**Dual Persistence Model**:\n\n1. **JSON State File**: `{issue-id}-workflow.json`\n   - Complete workflow state serialization\n   - Metadata and progress tracking\n   - Artifact references and timestamps\n\n2. **Markdown Artifact Files**: Individual `.md` files\n   - Human-readable content\n   - Version control friendly\n   - Direct editing capability\n\n### File Operations\n\n```typescript\n// State Loading\nprivate async loadWorkflowState(issueId: string): Promise&lt;SPARCWorkflowState | null&gt; {\n  if (!this._nysFolder) return null;\n\n  try {\n    const stateFile = vscode.Uri.joinPath(this._nysFolder, `${issueId}-workflow.json`);\n    const content = await vscode.workspace.fs.readFile(stateFile);\n    return JSON.parse(content.toString());\n  } catch {\n    return null; // File doesn't exist or is corrupted\n  }\n}\n\n// State Saving\nprivate async saveWorkflowState(state: SPARCWorkflowState): Promise&lt;void&gt; {\n  if (!this._nysFolder) return;\n\n  // Save state file\n  const stateFile = vscode.Uri.joinPath(this._nysFolder, `${state.issueId}-workflow.json`);\n  const content = JSON.stringify(state, null, 2);\n  await vscode.workspace.fs.writeFile(stateFile, Buffer.from(content, 'utf8'));\n\n  // Save individual artifact files\n  await this.saveArtifacts(state);\n}\n\n// Artifact Saving\nprivate async saveArtifacts(state: SPARCWorkflowState): Promise&lt;void&gt; {\n  if (!this._nysFolder) return;\n\n  const issueFolder = vscode.Uri.joinPath(this._nysFolder, state.issueId);\n\n  // Create issue folder if it doesn't exist\n  try {\n    await vscode.workspace.fs.stat(issueFolder);\n  } catch {\n    await vscode.workspace.fs.createDirectory(issueFolder);\n  }\n\n  // Save each artifact as a separate file\n  for (const [key, content] of Object.entries(state.artifacts)) {\n    if (content) {\n      const fileName = this.getArtifactFileName(key);\n      const filePath = vscode.Uri.joinPath(issueFolder, fileName);\n      await vscode.workspace.fs.writeFile(filePath, Buffer.from(content, 'utf8'));\n    }\n  }\n}\n</code></pre>"},{"location":"technical/SPARC_TECHNICAL_SPECIFICATION/#error-handling-and-validation","title":"Error Handling and Validation","text":""},{"location":"technical/SPARC_TECHNICAL_SPECIFICATION/#error-types","title":"Error Types","text":"<ol> <li>FileSystemError: Issues with file operations</li> <li>ValidationError: Invalid input or state</li> <li>WorkflowError: Workflow logic violations</li> <li>ArtifactError: Artifact generation failures</li> </ol>"},{"location":"technical/SPARC_TECHNICAL_SPECIFICATION/#error-handling-strategy","title":"Error Handling Strategy","text":"<pre><code>try {\n  const state = await engine.processIssue(issueId, mode, userInput);\n  return state;\n} catch (error) {\n  console.error('SPARC workflow error:', error);\n\n  // Specific error handling\n  if (error instanceof FileSystemError) {\n    // Handle file system issues\n    await this.handleFileSystemError(error);\n  } else if (error instanceof ValidationError) {\n    // Handle validation issues\n    await this.handleValidationError(error);\n  } else if (error instanceof WorkflowError) {\n    // Handle workflow logic issues\n    await this.handleWorkflowError(error);\n  }\n\n  // Re-throw for upstream handling\n  throw error;\n}\n</code></pre>"},{"location":"technical/SPARC_TECHNICAL_SPECIFICATION/#performance-considerations","title":"Performance Considerations","text":""},{"location":"technical/SPARC_TECHNICAL_SPECIFICATION/#optimization-strategies","title":"Optimization Strategies","text":"<ol> <li>Lazy Loading: Load artifacts only when needed</li> <li>Caching: Cache frequently accessed workflow states</li> <li>Batch Operations: Group file operations when possible</li> <li>Async Operations: All I/O operations are asynchronous</li> </ol>"},{"location":"technical/SPARC_TECHNICAL_SPECIFICATION/#memory-management","title":"Memory Management","text":"<pre><code>class SPARCWorkflowEngine {\n  private _stateCache: Map&lt;string, SPARCWorkflowState&gt; = new Map();\n  private _cacheTimeout: number = 300000; // 5 minutes\n\n  private async getCachedState(issueId: string): Promise&lt;SPARCWorkflowState | null&gt; {\n    const cached = this._stateCache.get(issueId);\n    if (cached &amp;&amp; (Date.now() - cached.updatedAt.getTime()) &lt; this._cacheTimeout) {\n      return cached;\n    }\n    return null;\n  }\n\n  private setCachedState(state: SPARCWorkflowState): void {\n    this._stateCache.set(state.issueId, state);\n  }\n}\n</code></pre>"},{"location":"technical/SPARC_TECHNICAL_SPECIFICATION/#security-considerations","title":"Security Considerations","text":""},{"location":"technical/SPARC_TECHNICAL_SPECIFICATION/#input-sanitization","title":"Input Sanitization","text":"<pre><code>private sanitizeInput(input: string): string {\n  // Remove potentially dangerous characters\n  return input\n    .replace(/[&lt;&gt;]/g, '') // Remove HTML tags\n    .replace(/javascript:/gi, '') // Remove javascript: protocols\n    .trim();\n}\n</code></pre>"},{"location":"technical/SPARC_TECHNICAL_SPECIFICATION/#file-system-security","title":"File System Security","text":"<ul> <li>Validate file paths to prevent directory traversal</li> <li>Limit file sizes to prevent DoS attacks</li> <li>Sanitize file names to prevent conflicts</li> </ul>"},{"location":"technical/SPARC_TECHNICAL_SPECIFICATION/#testing-strategy","title":"Testing Strategy","text":""},{"location":"technical/SPARC_TECHNICAL_SPECIFICATION/#unit-tests","title":"Unit Tests","text":"<pre><code>describe('SPARCWorkflowEngine', () =&gt; {\n  let engine: SPARCWorkflowEngine;\n  let mockWorkspace: vscode.Uri;\n\n  beforeEach(() =&gt; {\n    mockWorkspace = vscode.Uri.file('/mock/workspace');\n    engine = new SPARCWorkflowEngine(mockWorkspace);\n  });\n\n  describe('processIssue', () =&gt; {\n    it('should create initial state for new issue', async () =&gt; {\n      const state = await engine.processIssue('test-issue', 'design', 'Test input');\n\n      expect(state.issueId).toBe('test-issue');\n      expect(state.mode).toBe('design');\n      expect(state.currentPhase).toBe('specification');\n      expect(state.progress).toBe(0);\n    });\n\n    it('should progress through design phases', async () =&gt; {\n      // Test phase progression\n      let state = await engine.processIssue('test-issue', 'design', 'Initial requirements');\n      expect(state.currentPhase).toBe('pseudocode');\n      expect(state.progress).toBe(25);\n\n      state = await engine.processIssue('test-issue', 'design', 'Add pseudocode');\n      expect(state.currentPhase).toBe('architecture');\n      expect(state.progress).toBe(50);\n    });\n  });\n});\n</code></pre>"},{"location":"technical/SPARC_TECHNICAL_SPECIFICATION/#integration-tests","title":"Integration Tests","text":"<pre><code>describe('SPARCWorkflowEngine Integration', () =&gt; {\n  it('should persist and restore workflow state', async () =&gt; {\n    // Create workflow state\n    const state1 = await engine.processIssue('integration-test', 'design', 'Test input');\n\n    // Create new engine instance (simulates restart)\n    const engine2 = new SPARCWorkflowEngine(mockWorkspace);\n\n    // Process same issue\n    const state2 = await engine2.processIssue('integration-test', 'design', 'Continue');\n\n    // Verify state persistence\n    expect(state2.issueId).toBe(state1.issueId);\n    expect(state2.artifacts.requirements).toBeDefined();\n  });\n});\n</code></pre>"},{"location":"technical/SPARC_TECHNICAL_SPECIFICATION/#future-enhancements","title":"Future Enhancements","text":""},{"location":"technical/SPARC_TECHNICAL_SPECIFICATION/#planned-features","title":"Planned Features","text":"<ol> <li>AI Integration: Connect with external AI services for enhanced artifact generation</li> <li>Template System: Customizable templates for different project types</li> <li>Collaboration: Multi-user workflow support</li> <li>Analytics: Workflow performance metrics and insights</li> <li>Plugin System: Extensible architecture for custom processors</li> </ol>"},{"location":"technical/SPARC_TECHNICAL_SPECIFICATION/#extension-points","title":"Extension Points","text":"<pre><code>interface SPARCWorkflowExtension {\n  name: string;\n  version: string;\n\n  // Custom artifact generators\n  generateRequirements?(input: string): Promise&lt;string&gt;;\n  generateImplementation?(input: string, artifacts: any): Promise&lt;string&gt;;\n\n  // Custom validators\n  validateState?(state: SPARCWorkflowState): Promise&lt;boolean&gt;;\n\n  // Custom processors\n  processCustomPhase?(state: SPARCWorkflowState, input: string): Promise&lt;void&gt;;\n}\n</code></pre>"},{"location":"technical/SPARC_TECHNICAL_SPECIFICATION/#conclusion","title":"Conclusion","text":"<p>The SPARC Workflow Engine represents a sophisticated approach to systematic software development, providing structure, traceability, and automation to the development process. Its modular architecture, comprehensive artifact generation, and robust state management make it a powerful tool for issue-driven development workflows.</p> <p>The engine's design emphasizes extensibility, allowing for future enhancements while maintaining backward compatibility and performance. Its dual persistence model ensures both machine-readable state management and human-editable artifact files, making it suitable for both automated and manual development processes.</p>"},{"location":"user-guide/SPARC_WORKFLOW_ENGINE_DOCUMENTATION/","title":"SPARC Workflow Engine - Comprehensive Documentation","text":""},{"location":"user-guide/SPARC_WORKFLOW_ENGINE_DOCUMENTATION/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Overview</li> <li>Architecture</li> <li>Core Components</li> <li>Workflow Phases</li> <li>API Reference</li> <li>Data Structures</li> <li>File System Integration</li> <li>Usage Examples</li> <li>Extension Points</li> <li>Best Practices</li> </ol>"},{"location":"user-guide/SPARC_WORKFLOW_ENGINE_DOCUMENTATION/#overview","title":"Overview","text":"<p>The SPARC Workflow Engine is the core orchestration system that implements the SPARC framework (Specification \u2192 Pseudocode \u2192 Architecture \u2192 Refinement \u2192 Completion) for systematic, issue-driven development. It transforms user requirements into structured development artifacts through a guided workflow process.</p>"},{"location":"user-guide/SPARC_WORKFLOW_ENGINE_DOCUMENTATION/#key-features","title":"Key Features","text":"<ul> <li>Issue-Driven Development: Each development task becomes a tracked issue with persistent state</li> <li>Progressive Workflow: Structured progression through 5 distinct phases</li> <li>Artifact Generation: Automatic creation of requirements, code, tests, and documentation</li> <li>Persistent State Management: All workflow data stored in <code>.nys/</code> directory</li> <li>Mode-Aware Processing: Different behaviors for Design, Build, and Debug modes</li> </ul>"},{"location":"user-guide/SPARC_WORKFLOW_ENGINE_DOCUMENTATION/#architecture","title":"Architecture","text":"<pre><code>graph TB\n    A[User Input] --&gt; B[SPARC Workflow Engine]\n    B --&gt; C{Current Mode}\n    C --&gt;|Design| D[Design Phase Processor]\n    C --&gt;|Build| E[Build Phase Processor]\n    C --&gt;|Debug| F[Debug Phase Processor]\n\n    D --&gt; G[Specification Phase]\n    G --&gt; H[Pseudocode Phase]\n    H --&gt; I[Architecture Phase]\n    I --&gt; J[Refinement Phase]\n    J --&gt; K[Completion Phase]\n\n    E --&gt; L[Implementation Generator]\n    E --&gt; M[Test Generator]\n\n    F --&gt; N[Debug Analyzer]\n\n    K --&gt; O[Artifact Storage]\n    L --&gt; O\n    M --&gt; O\n    N --&gt; O\n\n    O --&gt; P[.nys/ Directory]\n    P --&gt; Q[requirements.md]\n    P --&gt; R[guidelines.md]\n    P --&gt; S[pseudocode.md]\n    P --&gt; T[architecture.md]\n    P --&gt; U[implementation.md]\n    P --&gt; V[tests.md]\n    P --&gt; W[notes.md]\n</code></pre>"},{"location":"user-guide/SPARC_WORKFLOW_ENGINE_DOCUMENTATION/#core-components","title":"Core Components","text":""},{"location":"user-guide/SPARC_WORKFLOW_ENGINE_DOCUMENTATION/#1-sparcworkflowengine-class","title":"1. SPARCWorkflowEngine Class","text":"<p>The main orchestrator class that manages the entire workflow lifecycle.</p> <pre><code>export class SPARCWorkflowEngine {\n  private _nysFolder: vscode.Uri | null = null;\n\n  constructor(private readonly workspaceRoot: vscode.Uri)\n\n  // Public API\n  public async processIssue(issueId: string, mode: 'design' | 'build' | 'debug', userInput: string): Promise&lt;SPARCWorkflowState&gt;\n\n  // Private methods\n  private async processDesignPhase(state: SPARCWorkflowState, userInput: string): Promise&lt;void&gt;\n  private async processBuildPhase(state: SPARCWorkflowState, userInput: string): Promise&lt;void&gt;\n  private async processDebugPhase(state: SPARCWorkflowState, userInput: string): Promise&lt;void&gt;\n}\n</code></pre>"},{"location":"user-guide/SPARC_WORKFLOW_ENGINE_DOCUMENTATION/#2-sparcworkflowstate-interface","title":"2. SPARCWorkflowState Interface","text":"<p>Defines the complete state of a workflow instance.</p> <pre><code>export interface SPARCWorkflowState {\n  issueId: string;                    // Unique identifier for the issue\n  currentPhase: 'specification' | 'pseudocode' | 'architecture' | 'refinement' | 'completion';\n  mode: 'design' | 'build' | 'debug'; // Current workflow mode\n  progress: number;                   // Progress percentage (0-100)\n  artifacts: {                        // Generated artifacts\n    requirements?: string;\n    guidelines?: string;\n    pseudocode?: string;\n    architecture?: string;\n    implementation?: string;\n    tests?: string;\n    notes?: string;\n  };\n  createdAt: Date;                    // Creation timestamp\n  updatedAt: Date;                    // Last update timestamp\n}\n</code></pre>"},{"location":"user-guide/SPARC_WORKFLOW_ENGINE_DOCUMENTATION/#workflow-phases","title":"Workflow Phases","text":""},{"location":"user-guide/SPARC_WORKFLOW_ENGINE_DOCUMENTATION/#design-mode-phases","title":"Design Mode Phases","text":"<p>The Design mode follows a strict 5-phase progression:</p>"},{"location":"user-guide/SPARC_WORKFLOW_ENGINE_DOCUMENTATION/#1-specification-phase-0-25","title":"1. Specification Phase (0-25%)","text":"<p>Purpose: Extract and formalize requirements from user input Input: Raw user requirements/description Output: Structured requirements document Artifacts Generated: <code>requirements.md</code></p> <pre><code>private async generateRequirements(userInput: string): Promise&lt;string&gt; {\n  return `# Requirements Specification\n## User Input\n${userInput}\n## Extracted Requirements\n- Core functionality: [To be defined based on input analysis]\n- Technical constraints: [To be identified]\n- Performance requirements: [To be specified]\n- Integration points: [To be mapped]\n## Acceptance Criteria\n- [ ] Feature 1: [Description]\n- [ ] Feature 2: [Description]\n- [ ] Feature 3: [Description]`;\n}\n</code></pre>"},{"location":"user-guide/SPARC_WORKFLOW_ENGINE_DOCUMENTATION/#2-pseudocode-phase-25-50","title":"2. Pseudocode Phase (25-50%)","text":"<p>Purpose: Create high-level algorithm design Input: User input + requirements artifact Output: Algorithmic pseudocode Artifacts Generated: <code>pseudocode.md</code></p> <pre><code>private async generatePseudocode(userInput: string, requirements?: string): Promise&lt;string&gt; {\n  return `# Pseudocode\n## Algorithm Overview\nBased on requirements analysis, here's the high-level algorithm:\n\\`\\`\\`\nBEGIN\n  // Initialize system components\n  INITIALIZE components\n  // Main processing loop\n  FOR each input item DO\n    PROCESS item according to requirements\n    VALIDATE output\n    STORE result\n  END FOR\n  // Cleanup and finalization\n  CLEANUP resources\n  RETURN results\nEND\n\\`\\`\\``;\n}\n</code></pre>"},{"location":"user-guide/SPARC_WORKFLOW_ENGINE_DOCUMENTATION/#3-architecture-phase-50-75","title":"3. Architecture Phase (50-75%)","text":"<p>Purpose: Design system architecture and components Input: User input + all previous artifacts Output: System architecture and development guidelines Artifacts Generated: <code>architecture.md</code>, <code>guidelines.md</code></p> <pre><code>private async generateArchitecture(userInput: string, artifacts: any): Promise&lt;string&gt; {\n  return `# System Architecture\n## Overview\nHigh-level system design based on requirements and pseudocode analysis.\n## Components\n- **Core Module**: Main processing logic\n- **Data Layer**: Data persistence and retrieval\n- **Interface Layer**: External API and user interface\n- **Validation Layer**: Input/output validation\n## Dependencies\n- Framework: [To be specified]\n- Database: [To be specified]\n- External APIs: [To be identified]`;\n}\n</code></pre>"},{"location":"user-guide/SPARC_WORKFLOW_ENGINE_DOCUMENTATION/#4-refinement-phase-75-100","title":"4. Refinement Phase (75-100%)","text":"<p>Purpose: Refine and finalize requirements based on architecture Input: User input + requirements artifact Output: Refined requirements Artifacts Generated: Updated <code>requirements.md</code></p> <pre><code>private async refineRequirements(requirements: string, userInput: string): Promise&lt;string&gt; {\n  return requirements + `\\n\\n## Refinements\\n[${new Date().toISOString()}] ${userInput}\\n\\n*Refined based on user feedback*`;\n}\n</code></pre>"},{"location":"user-guide/SPARC_WORKFLOW_ENGINE_DOCUMENTATION/#5-completion-phase-100","title":"5. Completion Phase (100%)","text":"<p>Purpose: Mark design phase as complete Input: All design artifacts Output: Design completion status Next: Ready for Build mode</p>"},{"location":"user-guide/SPARC_WORKFLOW_ENGINE_DOCUMENTATION/#build-mode","title":"Build Mode","text":"<p>Prerequisites: Design phase must be complete (currentPhase === 'completion') Purpose: Generate implementation code and tests Artifacts Generated: <code>implementation.md</code>, <code>tests.md</code></p> <pre><code>private async processBuildPhase(state: SPARCWorkflowState, userInput: string): Promise&lt;void&gt; {\n  if (state.currentPhase !== 'completion') {\n    // Build phase requires design to be complete\n    state.artifacts.notes = (state.artifacts.notes || '') + \n      `\\n[${new Date().toISOString()}] Build requested but design incomplete. Current phase: ${state.currentPhase}`;\n    return;\n  }\n\n  // Generate implementation based on design artifacts\n  state.artifacts.implementation = await this.generateImplementation(userInput, state.artifacts);\n  state.artifacts.tests = await this.generateTests(userInput, state.artifacts);\n\n  state.progress = 100;\n}\n</code></pre>"},{"location":"user-guide/SPARC_WORKFLOW_ENGINE_DOCUMENTATION/#debug-mode","title":"Debug Mode","text":"<p>Purpose: Analyze and debug existing code/artifacts Input: Any existing artifacts + debug request Output: Debug analysis and recommendations Artifacts Generated: Updated <code>notes.md</code></p> <pre><code>private async processDebugPhase(state: SPARCWorkflowState, userInput: string): Promise&lt;void&gt; {\n  // Debug phase can work with any existing artifacts\n  const debugNotes = await this.analyzeAndDebug(userInput, state.artifacts);\n  state.artifacts.notes = (state.artifacts.notes || '') + \n    `\\n[${new Date().toISOString()}] Debug Analysis:\\n${debugNotes}`;\n}\n</code></pre>"},{"location":"user-guide/SPARC_WORKFLOW_ENGINE_DOCUMENTATION/#api-reference","title":"API Reference","text":""},{"location":"user-guide/SPARC_WORKFLOW_ENGINE_DOCUMENTATION/#main-processing-method","title":"Main Processing Method","text":"<pre><code>public async processIssue(\n  issueId: string, \n  mode: 'design' | 'build' | 'debug', \n  userInput: string\n): Promise&lt;SPARCWorkflowState&gt;\n</code></pre> <p>Parameters: - <code>issueId</code>: Unique identifier for the issue - <code>mode</code>: Current workflow mode (design/build/debug) - <code>userInput</code>: User's input/request for processing</p> <p>Returns: - <code>Promise&lt;SPARCWorkflowState&gt;</code>: Updated workflow state with generated artifacts</p> <p>Example Usage:</p> <pre><code>const engine = new SPARCWorkflowEngine(workspaceRoot);\nconst state = await engine.processIssue('issue-123', 'design', 'Create a user authentication system');\nconsole.log(`Current phase: ${state.currentPhase}, Progress: ${state.progress}%`);\n</code></pre>"},{"location":"user-guide/SPARC_WORKFLOW_ENGINE_DOCUMENTATION/#data-structures","title":"Data Structures","text":""},{"location":"user-guide/SPARC_WORKFLOW_ENGINE_DOCUMENTATION/#workflow-state-structure","title":"Workflow State Structure","text":"<pre><code>interface SPARCWorkflowState {\n  issueId: string;                    // \"issue-1234567890\"\n  currentPhase: string;               // \"specification\" | \"pseudocode\" | \"architecture\" | \"refinement\" | \"completion\"\n  mode: string;                       // \"design\" | \"build\" | \"debug\"\n  progress: number;                   // 0-100\n  artifacts: {\n    requirements?: string;            // Markdown requirements document\n    guidelines?: string;              // Markdown development guidelines\n    pseudocode?: string;              // Markdown pseudocode document\n    architecture?: string;            // Markdown architecture document\n    implementation?: string;          // Markdown implementation document\n    tests?: string;                   // Markdown test suite document\n    notes?: string;                   // Markdown debug notes\n  };\n  createdAt: Date;                    // ISO timestamp\n  updatedAt: Date;                    // ISO timestamp\n}\n</code></pre>"},{"location":"user-guide/SPARC_WORKFLOW_ENGINE_DOCUMENTATION/#artifact-file-mapping","title":"Artifact File Mapping","text":"Artifact Key File Name Purpose <code>requirements</code> <code>requirements.md</code> Technical specifications and acceptance criteria <code>guidelines</code> <code>guidelines.md</code> Coding standards and development guidelines <code>pseudocode</code> <code>pseudocode.md</code> Algorithm design and logic flow <code>architecture</code> <code>architecture.md</code> System design and component structure <code>implementation</code> <code>implementation.md</code> Generated source code and configuration <code>tests</code> <code>tests.md</code> Test suites and validation code <code>notes</code> <code>notes.md</code> Debug analysis and iteration notes"},{"location":"user-guide/SPARC_WORKFLOW_ENGINE_DOCUMENTATION/#file-system-integration","title":"File System Integration","text":""},{"location":"user-guide/SPARC_WORKFLOW_ENGINE_DOCUMENTATION/#directory-structure","title":"Directory Structure","text":"<pre><code>workspace-root/\n\u2514\u2500\u2500 .nys/                           # SPARC workflow data directory\n    \u251c\u2500\u2500 issue-1234567890/           # Issue-specific folder\n    \u2502   \u251c\u2500\u2500 requirements.md         # Requirements specification\n    \u2502   \u251c\u2500\u2500 guidelines.md           # Development guidelines\n    \u2502   \u251c\u2500\u2500 pseudocode.md           # Algorithm pseudocode\n    \u2502   \u251c\u2500\u2500 architecture.md         # System architecture\n    \u2502   \u251c\u2500\u2500 implementation.md       # Generated implementation\n    \u2502   \u251c\u2500\u2500 tests.md                # Test suite\n    \u2502   \u2514\u2500\u2500 notes.md                # Debug notes\n    \u251c\u2500\u2500 issue-1234567890-workflow.json  # Workflow state file\n    \u251c\u2500\u2500 issue-0987654321/           # Another issue folder\n    \u2514\u2500\u2500 issue-0987654321-workflow.json\n</code></pre>"},{"location":"user-guide/SPARC_WORKFLOW_ENGINE_DOCUMENTATION/#state-persistence","title":"State Persistence","text":"<p>The engine maintains two types of persistence:</p> <ol> <li>Workflow State File: <code>{issueId}-workflow.json</code></li> <li>Contains complete workflow state</li> <li>Includes metadata, progress, and artifact references</li> <li> <p>Updated on every workflow operation</p> </li> <li> <p>Artifact Files: Individual <code>.md</code> files in issue folders</p> </li> <li>Human-readable artifact content</li> <li>Version-controlled friendly</li> <li>Directly editable by developers</li> </ol>"},{"location":"user-guide/SPARC_WORKFLOW_ENGINE_DOCUMENTATION/#file-operations","title":"File Operations","text":"<pre><code>// Load workflow state\nprivate async loadWorkflowState(issueId: string): Promise&lt;SPARCWorkflowState | null&gt; {\n  const stateFile = vscode.Uri.joinPath(this._nysFolder, `${issueId}-workflow.json`);\n  const content = await vscode.workspace.fs.readFile(stateFile);\n  return JSON.parse(content.toString());\n}\n\n// Save workflow state and artifacts\nprivate async saveWorkflowState(state: SPARCWorkflowState): Promise&lt;void&gt; {\n  // Save state file\n  const stateFile = vscode.Uri.joinPath(this._nysFolder, `${state.issueId}-workflow.json`);\n  const content = JSON.stringify(state, null, 2);\n  await vscode.workspace.fs.writeFile(stateFile, Buffer.from(content, 'utf8'));\n\n  // Save individual artifact files\n  await this.saveArtifacts(state);\n}\n</code></pre>"},{"location":"user-guide/SPARC_WORKFLOW_ENGINE_DOCUMENTATION/#usage-examples","title":"Usage Examples","text":""},{"location":"user-guide/SPARC_WORKFLOW_ENGINE_DOCUMENTATION/#example-1-complete-design-workflow","title":"Example 1: Complete Design Workflow","text":"<pre><code>const engine = new SPARCWorkflowEngine(workspaceRoot);\n\n// Start design workflow\nlet state = await engine.processIssue('auth-system', 'design', 'Create a secure user authentication system');\nconsole.log(`Phase: ${state.currentPhase}, Progress: ${state.progress}%`); // Phase: pseudocode, Progress: 25%\n\n// Continue through phases\nstate = await engine.processIssue('auth-system', 'design', 'Add JWT token support');\nconsole.log(`Phase: ${state.currentPhase}, Progress: ${state.progress}%`); // Phase: architecture, Progress: 50%\n\nstate = await engine.processIssue('auth-system', 'design', 'Include password hashing with bcrypt');\nconsole.log(`Phase: ${state.currentPhase}, Progress: ${state.progress}%`); // Phase: refinement, Progress: 75%\n\nstate = await engine.processIssue('auth-system', 'design', 'Finalize requirements');\nconsole.log(`Phase: ${state.currentPhase}, Progress: ${state.progress}%`); // Phase: completion, Progress: 100%\n</code></pre>"},{"location":"user-guide/SPARC_WORKFLOW_ENGINE_DOCUMENTATION/#example-2-build-phase-implementation","title":"Example 2: Build Phase Implementation","text":"<pre><code>// After design is complete, switch to build mode\nconst state = await engine.processIssue('auth-system', 'build', 'Generate Express.js authentication middleware');\nconsole.log(`Generated artifacts: ${Object.keys(state.artifacts).join(', ')}`);\n// Output: Generated artifacts: requirements, guidelines, pseudocode, architecture, implementation, tests\n</code></pre>"},{"location":"user-guide/SPARC_WORKFLOW_ENGINE_DOCUMENTATION/#example-3-debug-phase-analysis","title":"Example 3: Debug Phase Analysis","text":"<pre><code>// Debug existing implementation\nconst state = await engine.processIssue('auth-system', 'debug', 'Fix JWT token expiration issue');\nconsole.log(`Debug notes updated: ${state.artifacts.notes?.includes('JWT token expiration')}`);\n</code></pre>"},{"location":"user-guide/SPARC_WORKFLOW_ENGINE_DOCUMENTATION/#extension-points","title":"Extension Points","text":""},{"location":"user-guide/SPARC_WORKFLOW_ENGINE_DOCUMENTATION/#custom-artifact-generators","title":"Custom Artifact Generators","text":"<p>The engine is designed for extensibility. You can override artifact generation methods:</p> <pre><code>class CustomSPARCWorkflowEngine extends SPARCWorkflowEngine {\n  protected async generateRequirements(userInput: string): Promise&lt;string&gt; {\n    // Custom requirements generation logic\n    return await this.callCustomAI(userInput);\n  }\n\n  protected async generateImplementation(userInput: string, artifacts: any): Promise&lt;string&gt; {\n    // Custom code generation with specific templates\n    return await this.generateWithCustomTemplates(userInput, artifacts);\n  }\n}\n</code></pre>"},{"location":"user-guide/SPARC_WORKFLOW_ENGINE_DOCUMENTATION/#integration-with-external-tools","title":"Integration with External Tools","text":"<pre><code>class IntegratedSPARCWorkflowEngine extends SPARCWorkflowEngine {\n  private async generateRequirements(userInput: string): Promise&lt;string&gt; {\n    // Integrate with external requirement analysis tools\n    const analysis = await this.externalRequirementAnalyzer.analyze(userInput);\n    return this.formatRequirements(analysis);\n  }\n\n  private async generateImplementation(userInput: string, artifacts: any): Promise&lt;string&gt; {\n    // Integrate with code generation services\n    const code = await this.codeGenerationService.generate(artifacts);\n    return code;\n  }\n}\n</code></pre>"},{"location":"user-guide/SPARC_WORKFLOW_ENGINE_DOCUMENTATION/#best-practices","title":"Best Practices","text":""},{"location":"user-guide/SPARC_WORKFLOW_ENGINE_DOCUMENTATION/#1-workflow-state-management","title":"1. Workflow State Management","text":"<ul> <li>Always check prerequisites: Build mode requires design completion</li> <li>Handle state transitions: Ensure proper phase progression</li> <li>Persist frequently: Save state after each significant operation</li> </ul>"},{"location":"user-guide/SPARC_WORKFLOW_ENGINE_DOCUMENTATION/#2-artifact-generation","title":"2. Artifact Generation","text":"<ul> <li>Use templates: Create reusable templates for consistent output</li> <li>Validate inputs: Ensure user input is properly sanitized</li> <li>Handle errors gracefully: Provide fallback content for failed generations</li> </ul>"},{"location":"user-guide/SPARC_WORKFLOW_ENGINE_DOCUMENTATION/#3-file-system-operations","title":"3. File System Operations","text":"<ul> <li>Atomic operations: Use transactions for multi-file operations</li> <li>Error handling: Handle file system errors gracefully</li> <li>Cleanup: Remove orphaned files when issues are deleted</li> </ul>"},{"location":"user-guide/SPARC_WORKFLOW_ENGINE_DOCUMENTATION/#4-performance-considerations","title":"4. Performance Considerations","text":"<ul> <li>Lazy loading: Load artifacts only when needed</li> <li>Caching: Cache frequently accessed workflow states</li> <li>Batch operations: Group file operations when possible</li> </ul>"},{"location":"user-guide/SPARC_WORKFLOW_ENGINE_DOCUMENTATION/#5-integration-guidelines","title":"5. Integration Guidelines","text":"<ul> <li>Async operations: All file operations are asynchronous</li> <li>Error propagation: Properly handle and propagate errors</li> <li>Resource cleanup: Ensure proper cleanup of resources</li> </ul>"},{"location":"user-guide/SPARC_WORKFLOW_ENGINE_DOCUMENTATION/#error-handling","title":"Error Handling","text":"<p>The engine includes comprehensive error handling:</p> <pre><code>try {\n  const state = await engine.processIssue(issueId, mode, userInput);\n  return state;\n} catch (error) {\n  console.error('SPARC workflow error:', error);\n  // Handle specific error types\n  if (error instanceof FileSystemError) {\n    // Handle file system errors\n  } else if (error instanceof ValidationError) {\n    // Handle validation errors\n  }\n  throw error;\n}\n</code></pre>"},{"location":"user-guide/SPARC_WORKFLOW_ENGINE_DOCUMENTATION/#conclusion","title":"Conclusion","text":"<p>The SPARC Workflow Engine provides a robust, extensible foundation for issue-driven development workflows. It transforms unstructured user requirements into systematic, traceable development processes through its 5-phase design methodology and comprehensive artifact generation system.</p> <p>The engine's modular architecture allows for easy extension and customization while maintaining consistency and reliability across different development scenarios.</p>"},{"location":"user-guide/issue-management/","title":"Issue Management Guide","text":"<p>Learn how to create, manage, and organize issues in the SPARC Workflow Engine.</p>"},{"location":"user-guide/issue-management/#understanding-issues","title":"\ud83d\udccb Understanding Issues","text":"<p>An issue in the SPARC Workflow Engine represents a development task or problem that needs to be solved. Each issue goes through the complete SPARC workflow (Design \u2192 Build \u2192 Debug) and maintains its own state, artifacts, and progress.</p>"},{"location":"user-guide/issue-management/#issue-structure","title":"Issue Structure","text":"<pre><code>Issue\n\u251c\u2500\u2500 Metadata\n\u2502   \u251c\u2500\u2500 ID (unique identifier)\n\u2502   \u251c\u2500\u2500 Title\n\u2502   \u251c\u2500\u2500 Description\n\u2502   \u251c\u2500\u2500 Created Date\n\u2502   \u2514\u2500\u2500 Updated Date\n\u251c\u2500\u2500 Workflow State\n\u2502   \u251c\u2500\u2500 Current Mode (Design/Build/Debug)\n\u2502   \u251c\u2500\u2500 Current Phase (Specification/Pseudocode/Architecture/Refinement/Completion)\n\u2502   \u251c\u2500\u2500 Progress (0-100%)\n\u2502   \u2514\u2500\u2500 Status (Open/In-Progress/Completed/Blocked)\n\u2514\u2500\u2500 Artifacts\n    \u251c\u2500\u2500 requirements.md\n    \u251c\u2500\u2500 guidelines.md\n    \u251c\u2500\u2500 pseudocode.md\n    \u251c\u2500\u2500 architecture.md\n    \u251c\u2500\u2500 implementation.md\n    \u251c\u2500\u2500 tests.md\n    \u2514\u2500\u2500 notes.md\n</code></pre>"},{"location":"user-guide/issue-management/#creating-issues","title":"\ud83c\udd95 Creating Issues","text":""},{"location":"user-guide/issue-management/#method-1-using-the-webview-interface","title":"Method 1: Using the Webview Interface","text":"<ol> <li>Open Mira Sidebar: Click the Mira icon in the VS Code activity bar</li> <li>Click \"+ New Issue\": Located in the issues panel header</li> <li>Fill in Details:</li> <li>Title: Brief, descriptive title (e.g., \"User Authentication System\")</li> <li>Description: Detailed description of the task (optional but recommended)</li> <li>Click \"Create Issue\": The issue will be created and automatically selected</li> </ol>"},{"location":"user-guide/issue-management/#method-2-using-vs-code-commands","title":"Method 2: Using VS Code Commands","text":"<ol> <li>Open Command Palette: <code>Ctrl+Shift+P</code> (Windows/Linux) or <code>Cmd+Shift+P</code> (Mac)</li> <li>Type: <code>Mira: Create New Issue</code></li> <li>Enter Details: Follow the prompts for title and description</li> </ol>"},{"location":"user-guide/issue-management/#method-3-programmatically-for-developers","title":"Method 3: Programmatically (for developers)","text":"<pre><code>// Create issue programmatically\nconst issueProvider = new IssueViewProvider(extensionUri);\nawait issueProvider.createIssue(\n  \"API Rate Limiting Implementation\",\n  \"Implement rate limiting for API endpoints to prevent abuse\"\n);\n</code></pre>"},{"location":"user-guide/issue-management/#issue-naming-best-practices","title":"\ud83d\udcdd Issue Naming Best Practices","text":""},{"location":"user-guide/issue-management/#good-issue-titles","title":"Good Issue Titles","text":"<ul> <li>\u2705 \"User Authentication System with JWT\"</li> <li>\u2705 \"Database Migration Script for User Schema\"</li> <li>\u2705 \"API Rate Limiting Implementation\"</li> <li>\u2705 \"Frontend Component Library Setup\"</li> </ul>"},{"location":"user-guide/issue-management/#poor-issue-titles","title":"Poor Issue Titles","text":"<ul> <li>\u274c \"Fix bug\"</li> <li>\u274c \"Update code\"</li> <li>\u274c \"New feature\"</li> <li>\u274c \"Authentication\"</li> </ul>"},{"location":"user-guide/issue-management/#good-descriptions","title":"Good Descriptions","text":"<pre><code>Create a comprehensive user authentication system that includes:\n\n- User registration with email verification\n- Secure login with JWT tokens\n- Password reset functionality\n- Role-based access control\n- Rate limiting for login attempts\n\nTechnical Requirements:\n- Use bcrypt for password hashing\n- JWT tokens with 24-hour expiration\n- Refresh token mechanism\n- Express.js with TypeScript\n- PostgreSQL database\n</code></pre>"},{"location":"user-guide/issue-management/#managing-issues","title":"\ud83d\udd0d Managing Issues","text":""},{"location":"user-guide/issue-management/#issue-list-view","title":"Issue List View","text":"<p>The issues panel shows all your issues with: - Title: Issue name - Mode Badge: Current workflow mode (Design/Build/Debug) - Status Badge: Current status (Open/In-Progress/Completed/Blocked) - Last Updated: When the issue was last modified</p>"},{"location":"user-guide/issue-management/#selecting-issues","title":"Selecting Issues","text":"<ul> <li>Click on an issue in the list to select it</li> <li>Active issue is highlighted in blue</li> <li>Chat context switches to the selected issue</li> <li>Mode and progress are displayed in the header</li> </ul>"},{"location":"user-guide/issue-management/#issue-status-management","title":"Issue Status Management","text":""},{"location":"user-guide/issue-management/#open-status","title":"Open Status","text":"<ul> <li>When: Newly created issues</li> <li>Meaning: Ready to start working</li> <li>Action: Begin with Design mode</li> </ul>"},{"location":"user-guide/issue-management/#in-progress-status","title":"In-Progress Status","text":"<ul> <li>When: Actively working on the issue</li> <li>Meaning: Currently being processed</li> <li>Action: Continue with current workflow</li> </ul>"},{"location":"user-guide/issue-management/#completed-status","title":"Completed Status","text":"<ul> <li>When: Issue is fully resolved</li> <li>Meaning: All phases complete, implementation done</li> <li>Action: Issue can be archived or closed</li> </ul>"},{"location":"user-guide/issue-management/#blocked-status","title":"Blocked Status","text":"<ul> <li>When: Issue cannot proceed due to dependencies</li> <li>Meaning: Waiting for external factors</li> <li>Action: Resolve blockers before continuing</li> </ul>"},{"location":"user-guide/issue-management/#file-organization","title":"\ud83d\udcc1 File Organization","text":""},{"location":"user-guide/issue-management/#issue-folder-structure","title":"Issue Folder Structure","text":"<p>Each issue creates a dedicated folder in the <code>.nys/</code> directory:</p> <pre><code>.nys/\n\u2514\u2500\u2500 issue-1234567890/                    # Issue-specific folder\n    \u251c\u2500\u2500 requirements.md                  # Requirements specification\n    \u251c\u2500\u2500 guidelines.md                    # Development guidelines\n    \u251c\u2500\u2500 pseudocode.md                    # Algorithm pseudocode\n    \u251c\u2500\u2500 architecture.md                  # System architecture\n    \u251c\u2500\u2500 implementation.md                # Generated implementation\n    \u251c\u2500\u2500 tests.md                         # Test suite\n    \u2514\u2500\u2500 notes.md                         # Debug notes and iterations\n\u2514\u2500\u2500 issue-1234567890-workflow.json       # Workflow state file\n</code></pre>"},{"location":"user-guide/issue-management/#artifact-files","title":"Artifact Files","text":"<p>Each artifact is saved as a separate Markdown file:</p> Artifact File Name Purpose Requirements <code>requirements.md</code> Technical specifications and acceptance criteria Guidelines <code>guidelines.md</code> Coding standards and development guidelines Pseudocode <code>pseudocode.md</code> Algorithm design and logic flow Architecture <code>architecture.md</code> System design and component structure Implementation <code>implementation.md</code> Generated source code and configuration Tests <code>tests.md</code> Test suites and validation code Notes <code>notes.md</code> Debug analysis and iteration notes"},{"location":"user-guide/issue-management/#issue-lifecycle","title":"\ud83d\udd04 Issue Lifecycle","text":""},{"location":"user-guide/issue-management/#1-creation","title":"1. Creation","text":"<ul> <li>Issue is created with initial metadata</li> <li>Status: Open</li> <li>Mode: Design (default)</li> <li>Progress: 0%</li> </ul>"},{"location":"user-guide/issue-management/#2-design-phase","title":"2. Design Phase","text":"<ul> <li>User provides requirements and specifications</li> <li>System generates design artifacts</li> <li>Progress: 0% \u2192 25% \u2192 50% \u2192 75% \u2192 100%</li> <li>Status: In-Progress</li> </ul>"},{"location":"user-guide/issue-management/#3-build-phase","title":"3. Build Phase","text":"<ul> <li>Design must be complete (100%)</li> <li>User requests implementation</li> <li>System generates code and tests</li> <li>Progress: 100% (implementation complete)</li> <li>Status: In-Progress</li> </ul>"},{"location":"user-guide/issue-management/#4-debug-phase","title":"4. Debug Phase","text":"<ul> <li>User identifies issues or requests analysis</li> <li>System analyzes and provides recommendations</li> <li>Debug notes are updated</li> <li>Status: In-Progress</li> </ul>"},{"location":"user-guide/issue-management/#5-completion","title":"5. Completion","text":"<ul> <li>All phases are complete</li> <li>Implementation is working</li> <li>Status: Completed</li> </ul>"},{"location":"user-guide/issue-management/#issue-organization-strategies","title":"\ud83c\udff7\ufe0f Issue Organization Strategies","text":""},{"location":"user-guide/issue-management/#by-project","title":"By Project","text":"<pre><code>Authentication System\n\u251c\u2500\u2500 User Registration\n\u251c\u2500\u2500 Login Implementation\n\u251c\u2500\u2500 Password Reset\n\u2514\u2500\u2500 JWT Token Management\n\nAPI Development\n\u251c\u2500\u2500 Rate Limiting\n\u251c\u2500\u2500 Error Handling\n\u251c\u2500\u2500 Documentation\n\u2514\u2500\u2500 Testing\n</code></pre>"},{"location":"user-guide/issue-management/#by-priority","title":"By Priority","text":"<pre><code>High Priority\n\u251c\u2500\u2500 Security Vulnerabilities\n\u251c\u2500\u2500 Critical Bugs\n\u2514\u2500\u2500 Performance Issues\n\nMedium Priority\n\u251c\u2500\u2500 Feature Requests\n\u251c\u2500\u2500 Code Improvements\n\u2514\u2500\u2500 Documentation Updates\n\nLow Priority\n\u251c\u2500\u2500 Nice-to-have Features\n\u251c\u2500\u2500 Code Refactoring\n\u2514\u2500\u2500 UI Improvements\n</code></pre>"},{"location":"user-guide/issue-management/#by-status","title":"By Status","text":"<pre><code>Active Issues\n\u251c\u2500\u2500 Currently Working On\n\u251c\u2500\u2500 In Review\n\u2514\u2500\u2500 Testing\n\nBacklog\n\u251c\u2500\u2500 Planned Features\n\u251c\u2500\u2500 Future Improvements\n\u2514\u2500\u2500 Research Items\n\nCompleted\n\u251c\u2500\u2500 Recently Finished\n\u251c\u2500\u2500 Archived\n\u2514\u2500\u2500 Closed\n</code></pre>"},{"location":"user-guide/issue-management/#issue-search-and-filtering","title":"\ud83d\udd0d Issue Search and Filtering","text":""},{"location":"user-guide/issue-management/#current-limitations","title":"Current Limitations","text":"<p>The current implementation shows all issues in a single list. Future versions will include: - Search by title or description - Filter by status, mode, or date - Sort by various criteria - Tag-based organization</p>"},{"location":"user-guide/issue-management/#workarounds","title":"Workarounds","text":"<ul> <li>Use descriptive titles for easy identification</li> <li>Include keywords in descriptions</li> <li>Use consistent naming conventions</li> <li>Organize by creation date (newest first)</li> </ul>"},{"location":"user-guide/issue-management/#issue-analytics","title":"\ud83d\udcca Issue Analytics","text":""},{"location":"user-guide/issue-management/#progress-tracking","title":"Progress Tracking","text":"<ul> <li>Visual Progress: Progress bar shows completion percentage</li> <li>Phase Indicators: Current SPARC phase is displayed</li> <li>Mode Status: Current workflow mode is shown</li> <li>Last Updated: Timestamp of last modification</li> </ul>"},{"location":"user-guide/issue-management/#artifact-status","title":"Artifact Status","text":"<ul> <li>Generated Artifacts: Shows which documents have been created</li> <li>File Sizes: Indicates the amount of content generated</li> <li>Update History: Tracks when artifacts were last modified</li> </ul>"},{"location":"user-guide/issue-management/#troubleshooting-issues","title":"\ud83d\udea8 Troubleshooting Issues","text":""},{"location":"user-guide/issue-management/#common-problems","title":"Common Problems","text":"<p>Issue not appearing in list - Check if the <code>.nys/</code> folder exists - Verify file permissions - Restart VS Code - Check the Output panel for errors</p> <p>Issue state not updating - Ensure you're working in the correct mode - Check if the issue is selected - Verify file system permissions - Look for error messages in the console</p> <p>Artifacts not generating - Ensure you're providing input in the chat - Check if the current phase allows artifact generation - Verify the workflow state is valid - Check for file system errors</p>"},{"location":"user-guide/issue-management/#recovery-procedures","title":"Recovery Procedures","text":"<p>Corrupted Issue State 1. Check the workflow JSON file for syntax errors 2. Delete the corrupted state file 3. Recreate the issue with the same title 4. The system will start fresh</p> <p>Missing Artifacts 1. Check if artifact files exist in the issue folder 2. Regenerate artifacts by providing input in the appropriate mode 3. The system will recreate missing files</p> <p>Lost Progress 1. Check the workflow state file for progress information 2. Review artifact files for completed work 3. Continue from the last known good state 4. The system will resume from the current phase</p>"},{"location":"user-guide/issue-management/#best-practices","title":"\ud83d\udca1 Best Practices","text":""},{"location":"user-guide/issue-management/#issue-creation","title":"Issue Creation","text":"<ul> <li>Be Specific: Use clear, descriptive titles and detailed descriptions</li> <li>Include Context: Provide background information and constraints</li> <li>Set Expectations: Define what success looks like</li> <li>Consider Dependencies: Mention any prerequisites or related issues</li> </ul>"},{"location":"user-guide/issue-management/#issue-management","title":"Issue Management","text":"<ul> <li>Regular Updates: Keep issues current with your progress</li> <li>Clear Status: Update status to reflect current state</li> <li>Document Decisions: Use the notes to track important decisions</li> <li>Archive Completed: Move finished issues to completed status</li> </ul>"},{"location":"user-guide/issue-management/#organization","title":"Organization","text":"<ul> <li>Consistent Naming: Use a consistent naming convention</li> <li>Logical Grouping: Group related issues together</li> <li>Priority Management: Focus on high-priority issues first</li> <li>Regular Cleanup: Archive or delete old, irrelevant issues</li> </ul> <p>Ready to dive deeper? Check out the Complete User Guide for comprehensive documentation.</p>"},{"location":"user-guide/quick-start/","title":"Quick Start Guide","text":"<p>Get up and running with the SPARC Workflow Engine in minutes.</p>"},{"location":"user-guide/quick-start/#installation-setup","title":"\ud83d\ude80 Installation &amp; Setup","text":""},{"location":"user-guide/quick-start/#prerequisites","title":"Prerequisites","text":"<ul> <li>Visual Studio Code 1.60.0 or newer</li> <li>Node.js and npm (for development)</li> <li>Git (for version control)</li> </ul>"},{"location":"user-guide/quick-start/#installation","title":"Installation","text":"<ol> <li>Install the Mira Extension:    ```bash    # From VS Code Marketplace    # Search for \"Mira\" in Extensions view and install</li> </ol> <p># Or install from VSIX    npx vsce package    # Then install the generated .vsix file    ```</p> <ol> <li>Open a Workspace:    <code>bash    # Open your project in VS Code    code /path/to/your/project</code></li> </ol>"},{"location":"user-guide/quick-start/#your-first-issue","title":"\ud83c\udfaf Your First Issue","text":""},{"location":"user-guide/quick-start/#step-1-create-an-issue","title":"Step 1: Create an Issue","text":"<ol> <li>Open the Mira sidebar (look for the Mira icon in the activity bar)</li> <li>Click \"+ New Issue\"</li> <li>Enter a title: <code>\"Create user authentication system\"</code></li> <li>Add description: <code>\"Build a secure login system with JWT tokens\"</code></li> <li>Click \"Create Issue\"</li> </ol>"},{"location":"user-guide/quick-start/#step-2-start-in-design-mode","title":"Step 2: Start in Design Mode","text":"<ol> <li>Select your newly created issue from the issues list</li> <li>Ensure Design mode is selected (\ud83c\udfa8 Design button should be active)</li> <li>Type in the chat: <code>\"I need a complete authentication system with user registration, login, and JWT token management\"</code></li> <li>Press Enter or click Send</li> </ol>"},{"location":"user-guide/quick-start/#step-3-progress-through-phases","title":"Step 3: Progress Through Phases","text":"<p>The system will automatically progress through the SPARC phases:</p> <ol> <li>Specification Phase (25%): Requirements are extracted and formalized</li> <li>Pseudocode Phase (50%): Algorithm design is created</li> <li>Architecture Phase (75%): System architecture is designed</li> <li>Refinement Phase (100%): Requirements are finalized</li> </ol> <p>Continue providing input to progress through each phase: - <code>\"Add password hashing with bcrypt\"</code> - <code>\"Include refresh token mechanism\"</code> - <code>\"Add rate limiting for login attempts\"</code></p>"},{"location":"user-guide/quick-start/#step-4-switch-to-build-mode","title":"Step 4: Switch to Build Mode","text":"<ol> <li>Once design is complete (100%), click \ud83d\udd28 Build mode</li> <li>Type: <code>\"Generate Express.js implementation with TypeScript\"</code></li> <li>The system will generate:</li> <li>Implementation code</li> <li>Test suites</li> <li>Configuration files</li> </ol>"},{"location":"user-guide/quick-start/#step-5-debug-and-refine","title":"Step 5: Debug and Refine","text":"<ol> <li>Switch to \ud83d\udc1b Debug mode</li> <li>Type: <code>\"Check for security vulnerabilities in the authentication flow\"</code></li> <li>The system will analyze and provide recommendations</li> </ol>"},{"location":"user-guide/quick-start/#generated-files","title":"\ud83d\udcc1 Generated Files","text":"<p>Your issue will create files in the <code>.nys/</code> directory:</p> <pre><code>.nys/\n\u2514\u2500\u2500 issue-1234567890/\n    \u251c\u2500\u2500 requirements.md      # Technical specifications\n    \u251c\u2500\u2500 guidelines.md        # Development guidelines\n    \u251c\u2500\u2500 pseudocode.md        # Algorithm design\n    \u251c\u2500\u2500 architecture.md      # System architecture\n    \u251c\u2500\u2500 implementation.md    # Generated code\n    \u251c\u2500\u2500 tests.md            # Test suites\n    \u2514\u2500\u2500 notes.md            # Debug notes\n</code></pre>"},{"location":"user-guide/quick-start/#understanding-the-interface","title":"\ud83c\udfa8 Understanding the Interface","text":""},{"location":"user-guide/quick-start/#issues-panel","title":"Issues Panel","text":"<ul> <li>Issues List: Shows all your issues with status indicators</li> <li>Mode Badges: Color-coded indicators (Design=Blue, Build=Orange, Debug=Red)</li> <li>Status Indicators: Open, In-Progress, Completed, Blocked</li> </ul>"},{"location":"user-guide/quick-start/#chat-interface","title":"Chat Interface","text":"<ul> <li>Mode Selector: Switch between Design, Build, and Debug modes</li> <li>Chat History: All conversations are saved with timestamps</li> <li>Context Awareness: Responses are tailored to your current mode and issue</li> </ul>"},{"location":"user-guide/quick-start/#progress-tracking","title":"Progress Tracking","text":"<ul> <li>Phase Indicators: Shows current SPARC phase</li> <li>Progress Bar: Visual progress through the workflow</li> <li>Artifact Status: Shows which documents have been generated</li> </ul>"},{"location":"user-guide/quick-start/#common-workflows","title":"\ud83d\udd04 Common Workflows","text":""},{"location":"user-guide/quick-start/#new-feature-development","title":"New Feature Development","text":"<ol> <li>Create issue \u2192 Design mode \u2192 Build mode \u2192 Debug mode</li> <li>Each mode builds upon the previous work</li> <li>All artifacts are automatically generated and stored</li> </ol>"},{"location":"user-guide/quick-start/#bug-fixing","title":"Bug Fixing","text":"<ol> <li>Create issue describing the bug</li> <li>Use Debug mode to analyze the problem</li> <li>Switch to Build mode to implement fixes</li> <li>Use Design mode to update documentation if needed</li> </ol>"},{"location":"user-guide/quick-start/#code-review","title":"Code Review","text":"<ol> <li>Create issue for code review</li> <li>Use Debug mode to analyze code quality</li> <li>Generate recommendations and improvements</li> <li>Use Build mode to implement suggested changes</li> </ol>"},{"location":"user-guide/quick-start/#troubleshooting","title":"\ud83d\udea8 Troubleshooting","text":""},{"location":"user-guide/quick-start/#common-issues","title":"Common Issues","text":"<p>\"No active issue found\" - Make sure you've created and selected an issue - Check that the issue is visible in the issues panel</p> <p>\"Build requested but design incomplete\" - Complete the design phase first (reach 100% progress) - Ensure all SPARC phases are finished</p> <p>\"Extension not responding\" - Restart VS Code - Check the Output panel for error messages - Ensure you have a workspace folder open</p>"},{"location":"user-guide/quick-start/#getting-help","title":"Getting Help","text":"<ul> <li>Check the User Guide for detailed information</li> <li>Review Examples for common use cases</li> <li>Open an Issue for bugs or feature requests</li> </ul>"},{"location":"user-guide/quick-start/#next-steps","title":"\ud83c\udf89 Next Steps","text":"<p>Now that you're up and running:</p> <ol> <li>Explore the User Guide: Learn about advanced features and customization</li> <li>Try Examples: Work through the example scenarios</li> <li>Customize: Learn how to extend the engine for your specific needs</li> <li>Contribute: Help improve Mira by contributing to the project</li> </ol> <p>Ready to dive deeper? Check out the Complete User Guide for comprehensive documentation.</p>"},{"location":"user-guide/workflow-modes/","title":"Workflow Modes Guide","text":"<p>Understanding the three core modes of the SPARC Workflow Engine: Design, Build, and Debug.</p>"},{"location":"user-guide/workflow-modes/#design-mode","title":"\ud83c\udfa8 Design Mode","text":"<p>Purpose: Transform user requirements into structured specifications and architectural designs.</p>"},{"location":"user-guide/workflow-modes/#when-to-use-design-mode","title":"When to Use Design Mode","text":"<ul> <li>Starting a new project or feature</li> <li>Defining requirements and specifications</li> <li>Creating system architecture</li> <li>Planning implementation approach</li> </ul>"},{"location":"user-guide/workflow-modes/#sparc-phases-in-design-mode","title":"SPARC Phases in Design Mode","text":""},{"location":"user-guide/workflow-modes/#1-specification-phase-0-25","title":"1. Specification Phase (0-25%)","text":"<p>Input: Raw user requirements Process: Extract and formalize requirements Output: <code>requirements.md</code></p> <p>Example:</p> <pre><code>User Input: \"Create a user authentication system\"\n\u2193\nGenerated: requirements.md with:\n- Core functionality requirements\n- Technical constraints\n- Performance requirements\n- Integration points\n- Acceptance criteria\n</code></pre>"},{"location":"user-guide/workflow-modes/#2-pseudocode-phase-25-50","title":"2. Pseudocode Phase (25-50%)","text":"<p>Input: User input + requirements Process: Create algorithmic design Output: <code>pseudocode.md</code></p> <p>Example:</p> <pre><code>User Input: \"Add JWT token support\"\n\u2193\nGenerated: pseudocode.md with:\n- High-level algorithm\n- Key functions\n- Data flow logic\n- Processing steps\n</code></pre>"},{"location":"user-guide/workflow-modes/#3-architecture-phase-50-75","title":"3. Architecture Phase (50-75%)","text":"<p>Input: User input + previous artifacts Process: Design system architecture Output: <code>architecture.md</code> + <code>guidelines.md</code></p> <p>Example:</p> <pre><code>User Input: \"Include password hashing with bcrypt\"\n\u2193\nGenerated: architecture.md with:\n- System components\n- Component interactions\n- Dependencies\n- Data flow\n+ guidelines.md with:\n- Coding standards\n- Architecture guidelines\n- Testing guidelines\n</code></pre>"},{"location":"user-guide/workflow-modes/#4-refinement-phase-75-100","title":"4. Refinement Phase (75-100%)","text":"<p>Input: User input + requirements Process: Refine and finalize requirements Output: Updated <code>requirements.md</code></p> <p>Example:</p> <pre><code>User Input: \"Finalize requirements\"\n\u2193\nGenerated: Updated requirements.md with:\n- Refined specifications\n- Additional details\n- Final acceptance criteria\n</code></pre>"},{"location":"user-guide/workflow-modes/#5-completion-phase-100","title":"5. Completion Phase (100%)","text":"<p>Status: Design phase complete Next: Ready for Build mode</p>"},{"location":"user-guide/workflow-modes/#design-mode-best-practices","title":"Design Mode Best Practices","text":"<ul> <li>Be specific: Provide detailed requirements and constraints</li> <li>Iterate: Use multiple inputs to refine your design</li> <li>Think ahead: Consider implementation challenges during design</li> <li>Document decisions: The system will track all your design decisions</li> </ul>"},{"location":"user-guide/workflow-modes/#build-mode","title":"\ud83d\udd28 Build Mode","text":"<p>Purpose: Generate implementation code, tests, and configuration files based on design artifacts.</p>"},{"location":"user-guide/workflow-modes/#prerequisites","title":"Prerequisites","text":"<ul> <li>Design phase must be complete (100% progress)</li> <li>All design artifacts must be generated</li> </ul>"},{"location":"user-guide/workflow-modes/#when-to-use-build-mode","title":"When to Use Build Mode","text":"<ul> <li>Design phase is complete</li> <li>Ready to implement the solution</li> <li>Need to generate code and tests</li> <li>Want to create project structure</li> </ul>"},{"location":"user-guide/workflow-modes/#build-mode-process","title":"Build Mode Process","text":""},{"location":"user-guide/workflow-modes/#implementation-generation","title":"Implementation Generation","text":"<p>Input: User input + all design artifacts Process: Generate source code and configuration Output: <code>implementation.md</code></p> <p>Example:</p> <pre><code>User Input: \"Generate Express.js implementation with TypeScript\"\n\u2193\nGenerated: implementation.md with:\n- TypeScript source code\n- Express.js controllers and services\n- Configuration files\n- Package.json dependencies\n</code></pre>"},{"location":"user-guide/workflow-modes/#test-generation","title":"Test Generation","text":"<p>Input: User input + design artifacts Process: Create comprehensive test suites Output: <code>tests.md</code></p> <p>Example:</p> <pre><code>User Input: \"Add unit tests for authentication\"\n\u2193\nGenerated: tests.md with:\n- Unit tests for all functions\n- Integration tests\n- End-to-end tests\n- Test configuration\n</code></pre>"},{"location":"user-guide/workflow-modes/#build-mode-best-practices","title":"Build Mode Best Practices","text":"<ul> <li>Be specific about technology stack: Mention frameworks, languages, databases</li> <li>Include testing requirements: Specify what types of tests you need</li> <li>Consider deployment: Mention deployment and environment requirements</li> <li>Review generated code: Always review and validate generated implementations</li> </ul>"},{"location":"user-guide/workflow-modes/#debug-mode","title":"\ud83d\udc1b Debug Mode","text":"<p>Purpose: Analyze existing code, identify issues, and provide recommendations for fixes and improvements.</p>"},{"location":"user-guide/workflow-modes/#when-to-use-debug-mode","title":"When to Use Debug Mode","text":"<ul> <li>Code has bugs or issues</li> <li>Performance problems</li> <li>Security vulnerabilities</li> <li>Code quality improvements needed</li> <li>Integration issues</li> </ul>"},{"location":"user-guide/workflow-modes/#debug-mode-process","title":"Debug Mode Process","text":""},{"location":"user-guide/workflow-modes/#issue-analysis","title":"Issue Analysis","text":"<p>Input: Debug request + any existing artifacts Process: Analyze code and identify problems Output: Updated <code>notes.md</code></p> <p>Example:</p> <pre><code>User Input: \"Fix JWT token expiration issue\"\n\u2193\nGenerated: notes.md with:\n- Issue analysis\n- Root cause identification\n- Performance impact assessment\n- Security implications\n- Recommended fixes\n</code></pre>"},{"location":"user-guide/workflow-modes/#debug-capabilities","title":"Debug Capabilities","text":"<ul> <li>Code Quality Analysis: Identifies code smells and anti-patterns</li> <li>Performance Analysis: Finds bottlenecks and optimization opportunities</li> <li>Security Analysis: Detects vulnerabilities and security issues</li> <li>Integration Analysis: Checks for integration problems</li> <li>Best Practices: Suggests improvements based on industry standards</li> </ul>"},{"location":"user-guide/workflow-modes/#debug-mode-best-practices","title":"Debug Mode Best Practices","text":"<ul> <li>Be specific about the problem: Describe the exact issue you're facing</li> <li>Provide context: Include relevant code snippets or error messages</li> <li>Mention symptoms: Describe what's not working as expected</li> <li>Include environment details: Mention frameworks, versions, and configurations</li> </ul>"},{"location":"user-guide/workflow-modes/#mode-transitions","title":"\ud83d\udd04 Mode Transitions","text":""},{"location":"user-guide/workflow-modes/#design-build","title":"Design \u2192 Build","text":"<p>Requirements: - Design phase must be 100% complete - All design artifacts must be generated</p> <p>Process: 1. Complete all SPARC phases in Design mode 2. Switch to Build mode 3. Provide implementation requirements 4. System generates code and tests</p>"},{"location":"user-guide/workflow-modes/#build-debug","title":"Build \u2192 Debug","text":"<p>Requirements: - Implementation must be generated - No specific prerequisites</p> <p>Process: 1. Generate implementation in Build mode 2. Switch to Debug mode 3. Provide debug requests 4. System analyzes and provides recommendations</p>"},{"location":"user-guide/workflow-modes/#debug-design","title":"Debug \u2192 Design","text":"<p>Requirements: - None (can switch anytime)</p> <p>Process: 1. Use Debug mode to identify issues 2. Switch to Design mode 3. Refine requirements based on debug findings 4. Update design artifacts</p>"},{"location":"user-guide/workflow-modes/#debug-build","title":"Debug \u2192 Build","text":"<p>Requirements: - None (can switch anytime)</p> <p>Process: 1. Use Debug mode to identify issues 2. Switch to Build mode 3. Implement fixes based on debug recommendations 4. Generate updated implementation</p>"},{"location":"user-guide/workflow-modes/#mode-comparison","title":"\ud83d\udcca Mode Comparison","text":"Aspect Design Mode Build Mode Debug Mode Purpose Requirements &amp; Architecture Implementation Analysis &amp; Fixes Prerequisites None Design Complete None Input User Requirements Implementation Specs Debug Requests Output Specifications, Architecture Code, Tests Analysis, Recommendations Progress 0-100% (5 phases) 100% (implementation) Continuous (notes) Artifacts requirements.md, guidelines.md, pseudocode.md, architecture.md implementation.md, tests.md notes.md"},{"location":"user-guide/workflow-modes/#choosing-the-right-mode","title":"\ud83c\udfaf Choosing the Right Mode","text":""},{"location":"user-guide/workflow-modes/#start-with-design-mode-when","title":"Start with Design Mode when:","text":"<ul> <li>Beginning a new project</li> <li>Defining requirements</li> <li>Planning architecture</li> <li>Creating specifications</li> </ul>"},{"location":"user-guide/workflow-modes/#use-build-mode-when","title":"Use Build Mode when:","text":"<ul> <li>Design is complete</li> <li>Ready to implement</li> <li>Need code generation</li> <li>Creating project structure</li> </ul>"},{"location":"user-guide/workflow-modes/#switch-to-debug-mode-when","title":"Switch to Debug Mode when:","text":"<ul> <li>Issues arise</li> <li>Performance problems</li> <li>Security concerns</li> <li>Code quality issues</li> </ul>"},{"location":"user-guide/workflow-modes/#pro-tips","title":"\ud83d\udca1 Pro Tips","text":"<ol> <li> <p>Iterative Approach: Don't try to complete everything in one mode. Switch between modes as needed.</p> </li> <li> <p>Context Preservation: The system maintains context across mode switches, so you can build upon previous work.</p> </li> <li> <p>Artifact Reuse: Generated artifacts are reused and updated across modes, ensuring consistency.</p> </li> <li> <p>Progressive Refinement: Use multiple iterations in each mode to refine and improve your work.</p> </li> <li> <p>Mode-Specific Input: Tailor your input to the current mode for better results.</p> </li> </ol> <p>Ready to dive deeper? Check out the Complete User Guide for comprehensive documentation.</p>"}]}